
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080043c8  080043c8  000143c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000068  080045b8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080045b8  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019908  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d4  00000000  00000000  000399db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000bd73  00000000  00000000  0003d2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e80  00000000  00000000  00049028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f2a  00000000  00000000  00049ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012dd8  00000000  00000000  0004add2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001db6e  00000000  00000000  0005dbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006b35d  00000000  00000000  0007b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003940  00000000  00000000  000e6a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000ea3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043b0 	.word	0x080043b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080043b0 	.word	0x080043b0

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f806 	bl	8000258 <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__aeabi_idiv0>:
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_ldivmod>:
 800025c:	2b00      	cmp	r3, #0
 800025e:	d115      	bne.n	800028c <__aeabi_ldivmod+0x30>
 8000260:	2a00      	cmp	r2, #0
 8000262:	d113      	bne.n	800028c <__aeabi_ldivmod+0x30>
 8000264:	2900      	cmp	r1, #0
 8000266:	db06      	blt.n	8000276 <__aeabi_ldivmod+0x1a>
 8000268:	dc01      	bgt.n	800026e <__aeabi_ldivmod+0x12>
 800026a:	2800      	cmp	r0, #0
 800026c:	d006      	beq.n	800027c <__aeabi_ldivmod+0x20>
 800026e:	2000      	movs	r0, #0
 8000270:	43c0      	mvns	r0, r0
 8000272:	0841      	lsrs	r1, r0, #1
 8000274:	e002      	b.n	800027c <__aeabi_ldivmod+0x20>
 8000276:	2180      	movs	r1, #128	; 0x80
 8000278:	0609      	lsls	r1, r1, #24
 800027a:	2000      	movs	r0, #0
 800027c:	b407      	push	{r0, r1, r2}
 800027e:	4802      	ldr	r0, [pc, #8]	; (8000288 <__aeabi_ldivmod+0x2c>)
 8000280:	a101      	add	r1, pc, #4	; (adr r1, 8000288 <__aeabi_ldivmod+0x2c>)
 8000282:	1840      	adds	r0, r0, r1
 8000284:	9002      	str	r0, [sp, #8]
 8000286:	bd03      	pop	{r0, r1, pc}
 8000288:	ffffffd1 	.word	0xffffffd1
 800028c:	b403      	push	{r0, r1}
 800028e:	4668      	mov	r0, sp
 8000290:	b501      	push	{r0, lr}
 8000292:	9802      	ldr	r0, [sp, #8]
 8000294:	f000 f834 	bl	8000300 <__gnu_ldivmod_helper>
 8000298:	9b01      	ldr	r3, [sp, #4]
 800029a:	469e      	mov	lr, r3
 800029c:	b002      	add	sp, #8
 800029e:	bc0c      	pop	{r2, r3}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_lmul>:
 80002a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a6:	46ce      	mov	lr, r9
 80002a8:	4699      	mov	r9, r3
 80002aa:	0c03      	lsrs	r3, r0, #16
 80002ac:	469c      	mov	ip, r3
 80002ae:	0413      	lsls	r3, r2, #16
 80002b0:	4647      	mov	r7, r8
 80002b2:	0c1b      	lsrs	r3, r3, #16
 80002b4:	001d      	movs	r5, r3
 80002b6:	000e      	movs	r6, r1
 80002b8:	4661      	mov	r1, ip
 80002ba:	0404      	lsls	r4, r0, #16
 80002bc:	0c24      	lsrs	r4, r4, #16
 80002be:	b580      	push	{r7, lr}
 80002c0:	0007      	movs	r7, r0
 80002c2:	0c10      	lsrs	r0, r2, #16
 80002c4:	434b      	muls	r3, r1
 80002c6:	4365      	muls	r5, r4
 80002c8:	4341      	muls	r1, r0
 80002ca:	4360      	muls	r0, r4
 80002cc:	0c2c      	lsrs	r4, r5, #16
 80002ce:	18c0      	adds	r0, r0, r3
 80002d0:	1820      	adds	r0, r4, r0
 80002d2:	468c      	mov	ip, r1
 80002d4:	4283      	cmp	r3, r0
 80002d6:	d903      	bls.n	80002e0 <__aeabi_lmul+0x3c>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	025b      	lsls	r3, r3, #9
 80002dc:	4698      	mov	r8, r3
 80002de:	44c4      	add	ip, r8
 80002e0:	4649      	mov	r1, r9
 80002e2:	4379      	muls	r1, r7
 80002e4:	4356      	muls	r6, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	042d      	lsls	r5, r5, #16
 80002ea:	0c2d      	lsrs	r5, r5, #16
 80002ec:	1989      	adds	r1, r1, r6
 80002ee:	4463      	add	r3, ip
 80002f0:	0400      	lsls	r0, r0, #16
 80002f2:	1940      	adds	r0, r0, r5
 80002f4:	18c9      	adds	r1, r1, r3
 80002f6:	bcc0      	pop	{r6, r7}
 80002f8:	46b9      	mov	r9, r7
 80002fa:	46b0      	mov	r8, r6
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <__gnu_ldivmod_helper>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	46ce      	mov	lr, r9
 8000304:	4647      	mov	r7, r8
 8000306:	b580      	push	{r7, lr}
 8000308:	4691      	mov	r9, r2
 800030a:	4698      	mov	r8, r3
 800030c:	0004      	movs	r4, r0
 800030e:	000d      	movs	r5, r1
 8000310:	f000 f814 	bl	800033c <__divdi3>
 8000314:	0007      	movs	r7, r0
 8000316:	000e      	movs	r6, r1
 8000318:	0002      	movs	r2, r0
 800031a:	000b      	movs	r3, r1
 800031c:	4648      	mov	r0, r9
 800031e:	4641      	mov	r1, r8
 8000320:	f7ff ffc0 	bl	80002a4 <__aeabi_lmul>
 8000324:	1a24      	subs	r4, r4, r0
 8000326:	418d      	sbcs	r5, r1
 8000328:	9b08      	ldr	r3, [sp, #32]
 800032a:	0038      	movs	r0, r7
 800032c:	0031      	movs	r1, r6
 800032e:	601c      	str	r4, [r3, #0]
 8000330:	605d      	str	r5, [r3, #4]
 8000332:	bcc0      	pop	{r6, r7}
 8000334:	46b9      	mov	r9, r7
 8000336:	46b0      	mov	r8, r6
 8000338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)

0800033c <__divdi3>:
 800033c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800033e:	4657      	mov	r7, sl
 8000340:	464e      	mov	r6, r9
 8000342:	4645      	mov	r5, r8
 8000344:	46de      	mov	lr, fp
 8000346:	b5e0      	push	{r5, r6, r7, lr}
 8000348:	000f      	movs	r7, r1
 800034a:	0019      	movs	r1, r3
 800034c:	2300      	movs	r3, #0
 800034e:	0006      	movs	r6, r0
 8000350:	4698      	mov	r8, r3
 8000352:	0010      	movs	r0, r2
 8000354:	b083      	sub	sp, #12
 8000356:	2f00      	cmp	r7, #0
 8000358:	da07      	bge.n	800036a <__divdi3+0x2e>
 800035a:	0033      	movs	r3, r6
 800035c:	003c      	movs	r4, r7
 800035e:	2700      	movs	r7, #0
 8000360:	425e      	negs	r6, r3
 8000362:	41a7      	sbcs	r7, r4
 8000364:	2301      	movs	r3, #1
 8000366:	425b      	negs	r3, r3
 8000368:	4698      	mov	r8, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	da07      	bge.n	800037e <__divdi3+0x42>
 800036e:	4643      	mov	r3, r8
 8000370:	43db      	mvns	r3, r3
 8000372:	000c      	movs	r4, r1
 8000374:	4698      	mov	r8, r3
 8000376:	0003      	movs	r3, r0
 8000378:	2100      	movs	r1, #0
 800037a:	4258      	negs	r0, r3
 800037c:	41a1      	sbcs	r1, r4
 800037e:	0034      	movs	r4, r6
 8000380:	003d      	movs	r5, r7
 8000382:	4682      	mov	sl, r0
 8000384:	4689      	mov	r9, r1
 8000386:	42b9      	cmp	r1, r7
 8000388:	d869      	bhi.n	800045e <__divdi3+0x122>
 800038a:	d066      	beq.n	800045a <__divdi3+0x11e>
 800038c:	4649      	mov	r1, r9
 800038e:	4650      	mov	r0, sl
 8000390:	f000 f8ba 	bl	8000508 <__clzdi2>
 8000394:	4683      	mov	fp, r0
 8000396:	0039      	movs	r1, r7
 8000398:	0030      	movs	r0, r6
 800039a:	f000 f8b5 	bl	8000508 <__clzdi2>
 800039e:	465b      	mov	r3, fp
 80003a0:	1a1b      	subs	r3, r3, r0
 80003a2:	469c      	mov	ip, r3
 80003a4:	3b20      	subs	r3, #32
 80003a6:	d46b      	bmi.n	8000480 <__divdi3+0x144>
 80003a8:	4651      	mov	r1, sl
 80003aa:	4099      	lsls	r1, r3
 80003ac:	469b      	mov	fp, r3
 80003ae:	4660      	mov	r0, ip
 80003b0:	000b      	movs	r3, r1
 80003b2:	4651      	mov	r1, sl
 80003b4:	4081      	lsls	r1, r0
 80003b6:	000a      	movs	r2, r1
 80003b8:	42bb      	cmp	r3, r7
 80003ba:	d900      	bls.n	80003be <__divdi3+0x82>
 80003bc:	e073      	b.n	80004a6 <__divdi3+0x16a>
 80003be:	42bb      	cmp	r3, r7
 80003c0:	d100      	bne.n	80003c4 <__divdi3+0x88>
 80003c2:	e07a      	b.n	80004ba <__divdi3+0x17e>
 80003c4:	0034      	movs	r4, r6
 80003c6:	003d      	movs	r5, r7
 80003c8:	4659      	mov	r1, fp
 80003ca:	1aa4      	subs	r4, r4, r2
 80003cc:	419d      	sbcs	r5, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	da00      	bge.n	80003d4 <__divdi3+0x98>
 80003d2:	e075      	b.n	80004c0 <__divdi3+0x184>
 80003d4:	2100      	movs	r1, #0
 80003d6:	2000      	movs	r0, #0
 80003d8:	2601      	movs	r6, #1
 80003da:	9000      	str	r0, [sp, #0]
 80003dc:	9101      	str	r1, [sp, #4]
 80003de:	4659      	mov	r1, fp
 80003e0:	408e      	lsls	r6, r1
 80003e2:	9601      	str	r6, [sp, #4]
 80003e4:	4661      	mov	r1, ip
 80003e6:	2601      	movs	r6, #1
 80003e8:	408e      	lsls	r6, r1
 80003ea:	4661      	mov	r1, ip
 80003ec:	9600      	str	r6, [sp, #0]
 80003ee:	2900      	cmp	r1, #0
 80003f0:	d060      	beq.n	80004b4 <__divdi3+0x178>
 80003f2:	07d9      	lsls	r1, r3, #31
 80003f4:	0856      	lsrs	r6, r2, #1
 80003f6:	430e      	orrs	r6, r1
 80003f8:	085f      	lsrs	r7, r3, #1
 80003fa:	4661      	mov	r1, ip
 80003fc:	2201      	movs	r2, #1
 80003fe:	2300      	movs	r3, #0
 8000400:	e00c      	b.n	800041c <__divdi3+0xe0>
 8000402:	42af      	cmp	r7, r5
 8000404:	d101      	bne.n	800040a <__divdi3+0xce>
 8000406:	42a6      	cmp	r6, r4
 8000408:	d80a      	bhi.n	8000420 <__divdi3+0xe4>
 800040a:	1ba4      	subs	r4, r4, r6
 800040c:	41bd      	sbcs	r5, r7
 800040e:	1924      	adds	r4, r4, r4
 8000410:	416d      	adcs	r5, r5
 8000412:	3901      	subs	r1, #1
 8000414:	18a4      	adds	r4, r4, r2
 8000416:	415d      	adcs	r5, r3
 8000418:	2900      	cmp	r1, #0
 800041a:	d006      	beq.n	800042a <__divdi3+0xee>
 800041c:	42af      	cmp	r7, r5
 800041e:	d9f0      	bls.n	8000402 <__divdi3+0xc6>
 8000420:	3901      	subs	r1, #1
 8000422:	1924      	adds	r4, r4, r4
 8000424:	416d      	adcs	r5, r5
 8000426:	2900      	cmp	r1, #0
 8000428:	d1f8      	bne.n	800041c <__divdi3+0xe0>
 800042a:	9800      	ldr	r0, [sp, #0]
 800042c:	9901      	ldr	r1, [sp, #4]
 800042e:	465b      	mov	r3, fp
 8000430:	1900      	adds	r0, r0, r4
 8000432:	4169      	adcs	r1, r5
 8000434:	2b00      	cmp	r3, #0
 8000436:	db4e      	blt.n	80004d6 <__divdi3+0x19a>
 8000438:	002e      	movs	r6, r5
 800043a:	002c      	movs	r4, r5
 800043c:	40de      	lsrs	r6, r3
 800043e:	4663      	mov	r3, ip
 8000440:	40dc      	lsrs	r4, r3
 8000442:	465b      	mov	r3, fp
 8000444:	2b00      	cmp	r3, #0
 8000446:	db56      	blt.n	80004f6 <__divdi3+0x1ba>
 8000448:	0034      	movs	r4, r6
 800044a:	409c      	lsls	r4, r3
 800044c:	0023      	movs	r3, r4
 800044e:	4664      	mov	r4, ip
 8000450:	40a6      	lsls	r6, r4
 8000452:	0032      	movs	r2, r6
 8000454:	1a80      	subs	r0, r0, r2
 8000456:	4199      	sbcs	r1, r3
 8000458:	e003      	b.n	8000462 <__divdi3+0x126>
 800045a:	42b0      	cmp	r0, r6
 800045c:	d996      	bls.n	800038c <__divdi3+0x50>
 800045e:	2000      	movs	r0, #0
 8000460:	2100      	movs	r1, #0
 8000462:	4643      	mov	r3, r8
 8000464:	2b00      	cmp	r3, #0
 8000466:	d004      	beq.n	8000472 <__divdi3+0x136>
 8000468:	0003      	movs	r3, r0
 800046a:	000c      	movs	r4, r1
 800046c:	2100      	movs	r1, #0
 800046e:	4258      	negs	r0, r3
 8000470:	41a1      	sbcs	r1, r4
 8000472:	b003      	add	sp, #12
 8000474:	bcf0      	pop	{r4, r5, r6, r7}
 8000476:	46bb      	mov	fp, r7
 8000478:	46b2      	mov	sl, r6
 800047a:	46a9      	mov	r9, r5
 800047c:	46a0      	mov	r8, r4
 800047e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000480:	4662      	mov	r2, ip
 8000482:	4648      	mov	r0, r9
 8000484:	469b      	mov	fp, r3
 8000486:	2320      	movs	r3, #32
 8000488:	4651      	mov	r1, sl
 800048a:	4090      	lsls	r0, r2
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	40d9      	lsrs	r1, r3
 8000490:	0003      	movs	r3, r0
 8000492:	9100      	str	r1, [sp, #0]
 8000494:	9900      	ldr	r1, [sp, #0]
 8000496:	4660      	mov	r0, ip
 8000498:	430b      	orrs	r3, r1
 800049a:	4651      	mov	r1, sl
 800049c:	4081      	lsls	r1, r0
 800049e:	000a      	movs	r2, r1
 80004a0:	42bb      	cmp	r3, r7
 80004a2:	d800      	bhi.n	80004a6 <__divdi3+0x16a>
 80004a4:	e78b      	b.n	80003be <__divdi3+0x82>
 80004a6:	2100      	movs	r1, #0
 80004a8:	2000      	movs	r0, #0
 80004aa:	9000      	str	r0, [sp, #0]
 80004ac:	9101      	str	r1, [sp, #4]
 80004ae:	4661      	mov	r1, ip
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d19e      	bne.n	80003f2 <__divdi3+0xb6>
 80004b4:	9800      	ldr	r0, [sp, #0]
 80004b6:	9901      	ldr	r1, [sp, #4]
 80004b8:	e7d3      	b.n	8000462 <__divdi3+0x126>
 80004ba:	42b1      	cmp	r1, r6
 80004bc:	d8f3      	bhi.n	80004a6 <__divdi3+0x16a>
 80004be:	e781      	b.n	80003c4 <__divdi3+0x88>
 80004c0:	4661      	mov	r1, ip
 80004c2:	2620      	movs	r6, #32
 80004c4:	2701      	movs	r7, #1
 80004c6:	1a76      	subs	r6, r6, r1
 80004c8:	2000      	movs	r0, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	40f7      	lsrs	r7, r6
 80004ce:	9000      	str	r0, [sp, #0]
 80004d0:	9101      	str	r1, [sp, #4]
 80004d2:	9701      	str	r7, [sp, #4]
 80004d4:	e786      	b.n	80003e4 <__divdi3+0xa8>
 80004d6:	4662      	mov	r2, ip
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	002a      	movs	r2, r5
 80004de:	409a      	lsls	r2, r3
 80004e0:	0026      	movs	r6, r4
 80004e2:	0013      	movs	r3, r2
 80004e4:	4662      	mov	r2, ip
 80004e6:	40d6      	lsrs	r6, r2
 80004e8:	002c      	movs	r4, r5
 80004ea:	431e      	orrs	r6, r3
 80004ec:	4663      	mov	r3, ip
 80004ee:	40dc      	lsrs	r4, r3
 80004f0:	465b      	mov	r3, fp
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	daa8      	bge.n	8000448 <__divdi3+0x10c>
 80004f6:	4662      	mov	r2, ip
 80004f8:	2320      	movs	r3, #32
 80004fa:	0035      	movs	r5, r6
 80004fc:	4094      	lsls	r4, r2
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	40dd      	lsrs	r5, r3
 8000502:	0023      	movs	r3, r4
 8000504:	432b      	orrs	r3, r5
 8000506:	e7a2      	b.n	800044e <__divdi3+0x112>

08000508 <__clzdi2>:
 8000508:	b510      	push	{r4, lr}
 800050a:	2900      	cmp	r1, #0
 800050c:	d103      	bne.n	8000516 <__clzdi2+0xe>
 800050e:	f000 f807 	bl	8000520 <__clzsi2>
 8000512:	3020      	adds	r0, #32
 8000514:	e002      	b.n	800051c <__clzdi2+0x14>
 8000516:	0008      	movs	r0, r1
 8000518:	f000 f802 	bl	8000520 <__clzsi2>
 800051c:	bd10      	pop	{r4, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__clzsi2>:
 8000520:	211c      	movs	r1, #28
 8000522:	2301      	movs	r3, #1
 8000524:	041b      	lsls	r3, r3, #16
 8000526:	4298      	cmp	r0, r3
 8000528:	d301      	bcc.n	800052e <__clzsi2+0xe>
 800052a:	0c00      	lsrs	r0, r0, #16
 800052c:	3910      	subs	r1, #16
 800052e:	0a1b      	lsrs	r3, r3, #8
 8000530:	4298      	cmp	r0, r3
 8000532:	d301      	bcc.n	8000538 <__clzsi2+0x18>
 8000534:	0a00      	lsrs	r0, r0, #8
 8000536:	3908      	subs	r1, #8
 8000538:	091b      	lsrs	r3, r3, #4
 800053a:	4298      	cmp	r0, r3
 800053c:	d301      	bcc.n	8000542 <__clzsi2+0x22>
 800053e:	0900      	lsrs	r0, r0, #4
 8000540:	3904      	subs	r1, #4
 8000542:	a202      	add	r2, pc, #8	; (adr r2, 800054c <__clzsi2+0x2c>)
 8000544:	5c10      	ldrb	r0, [r2, r0]
 8000546:	1840      	adds	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	02020304 	.word	0x02020304
 8000550:	01010101 	.word	0x01010101
	...

0800055c <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800055c:	2800      	cmp	r0, #0
 800055e:	d00a      	beq.n	8000576 <null_ptr_check+0x1a>
 8000560:	6843      	ldr	r3, [r0, #4]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <null_ptr_check+0x1a>
 8000566:	6883      	ldr	r3, [r0, #8]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d004      	beq.n	8000576 <null_ptr_check+0x1a>
 800056c:	68c0      	ldr	r0, [r0, #12]
 800056e:	4243      	negs	r3, r0
 8000570:	4158      	adcs	r0, r3
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8000572:	4240      	negs	r0, r0
        /* Device structure is fine */
        rslt = BME280_OK;
    }

    return rslt;
}
 8000574:	4770      	bx	lr
        rslt = BME280_E_NULL_PTR;
 8000576:	2001      	movs	r0, #1
 8000578:	e7fb      	b.n	8000572 <null_ptr_check+0x16>

0800057a <bme280_get_regs>:
{
 800057a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057c:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 800057e:	0018      	movs	r0, r3
{
 8000580:	000e      	movs	r6, r1
 8000582:	0017      	movs	r7, r2
 8000584:	001c      	movs	r4, r3
    rslt = null_ptr_check(dev);
 8000586:	f7ff ffe9 	bl	800055c <null_ptr_check>
    if (rslt == BME280_OK)
 800058a:	2800      	cmp	r0, #0
 800058c:	d10e      	bne.n	80005ac <bme280_get_regs+0x32>
        if (dev->intf != BME280_I2C_INTF)
 800058e:	78a3      	ldrb	r3, [r4, #2]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d001      	beq.n	8000598 <bme280_get_regs+0x1e>
            reg_addr = reg_addr | 0x80;
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	431d      	orrs	r5, r3
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000598:	7860      	ldrb	r0, [r4, #1]
 800059a:	003b      	movs	r3, r7
 800059c:	0032      	movs	r2, r6
 800059e:	0029      	movs	r1, r5
 80005a0:	6864      	ldr	r4, [r4, #4]
 80005a2:	47a0      	blx	r4
        if (rslt != BME280_OK)
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d001      	beq.n	80005ac <bme280_get_regs+0x32>
            rslt = BME280_E_COMM_FAIL;
 80005a8:	2004      	movs	r0, #4
 80005aa:	4240      	negs	r0, r0
}
 80005ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080005ae <bme280_set_regs>:
{
 80005ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b0:	001d      	movs	r5, r3
 80005b2:	0004      	movs	r4, r0
 80005b4:	000f      	movs	r7, r1
 80005b6:	0016      	movs	r6, r2
 80005b8:	b089      	sub	sp, #36	; 0x24
 80005ba:	1c13      	adds	r3, r2, #0
 80005bc:	2a0a      	cmp	r2, #10
 80005be:	d900      	bls.n	80005c2 <bme280_set_regs+0x14>
 80005c0:	230a      	movs	r3, #10
 80005c2:	b2db      	uxtb	r3, r3
    rslt = null_ptr_check(dev);
 80005c4:	0028      	movs	r0, r5
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	f7ff ffc8 	bl	800055c <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d137      	bne.n	8000640 <bme280_set_regs+0x92>
 80005d0:	2c00      	cmp	r4, #0
 80005d2:	d035      	beq.n	8000640 <bme280_set_regs+0x92>
 80005d4:	2f00      	cmp	r7, #0
 80005d6:	d033      	beq.n	8000640 <bme280_set_regs+0x92>
        if (len != 0)
 80005d8:	2e00      	cmp	r6, #0
 80005da:	d033      	beq.n	8000644 <bme280_set_regs+0x96>
            temp_buff[0] = reg_data[0];
 80005dc:	783b      	ldrb	r3, [r7, #0]
 80005de:	aa03      	add	r2, sp, #12
 80005e0:	7013      	strb	r3, [r2, #0]
            if (dev->intf != BME280_I2C_INTF)
 80005e2:	78ab      	ldrb	r3, [r5, #2]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d008      	beq.n	80005fa <bme280_set_regs+0x4c>
 80005e8:	9900      	ldr	r1, [sp, #0]
 80005ea:	0023      	movs	r3, r4
 80005ec:	1909      	adds	r1, r1, r4
 80005ee:	9101      	str	r1, [sp, #4]
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80005f0:	217f      	movs	r1, #127	; 0x7f
 80005f2:	468c      	mov	ip, r1
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80005f4:	9901      	ldr	r1, [sp, #4]
 80005f6:	428b      	cmp	r3, r1
 80005f8:	d116      	bne.n	8000628 <bme280_set_regs+0x7a>
                temp_len = len;
 80005fa:	2301      	movs	r3, #1
            if (len > 1)
 80005fc:	429e      	cmp	r6, r3
 80005fe:	d009      	beq.n	8000614 <bme280_set_regs+0x66>
 8000600:	0011      	movs	r1, r2
 8000602:	2300      	movs	r3, #0
    for (index = 1; index < len; index++)
 8000604:	3301      	adds	r3, #1
 8000606:	9e00      	ldr	r6, [sp, #0]
 8000608:	b2d8      	uxtb	r0, r3
 800060a:	4286      	cmp	r6, r0
 800060c:	d812      	bhi.n	8000634 <bme280_set_regs+0x86>
                temp_len = ((len * 2) - 1);
 800060e:	0073      	lsls	r3, r6, #1
 8000610:	3b01      	subs	r3, #1
 8000612:	b29b      	uxth	r3, r3
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000614:	7821      	ldrb	r1, [r4, #0]
 8000616:	7868      	ldrb	r0, [r5, #1]
 8000618:	68ac      	ldr	r4, [r5, #8]
 800061a:	47a0      	blx	r4
            if (rslt != BME280_OK)
 800061c:	2800      	cmp	r0, #0
 800061e:	d001      	beq.n	8000624 <bme280_set_regs+0x76>
                rslt = BME280_E_COMM_FAIL;
 8000620:	2004      	movs	r0, #4
            rslt = BME280_E_INVALID_LEN;
 8000622:	4240      	negs	r0, r0
}
 8000624:	b009      	add	sp, #36	; 0x24
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000628:	4660      	mov	r0, ip
 800062a:	7819      	ldrb	r1, [r3, #0]
 800062c:	4001      	ands	r1, r0
 800062e:	7019      	strb	r1, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000630:	3301      	adds	r3, #1
 8000632:	e7df      	b.n	80005f4 <bme280_set_regs+0x46>
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8000634:	5ce0      	ldrb	r0, [r4, r3]
 8000636:	7048      	strb	r0, [r1, #1]
        temp_buff[index * 2] = reg_data[index];
 8000638:	5cf8      	ldrb	r0, [r7, r3]
 800063a:	3102      	adds	r1, #2
 800063c:	7008      	strb	r0, [r1, #0]
    for (index = 1; index < len; index++)
 800063e:	e7e1      	b.n	8000604 <bme280_set_regs+0x56>
        rslt = BME280_E_NULL_PTR;
 8000640:	2001      	movs	r0, #1
 8000642:	e7ee      	b.n	8000622 <bme280_set_regs+0x74>
            rslt = BME280_E_INVALID_LEN;
 8000644:	2003      	movs	r0, #3
 8000646:	e7ec      	b.n	8000622 <bme280_set_regs+0x74>

08000648 <set_filter_standby_settings>:
{
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	0005      	movs	r5, r0
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800064c:	20f5      	movs	r0, #245	; 0xf5
{
 800064e:	b085      	sub	sp, #20
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8000650:	ab02      	add	r3, sp, #8
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000652:	1ddc      	adds	r4, r3, #7
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8000654:	1d9f      	adds	r7, r3, #6
{
 8000656:	0016      	movs	r6, r2
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000658:	0013      	movs	r3, r2
{
 800065a:	9101      	str	r1, [sp, #4]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800065c:	2201      	movs	r2, #1
 800065e:	0021      	movs	r1, r4
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8000660:	7038      	strb	r0, [r7, #0]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000662:	f7ff ff8a 	bl	800057a <bme280_get_regs>
    if (rslt == BME280_OK)
 8000666:	2800      	cmp	r0, #0
 8000668:	d11a      	bne.n	80006a0 <set_filter_standby_settings+0x58>
        if (desired_settings & BME280_FILTER_SEL)
 800066a:	072b      	lsls	r3, r5, #28
 800066c:	d508      	bpl.n	8000680 <set_filter_standby_settings+0x38>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800066e:	211c      	movs	r1, #28
 8000670:	9b01      	ldr	r3, [sp, #4]
 8000672:	7822      	ldrb	r2, [r4, #0]
 8000674:	78db      	ldrb	r3, [r3, #3]
 8000676:	438a      	bics	r2, r1
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	400b      	ands	r3, r1
 800067c:	4313      	orrs	r3, r2
 800067e:	7023      	strb	r3, [r4, #0]
        if (desired_settings & BME280_STANDBY_SEL)
 8000680:	06ed      	lsls	r5, r5, #27
 8000682:	d507      	bpl.n	8000694 <set_filter_standby_settings+0x4c>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8000684:	221f      	movs	r2, #31
 8000686:	7823      	ldrb	r3, [r4, #0]
 8000688:	4013      	ands	r3, r2
 800068a:	9a01      	ldr	r2, [sp, #4]
 800068c:	7912      	ldrb	r2, [r2, #4]
 800068e:	0152      	lsls	r2, r2, #5
 8000690:	4313      	orrs	r3, r2
 8000692:	7023      	strb	r3, [r4, #0]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8000694:	0033      	movs	r3, r6
 8000696:	2201      	movs	r2, #1
 8000698:	0021      	movs	r1, r4
 800069a:	0038      	movs	r0, r7
 800069c:	f7ff ff87 	bl	80005ae <bme280_set_regs>
}
 80006a0:	b005      	add	sp, #20
 80006a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006a4 <set_osr_settings>:
{
 80006a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80006a6:	0005      	movs	r5, r0
 80006a8:	000f      	movs	r7, r1
 80006aa:	0014      	movs	r4, r2
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80006ac:	2001      	movs	r0, #1
    if (desired_settings & BME280_OSR_HUM_SEL)
 80006ae:	076b      	lsls	r3, r5, #29
 80006b0:	d522      	bpl.n	80006f8 <set_osr_settings+0x54>
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80006b2:	22f2      	movs	r2, #242	; 0xf2
 80006b4:	788b      	ldrb	r3, [r1, #2]
 80006b6:	4669      	mov	r1, sp
 80006b8:	71ca      	strb	r2, [r1, #7]
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80006ba:	2207      	movs	r2, #7
 80006bc:	4013      	ands	r3, r2
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80006be:	0002      	movs	r2, r0
 80006c0:	4668      	mov	r0, sp
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80006c2:	3105      	adds	r1, #5
 80006c4:	700b      	strb	r3, [r1, #0]
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80006c6:	3007      	adds	r0, #7
 80006c8:	0023      	movs	r3, r4
 80006ca:	f7ff ff70 	bl	80005ae <bme280_set_regs>
    if (rslt == BME280_OK)
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d112      	bne.n	80006f8 <set_osr_settings+0x54>
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80006d2:	466b      	mov	r3, sp
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80006d4:	4669      	mov	r1, sp
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80006d6:	30f4      	adds	r0, #244	; 0xf4
 80006d8:	71d8      	strb	r0, [r3, #7]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80006da:	2201      	movs	r2, #1
 80006dc:	0023      	movs	r3, r4
 80006de:	3106      	adds	r1, #6
 80006e0:	f7ff ff4b 	bl	800057a <bme280_get_regs>
        if (rslt == BME280_OK)
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d107      	bne.n	80006f8 <set_osr_settings+0x54>
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80006e8:	4669      	mov	r1, sp
 80006ea:	4668      	mov	r0, sp
 80006ec:	0023      	movs	r3, r4
 80006ee:	2201      	movs	r2, #1
 80006f0:	3106      	adds	r1, #6
 80006f2:	3007      	adds	r0, #7
 80006f4:	f7ff ff5b 	bl	80005ae <bme280_set_regs>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80006f8:	07ab      	lsls	r3, r5, #30
 80006fa:	d024      	beq.n	8000746 <set_osr_settings+0xa2>
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80006fc:	466b      	mov	r3, sp
 80006fe:	20f4      	movs	r0, #244	; 0xf4
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000700:	1dde      	adds	r6, r3, #7
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8000702:	7198      	strb	r0, [r3, #6]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000704:	2201      	movs	r2, #1
 8000706:	0023      	movs	r3, r4
 8000708:	0031      	movs	r1, r6
 800070a:	f7ff ff36 	bl	800057a <bme280_get_regs>
    if (rslt == BME280_OK)
 800070e:	2800      	cmp	r0, #0
 8000710:	d119      	bne.n	8000746 <set_osr_settings+0xa2>
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8000712:	07eb      	lsls	r3, r5, #31
 8000714:	d507      	bpl.n	8000726 <set_osr_settings+0x82>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8000716:	211c      	movs	r1, #28
 8000718:	783b      	ldrb	r3, [r7, #0]
 800071a:	7832      	ldrb	r2, [r6, #0]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	400b      	ands	r3, r1
 8000720:	438a      	bics	r2, r1
 8000722:	4313      	orrs	r3, r2
 8000724:	7033      	strb	r3, [r6, #0]
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8000726:	07ad      	lsls	r5, r5, #30
 8000728:	d506      	bpl.n	8000738 <set_osr_settings+0x94>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800072a:	221f      	movs	r2, #31
 800072c:	7833      	ldrb	r3, [r6, #0]
 800072e:	4013      	ands	r3, r2
 8000730:	787a      	ldrb	r2, [r7, #1]
 8000732:	0152      	lsls	r2, r2, #5
 8000734:	4313      	orrs	r3, r2
 8000736:	7033      	strb	r3, [r6, #0]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8000738:	4668      	mov	r0, sp
 800073a:	0023      	movs	r3, r4
 800073c:	2201      	movs	r2, #1
 800073e:	0031      	movs	r1, r6
 8000740:	3006      	adds	r0, #6
 8000742:	f7ff ff34 	bl	80005ae <bme280_set_regs>
}
 8000746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000748 <bme280_get_sensor_mode>:
{
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
 800074c:	0008      	movs	r0, r1
{
 800074e:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 8000750:	f7ff ff04 	bl	800055c <null_ptr_check>
    if (rslt == BME280_OK)
 8000754:	2800      	cmp	r0, #0
 8000756:	d109      	bne.n	800076c <bme280_get_sensor_mode+0x24>
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8000758:	002b      	movs	r3, r5
 800075a:	2201      	movs	r2, #1
 800075c:	0021      	movs	r1, r4
 800075e:	30f4      	adds	r0, #244	; 0xf4
 8000760:	f7ff ff0b 	bl	800057a <bme280_get_regs>
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8000764:	2203      	movs	r2, #3
 8000766:	7823      	ldrb	r3, [r4, #0]
 8000768:	4013      	ands	r3, r2
 800076a:	7023      	strb	r3, [r4, #0]
}
 800076c:	bd70      	pop	{r4, r5, r6, pc}

0800076e <bme280_soft_reset>:
{
 800076e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t reg_addr = BME280_RESET_ADDR;
 8000770:	466b      	mov	r3, sp
 8000772:	1d5e      	adds	r6, r3, #5
 8000774:	23e0      	movs	r3, #224	; 0xe0
 8000776:	7033      	strb	r3, [r6, #0]
    uint8_t status_reg = 0;
 8000778:	466b      	mov	r3, sp
 800077a:	1d9d      	adds	r5, r3, #6
 800077c:	2300      	movs	r3, #0
 800077e:	702b      	strb	r3, [r5, #0]
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8000780:	466b      	mov	r3, sp
 8000782:	1ddf      	adds	r7, r3, #7
 8000784:	23b6      	movs	r3, #182	; 0xb6
{
 8000786:	0004      	movs	r4, r0
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8000788:	703b      	strb	r3, [r7, #0]
    rslt = null_ptr_check(dev);
 800078a:	f7ff fee7 	bl	800055c <null_ptr_check>
    if (rslt == BME280_OK)
 800078e:	2800      	cmp	r0, #0
 8000790:	d121      	bne.n	80007d6 <bme280_soft_reset+0x68>
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000792:	0023      	movs	r3, r4
 8000794:	2201      	movs	r2, #1
 8000796:	0039      	movs	r1, r7
 8000798:	0030      	movs	r0, r6
 800079a:	f7ff ff08 	bl	80005ae <bme280_set_regs>
        if (rslt == BME280_OK)
 800079e:	2800      	cmp	r0, #0
 80007a0:	d119      	bne.n	80007d6 <bme280_soft_reset+0x68>
 80007a2:	2606      	movs	r6, #6
                dev->delay_ms(2);
 80007a4:	2002      	movs	r0, #2
 80007a6:	68e3      	ldr	r3, [r4, #12]
 80007a8:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80007aa:	0023      	movs	r3, r4
 80007ac:	2201      	movs	r2, #1
 80007ae:	0029      	movs	r1, r5
 80007b0:	20f3      	movs	r0, #243	; 0xf3
 80007b2:	f7ff fee2 	bl	800057a <bme280_get_regs>
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d108      	bne.n	80007cc <bme280_soft_reset+0x5e>
 80007ba:	2201      	movs	r2, #1
 80007bc:	782b      	ldrb	r3, [r5, #0]
 80007be:	3e01      	subs	r6, #1
 80007c0:	b2f6      	uxtb	r6, r6
 80007c2:	4013      	ands	r3, r2
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d001      	beq.n	80007cc <bme280_soft_reset+0x5e>
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1eb      	bne.n	80007a4 <bme280_soft_reset+0x36>
            if (status_reg & BME280_STATUS_IM_UPDATE)
 80007cc:	782b      	ldrb	r3, [r5, #0]
 80007ce:	07db      	lsls	r3, r3, #31
 80007d0:	d501      	bpl.n	80007d6 <bme280_soft_reset+0x68>
                rslt = BME280_E_NVM_COPY_FAILED;
 80007d2:	2006      	movs	r0, #6
 80007d4:	4240      	negs	r0, r0
}
 80007d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080007d8 <bme280_init>:
{
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	466a      	mov	r2, sp
{
 80007e0:	0004      	movs	r4, r0
    uint8_t chip_id = 0;
 80007e2:	70d3      	strb	r3, [r2, #3]
    rslt = null_ptr_check(dev);
 80007e4:	f7ff feba 	bl	800055c <null_ptr_check>
    if (rslt == BME280_OK)
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d151      	bne.n	8000890 <bme280_init+0xb8>
 80007ec:	2505      	movs	r5, #5
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80007ee:	4669      	mov	r1, sp
 80007f0:	0023      	movs	r3, r4
 80007f2:	2201      	movs	r2, #1
 80007f4:	20d0      	movs	r0, #208	; 0xd0
 80007f6:	3103      	adds	r1, #3
 80007f8:	f7ff febf 	bl	800057a <bme280_get_regs>
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d149      	bne.n	8000894 <bme280_init+0xbc>
 8000800:	466b      	mov	r3, sp
 8000802:	78db      	ldrb	r3, [r3, #3]
 8000804:	2b60      	cmp	r3, #96	; 0x60
 8000806:	d145      	bne.n	8000894 <bme280_init+0xbc>
                rslt = bme280_soft_reset(dev);
 8000808:	0020      	movs	r0, r4
                dev->chip_id = chip_id;
 800080a:	7023      	strb	r3, [r4, #0]
                rslt = bme280_soft_reset(dev);
 800080c:	f7ff ffaf 	bl	800076e <bme280_soft_reset>
                if (rslt == BME280_OK)
 8000810:	2800      	cmp	r0, #0
 8000812:	d13d      	bne.n	8000890 <bme280_init+0xb8>
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8000814:	0001      	movs	r1, r0
 8000816:	2216      	movs	r2, #22
 8000818:	9001      	str	r0, [sp, #4]
 800081a:	ad01      	add	r5, sp, #4
 800081c:	a802      	add	r0, sp, #8
 800081e:	f002 fde7 	bl	80033f0 <memset>
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8000822:	0023      	movs	r3, r4
 8000824:	221a      	movs	r2, #26
 8000826:	0029      	movs	r1, r5
 8000828:	2088      	movs	r0, #136	; 0x88
 800082a:	f7ff fea6 	bl	800057a <bme280_get_regs>
    if (rslt == BME280_OK)
 800082e:	2800      	cmp	r0, #0
 8000830:	d12e      	bne.n	8000890 <bme280_init+0xb8>
    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000832:	9b01      	ldr	r3, [sp, #4]
    calib_data->dig_h1 = reg_data[25];
 8000834:	7e6a      	ldrb	r2, [r5, #25]
    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000836:	6123      	str	r3, [r4, #16]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8000838:	9b02      	ldr	r3, [sp, #8]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800083a:	0029      	movs	r1, r5
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800083c:	6163      	str	r3, [r4, #20]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800083e:	9b03      	ldr	r3, [sp, #12]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8000840:	30e1      	adds	r0, #225	; 0xe1
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8000842:	61a3      	str	r3, [r4, #24]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8000844:	9b04      	ldr	r3, [sp, #16]
 8000846:	61e3      	str	r3, [r4, #28]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8000848:	9b05      	ldr	r3, [sp, #20]
 800084a:	6223      	str	r3, [r4, #32]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800084c:	9b06      	ldr	r3, [sp, #24]
 800084e:	6263      	str	r3, [r4, #36]	; 0x24
    calib_data->dig_h1 = reg_data[25];
 8000850:	0023      	movs	r3, r4
 8000852:	3328      	adds	r3, #40	; 0x28
 8000854:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8000856:	0023      	movs	r3, r4
 8000858:	2207      	movs	r2, #7
 800085a:	f7ff fe8e 	bl	800057a <bme280_get_regs>
        if (rslt == BME280_OK)
 800085e:	2800      	cmp	r0, #0
 8000860:	d116      	bne.n	8000890 <bme280_init+0xb8>
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000862:	882b      	ldrh	r3, [r5, #0]
    calib_data->dig_h3 = reg_data[2];
 8000864:	78aa      	ldrb	r2, [r5, #2]
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8000866:	8563      	strh	r3, [r4, #42]	; 0x2a
    calib_data->dig_h3 = reg_data[2];
 8000868:	0023      	movs	r3, r4
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800086a:	2103      	movs	r1, #3
    calib_data->dig_h3 = reg_data[2];
 800086c:	332c      	adds	r3, #44	; 0x2c
 800086e:	701a      	strb	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8000870:	220f      	movs	r2, #15
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8000872:	5669      	ldrsb	r1, [r5, r1]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8000874:	792b      	ldrb	r3, [r5, #4]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8000876:	0109      	lsls	r1, r1, #4
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8000878:	401a      	ands	r2, r3
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800087a:	430a      	orrs	r2, r1
 800087c:	85e2      	strh	r2, [r4, #46]	; 0x2e
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800087e:	2205      	movs	r2, #5
 8000880:	56aa      	ldrsb	r2, [r5, r2]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8000882:	091b      	lsrs	r3, r3, #4
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8000884:	0112      	lsls	r2, r2, #4
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8000886:	4313      	orrs	r3, r2
 8000888:	8623      	strh	r3, [r4, #48]	; 0x30
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800088a:	79ab      	ldrb	r3, [r5, #6]
 800088c:	3432      	adds	r4, #50	; 0x32
 800088e:	7023      	strb	r3, [r4, #0]
}
 8000890:	b009      	add	sp, #36	; 0x24
 8000892:	bd30      	pop	{r4, r5, pc}
        while (try_count)
 8000894:	3d01      	subs	r5, #1
            dev->delay_ms(1);
 8000896:	2001      	movs	r0, #1
 8000898:	68e3      	ldr	r3, [r4, #12]
        while (try_count)
 800089a:	b2ed      	uxtb	r5, r5
            dev->delay_ms(1);
 800089c:	4798      	blx	r3
        while (try_count)
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d1a5      	bne.n	80007ee <bme280_init+0x16>
            rslt = BME280_E_DEV_NOT_FOUND;
 80008a2:	2002      	movs	r0, #2
 80008a4:	4240      	negs	r0, r0
 80008a6:	e7f3      	b.n	8000890 <bme280_init+0xb8>

080008a8 <put_device_to_sleep>:
{
 80008a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80008aa:	ae01      	add	r6, sp, #4
{
 80008ac:	0005      	movs	r5, r0
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80008ae:	0003      	movs	r3, r0
 80008b0:	2204      	movs	r2, #4
 80008b2:	0031      	movs	r1, r6
 80008b4:	20f2      	movs	r0, #242	; 0xf2
 80008b6:	f7ff fe60 	bl	800057a <bme280_get_regs>
    if (rslt == BME280_OK)
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d121      	bne.n	8000902 <put_device_to_sleep+0x5a>
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80008be:	2107      	movs	r1, #7
 80008c0:	7833      	ldrb	r3, [r6, #0]
 80008c2:	ac02      	add	r4, sp, #8
 80008c4:	400b      	ands	r3, r1
 80008c6:	70a3      	strb	r3, [r4, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80008c8:	78b3      	ldrb	r3, [r6, #2]
        rslt = bme280_soft_reset(dev);
 80008ca:	0028      	movs	r0, r5
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80008cc:	109a      	asrs	r2, r3, #2
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	7063      	strb	r3, [r4, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80008d2:	78f3      	ldrb	r3, [r6, #3]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80008d4:	400a      	ands	r2, r1
 80008d6:	7022      	strb	r2, [r4, #0]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80008d8:	109a      	asrs	r2, r3, #2
 80008da:	400a      	ands	r2, r1
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80008dc:	095b      	lsrs	r3, r3, #5
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80008de:	70e2      	strb	r2, [r4, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80008e0:	7123      	strb	r3, [r4, #4]
        rslt = bme280_soft_reset(dev);
 80008e2:	f7ff ff44 	bl	800076e <bme280_soft_reset>
        if (rslt == BME280_OK)
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d10b      	bne.n	8000902 <put_device_to_sleep+0x5a>
    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80008ea:	002a      	movs	r2, r5
 80008ec:	0021      	movs	r1, r4
 80008ee:	301f      	adds	r0, #31
 80008f0:	f7ff fed8 	bl	80006a4 <set_osr_settings>
    if (rslt == BME280_OK)
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d104      	bne.n	8000902 <put_device_to_sleep+0x5a>
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80008f8:	002a      	movs	r2, r5
 80008fa:	0021      	movs	r1, r4
 80008fc:	301f      	adds	r0, #31
 80008fe:	f7ff fea3 	bl	8000648 <set_filter_standby_settings>
}
 8000902:	b004      	add	sp, #16
 8000904:	bd70      	pop	{r4, r5, r6, pc}

08000906 <bme280_set_sensor_settings>:
{
 8000906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000908:	0006      	movs	r6, r0
    rslt = null_ptr_check(dev);
 800090a:	0008      	movs	r0, r1
{
 800090c:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 800090e:	f7ff fe25 	bl	800055c <null_ptr_check>
 8000912:	1e04      	subs	r4, r0, #0
    if (rslt == BME280_OK)
 8000914:	d10f      	bne.n	8000936 <bme280_set_sensor_settings+0x30>
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8000916:	466b      	mov	r3, sp
 8000918:	1ddf      	adds	r7, r3, #7
 800091a:	0029      	movs	r1, r5
 800091c:	0038      	movs	r0, r7
 800091e:	f7ff ff13 	bl	8000748 <bme280_get_sensor_mode>
 8000922:	1e04      	subs	r4, r0, #0
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8000924:	d107      	bne.n	8000936 <bme280_set_sensor_settings+0x30>
 8000926:	783b      	ldrb	r3, [r7, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d106      	bne.n	800093a <bme280_set_sensor_settings+0x34>
    if (sub_settings & desired_settings)
 800092c:	0773      	lsls	r3, r6, #29
 800092e:	d10b      	bne.n	8000948 <bme280_set_sensor_settings+0x42>
 8000930:	2318      	movs	r3, #24
 8000932:	421e      	tst	r6, r3
 8000934:	d111      	bne.n	800095a <bme280_set_sensor_settings+0x54>
}
 8000936:	0020      	movs	r0, r4
 8000938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            rslt = put_device_to_sleep(dev);
 800093a:	0028      	movs	r0, r5
 800093c:	f7ff ffb4 	bl	80008a8 <put_device_to_sleep>
        if (rslt == BME280_OK)
 8000940:	2800      	cmp	r0, #0
 8000942:	d0f3      	beq.n	800092c <bme280_set_sensor_settings+0x26>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8000944:	0004      	movs	r4, r0
 8000946:	e7f6      	b.n	8000936 <bme280_set_sensor_settings+0x30>
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8000948:	0029      	movs	r1, r5
 800094a:	002a      	movs	r2, r5
 800094c:	0030      	movs	r0, r6
 800094e:	3138      	adds	r1, #56	; 0x38
 8000950:	f7ff fea8 	bl	80006a4 <set_osr_settings>
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8000954:	2800      	cmp	r0, #0
 8000956:	d1f5      	bne.n	8000944 <bme280_set_sensor_settings+0x3e>
 8000958:	e7ea      	b.n	8000930 <bme280_set_sensor_settings+0x2a>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800095a:	0029      	movs	r1, r5
 800095c:	002a      	movs	r2, r5
 800095e:	0030      	movs	r0, r6
 8000960:	3138      	adds	r1, #56	; 0x38
 8000962:	f7ff fe71 	bl	8000648 <set_filter_standby_settings>
 8000966:	e7ed      	b.n	8000944 <bme280_set_sensor_settings+0x3e>

08000968 <bme280_set_sensor_mode>:
{
 8000968:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800096a:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 800096c:	0008      	movs	r0, r1
{
 800096e:	000c      	movs	r4, r1
    rslt = null_ptr_check(dev);
 8000970:	f7ff fdf4 	bl	800055c <null_ptr_check>
    if (rslt == BME280_OK)
 8000974:	2800      	cmp	r0, #0
 8000976:	d12b      	bne.n	80009d0 <bme280_set_sensor_mode+0x68>
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8000978:	466b      	mov	r3, sp
 800097a:	1d5e      	adds	r6, r3, #5
 800097c:	0021      	movs	r1, r4
 800097e:	0030      	movs	r0, r6
 8000980:	f7ff fee2 	bl	8000748 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8000984:	2800      	cmp	r0, #0
 8000986:	d123      	bne.n	80009d0 <bme280_set_sensor_mode+0x68>
 8000988:	7833      	ldrb	r3, [r6, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d11b      	bne.n	80009c6 <bme280_set_sensor_mode+0x5e>
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800098e:	466b      	mov	r3, sp
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8000990:	4669      	mov	r1, sp
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8000992:	20f4      	movs	r0, #244	; 0xf4
 8000994:	1d9e      	adds	r6, r3, #6
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8000996:	2201      	movs	r2, #1
 8000998:	0023      	movs	r3, r4
 800099a:	3107      	adds	r1, #7
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800099c:	7030      	strb	r0, [r6, #0]
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800099e:	f7ff fdec 	bl	800057a <bme280_get_regs>
    if (rslt == BME280_OK)
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d114      	bne.n	80009d0 <bme280_set_sensor_mode+0x68>
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80009a6:	466b      	mov	r3, sp
 80009a8:	2203      	movs	r2, #3
 80009aa:	79db      	ldrb	r3, [r3, #7]
 80009ac:	4015      	ands	r5, r2
 80009ae:	4393      	bics	r3, r2
 80009b0:	431d      	orrs	r5, r3
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80009b2:	4669      	mov	r1, sp
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80009b4:	466b      	mov	r3, sp
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80009b6:	0030      	movs	r0, r6
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80009b8:	71dd      	strb	r5, [r3, #7]
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80009ba:	3a02      	subs	r2, #2
 80009bc:	0023      	movs	r3, r4
 80009be:	3107      	adds	r1, #7
 80009c0:	f7ff fdf5 	bl	80005ae <bme280_set_regs>
    return rslt;
 80009c4:	e004      	b.n	80009d0 <bme280_set_sensor_mode+0x68>
            rslt = put_device_to_sleep(dev);
 80009c6:	0020      	movs	r0, r4
 80009c8:	f7ff ff6e 	bl	80008a8 <put_device_to_sleep>
        if (rslt == BME280_OK)
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d0de      	beq.n	800098e <bme280_set_sensor_mode+0x26>
}
 80009d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080009d2 <bme280_parse_sensor_data>:
    data_msb = (uint32_t)reg_data[0] << 12;
 80009d2:	7803      	ldrb	r3, [r0, #0]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80009d4:	7842      	ldrb	r2, [r0, #1]
    data_msb = (uint32_t)reg_data[0] << 12;
 80009d6:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[1] << 4;
 80009d8:	0112      	lsls	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80009da:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80009dc:	7882      	ldrb	r2, [r0, #2]
 80009de:	0912      	lsrs	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80009e0:	4313      	orrs	r3, r2
 80009e2:	600b      	str	r3, [r1, #0]
    data_msb = (uint32_t)reg_data[3] << 12;
 80009e4:	78c3      	ldrb	r3, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80009e6:	7902      	ldrb	r2, [r0, #4]
    data_msb = (uint32_t)reg_data[3] << 12;
 80009e8:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[4] << 4;
 80009ea:	0112      	lsls	r2, r2, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80009ec:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80009ee:	7942      	ldrb	r2, [r0, #5]
 80009f0:	0912      	lsrs	r2, r2, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80009f2:	4313      	orrs	r3, r2
 80009f4:	604b      	str	r3, [r1, #4]
    uncomp_data->humidity = data_msb | data_lsb;
 80009f6:	79c3      	ldrb	r3, [r0, #7]
 80009f8:	7982      	ldrb	r2, [r0, #6]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	4313      	orrs	r3, r2
 80009fe:	ba5b      	rev16	r3, r3
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	608b      	str	r3, [r1, #8]
}
 8000a04:	4770      	bx	lr
	...

08000a08 <bme280_compensate_data>:
{
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	b08f      	sub	sp, #60	; 0x3c
 8000a0c:	001c      	movs	r4, r3
 8000a0e:	9007      	str	r0, [sp, #28]
 8000a10:	9106      	str	r1, [sp, #24]
 8000a12:	9203      	str	r2, [sp, #12]
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8000a14:	2900      	cmp	r1, #0
 8000a16:	d100      	bne.n	8000a1a <bme280_compensate_data+0x12>
 8000a18:	e19e      	b.n	8000d58 <bme280_compensate_data+0x350>
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d100      	bne.n	8000a20 <bme280_compensate_data+0x18>
 8000a1e:	e19b      	b.n	8000d58 <bme280_compensate_data+0x350>
 8000a20:	2c00      	cmp	r4, #0
 8000a22:	d100      	bne.n	8000a26 <bme280_compensate_data+0x1e>
 8000a24:	e198      	b.n	8000d58 <bme280_compensate_data+0x350>
        comp_data->temperature = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	6053      	str	r3, [r2, #4]
        comp_data->pressure = 0;
 8000a2a:	6013      	str	r3, [r2, #0]
        comp_data->humidity = 0;
 8000a2c:	6093      	str	r3, [r2, #8]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8000a2e:	0003      	movs	r3, r0
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	d02c      	beq.n	8000a8e <bme280_compensate_data+0x86>
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8000a34:	684a      	ldr	r2, [r1, #4]
    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8000a36:	8820      	ldrh	r0, [r4, #0]
 8000a38:	08d3      	lsrs	r3, r2, #3
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 8000a3a:	0912      	lsrs	r2, r2, #4
 8000a3c:	1a12      	subs	r2, r2, r0
    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8000a3e:	0041      	lsls	r1, r0, #1
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a40:	4352      	muls	r2, r2
    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8000a42:	1a5b      	subs	r3, r3, r1
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000a44:	2502      	movs	r5, #2
 8000a46:	5f61      	ldrsh	r1, [r4, r5]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a48:	1312      	asrs	r2, r2, #12
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000a4a:	4359      	muls	r1, r3
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	5ee0      	ldrsh	r0, [r4, r3]
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000a50:	17cb      	asrs	r3, r1, #31
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a52:	4350      	muls	r0, r2
 8000a54:	17c2      	asrs	r2, r0, #31
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000a56:	055b      	lsls	r3, r3, #21
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a58:	0492      	lsls	r2, r2, #18
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000a5a:	0d5b      	lsrs	r3, r3, #21
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a5c:	0c92      	lsrs	r2, r2, #18
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000a5e:	185b      	adds	r3, r3, r1
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a60:	1812      	adds	r2, r2, r0
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8000a62:	12db      	asrs	r3, r3, #11
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8000a64:	1392      	asrs	r2, r2, #14
    calib_data->t_fine = var1 + var2;
 8000a66:	189a      	adds	r2, r3, r2
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8000a68:	2305      	movs	r3, #5
 8000a6a:	4353      	muls	r3, r2
    calib_data->t_fine = var1 + var2;
 8000a6c:	6262      	str	r2, [r4, #36]	; 0x24
    if (temperature < temperature_min)
 8000a6e:	4abc      	ldr	r2, [pc, #752]	; (8000d60 <bme280_compensate_data+0x358>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	da00      	bge.n	8000a76 <bme280_compensate_data+0x6e>
 8000a74:	e16c      	b.n	8000d50 <bme280_compensate_data+0x348>
    else if (temperature > temperature_max)
 8000a76:	4abb      	ldr	r2, [pc, #748]	; (8000d64 <bme280_compensate_data+0x35c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	dd00      	ble.n	8000a7e <bme280_compensate_data+0x76>
 8000a7c:	e16a      	b.n	8000d54 <bme280_compensate_data+0x34c>
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8000a7e:	3380      	adds	r3, #128	; 0x80
 8000a80:	001a      	movs	r2, r3
 8000a82:	17db      	asrs	r3, r3, #31
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	121b      	asrs	r3, r3, #8
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8000a8a:	9a03      	ldr	r2, [sp, #12]
 8000a8c:	6053      	str	r3, [r2, #4]
        if (sensor_comp & BME280_PRESS)
 8000a8e:	2001      	movs	r0, #1
 8000a90:	9b07      	ldr	r3, [sp, #28]
 8000a92:	4203      	tst	r3, r0
 8000a94:	d100      	bne.n	8000a98 <bme280_compensate_data+0x90>
 8000a96:	e0fc      	b.n	8000c92 <bme280_compensate_data+0x28a>
    var1 = ((int64_t)calib_data->t_fine) - 128000;
 8000a98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000a9a:	48b3      	ldr	r0, [pc, #716]	; (8000d68 <bme280_compensate_data+0x360>)
 8000a9c:	000a      	movs	r2, r1
 8000a9e:	17cb      	asrs	r3, r1, #31
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4249      	negs	r1, r1
 8000aa4:	1812      	adds	r2, r2, r0
 8000aa6:	414b      	adcs	r3, r1
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	0019      	movs	r1, r3
    var1 = ((int64_t)calib_data->t_fine) - 128000;
 8000aac:	9204      	str	r2, [sp, #16]
 8000aae:	9305      	str	r3, [sp, #20]
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 8000ab0:	f7ff fbf8 	bl	80002a4 <__aeabi_lmul>
 8000ab4:	2210      	movs	r2, #16
 8000ab6:	5ea3      	ldrsh	r3, [r4, r2]
 8000ab8:	900b      	str	r0, [sp, #44]	; 0x2c
 8000aba:	9308      	str	r3, [sp, #32]
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 8000abc:	220e      	movs	r2, #14
 8000abe:	5ea3      	ldrsh	r3, [r4, r2]
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 8000ac0:	910c      	str	r1, [sp, #48]	; 0x30
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 8000ac2:	9309      	str	r3, [sp, #36]	; 0x24
    var2 = var2 + (((int64_t)calib_data->dig_p4) * 34359738368);
 8000ac4:	220c      	movs	r2, #12
 8000ac6:	5ea3      	ldrsh	r3, [r4, r2]
 8000ac8:	930d      	str	r3, [sp, #52]	; 0x34
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_p3) / 256) + ((var1 * ((int64_t)calib_data->dig_p2) * 4096));
 8000aca:	2308      	movs	r3, #8
 8000acc:	5ee0      	ldrsh	r0, [r4, r3]
 8000ace:	9a04      	ldr	r2, [sp, #16]
 8000ad0:	9b05      	ldr	r3, [sp, #20]
 8000ad2:	17c1      	asrs	r1, r0, #31
 8000ad4:	f7ff fbe6 	bl	80002a4 <__aeabi_lmul>
 8000ad8:	0d03      	lsrs	r3, r0, #20
 8000ada:	030f      	lsls	r7, r1, #12
 8000adc:	431f      	orrs	r7, r3
 8000ade:	0306      	lsls	r6, r0, #12
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	5ee0      	ldrsh	r0, [r4, r3]
 8000ae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ae8:	17c1      	asrs	r1, r0, #31
 8000aea:	f7ff fbdb 	bl	80002a4 <__aeabi_lmul>
 8000aee:	17cd      	asrs	r5, r1, #31
 8000af0:	000b      	movs	r3, r1
 8000af2:	21ff      	movs	r1, #255	; 0xff
 8000af4:	4029      	ands	r1, r5
 8000af6:	9100      	str	r1, [sp, #0]
 8000af8:	2100      	movs	r1, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	9101      	str	r1, [sp, #4]
 8000afe:	9800      	ldr	r0, [sp, #0]
 8000b00:	9901      	ldr	r1, [sp, #4]
 8000b02:	1812      	adds	r2, r2, r0
 8000b04:	414b      	adcs	r3, r1
 8000b06:	0619      	lsls	r1, r3, #24
 8000b08:	0a10      	lsrs	r0, r2, #8
 8000b0a:	4308      	orrs	r0, r1
 8000b0c:	1219      	asrs	r1, r3, #8
    var1 = (var3 + var1) * ((int64_t)calib_data->dig_p1) / 8589934592;
 8000b0e:	2380      	movs	r3, #128	; 0x80
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_p3) / 256) + ((var1 * ((int64_t)calib_data->dig_p2) * 4096));
 8000b10:	1980      	adds	r0, r0, r6
 8000b12:	4179      	adcs	r1, r7
    var1 = (var3 + var1) * ((int64_t)calib_data->dig_p1) / 8589934592;
 8000b14:	2200      	movs	r2, #0
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	1880      	adds	r0, r0, r2
 8000b1a:	4159      	adcs	r1, r3
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	88e2      	ldrh	r2, [r4, #6]
 8000b20:	f7ff fbc0 	bl	80002a4 <__aeabi_lmul>
 8000b24:	0006      	movs	r6, r0
 8000b26:	2001      	movs	r0, #1
 8000b28:	000f      	movs	r7, r1
 8000b2a:	17c9      	asrs	r1, r1, #31
 8000b2c:	000a      	movs	r2, r1
 8000b2e:	4001      	ands	r1, r0
 8000b30:	000b      	movs	r3, r1
 8000b32:	1992      	adds	r2, r2, r6
 8000b34:	417b      	adcs	r3, r7
 8000b36:	105d      	asrs	r5, r3, #1
 8000b38:	17db      	asrs	r3, r3, #31
 8000b3a:	930a      	str	r3, [sp, #40]	; 0x28
        pressure = pressure_min;
 8000b3c:	4a8b      	ldr	r2, [pc, #556]	; (8000d6c <bme280_compensate_data+0x364>)
    if (var1 != 0)
 8000b3e:	432b      	orrs	r3, r5
 8000b40:	d100      	bne.n	8000b44 <bme280_compensate_data+0x13c>
 8000b42:	e0a4      	b.n	8000c8e <bme280_compensate_data+0x286>
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 8000b44:	9b08      	ldr	r3, [sp, #32]
 8000b46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000b48:	17d9      	asrs	r1, r3, #31
 8000b4a:	9808      	ldr	r0, [sp, #32]
 8000b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000b4e:	f7ff fba9 	bl	80002a4 <__aeabi_lmul>
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 8000b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 8000b54:	0006      	movs	r6, r0
 8000b56:	000f      	movs	r7, r1
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 8000b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b5a:	17d9      	asrs	r1, r3, #31
 8000b5c:	9a04      	ldr	r2, [sp, #16]
 8000b5e:	9b05      	ldr	r3, [sp, #20]
 8000b60:	f7ff fba0 	bl	80002a4 <__aeabi_lmul>
 8000b64:	0bc3      	lsrs	r3, r0, #15
 8000b66:	469c      	mov	ip, r3
 8000b68:	044b      	lsls	r3, r1, #17
 8000b6a:	4661      	mov	r1, ip
 8000b6c:	0442      	lsls	r2, r0, #17
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	18b6      	adds	r6, r6, r2
 8000b72:	415f      	adcs	r7, r3
        var4 = 1048576 - uncomp_data->pressure;
 8000b74:	9b06      	ldr	r3, [sp, #24]
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 8000b76:	9604      	str	r6, [sp, #16]
 8000b78:	9705      	str	r7, [sp, #20]
        var4 = 1048576 - uncomp_data->pressure;
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	035b      	lsls	r3, r3, #13
 8000b80:	1a9b      	subs	r3, r3, r2
    var2 = var2 + (((int64_t)calib_data->dig_p4) * 34359738368);
 8000b82:	2200      	movs	r2, #0
 8000b84:	9e0d      	ldr	r6, [sp, #52]	; 0x34
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8000b86:	0859      	lsrs	r1, r3, #1
 8000b88:	07d8      	lsls	r0, r3, #31
    var2 = var2 + (((int64_t)calib_data->dig_p4) * 34359738368);
 8000b8a:	00f3      	lsls	r3, r6, #3
 8000b8c:	9e04      	ldr	r6, [sp, #16]
 8000b8e:	9f05      	ldr	r7, [sp, #20]
 8000b90:	1992      	adds	r2, r2, r6
 8000b92:	417b      	adcs	r3, r7
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8000b94:	1a80      	subs	r0, r0, r2
 8000b96:	4199      	sbcs	r1, r3
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4a75      	ldr	r2, [pc, #468]	; (8000d70 <bme280_compensate_data+0x368>)
 8000b9c:	f7ff fb82 	bl	80002a4 <__aeabi_lmul>
 8000ba0:	002a      	movs	r2, r5
 8000ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ba4:	f7ff fb5a 	bl	800025c <__aeabi_ldivmod>
        var1 = (((int64_t)calib_data->dig_p9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8000ba8:	2300      	movs	r3, #0
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8000baa:	9105      	str	r1, [sp, #20]
        var1 = (((int64_t)calib_data->dig_p9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8000bac:	17c9      	asrs	r1, r1, #31
 8000bae:	04c9      	lsls	r1, r1, #19
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8000bb0:	9004      	str	r0, [sp, #16]
        var1 = (((int64_t)calib_data->dig_p9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8000bb2:	0cca      	lsrs	r2, r1, #19
 8000bb4:	9804      	ldr	r0, [sp, #16]
 8000bb6:	9905      	ldr	r1, [sp, #20]
 8000bb8:	1812      	adds	r2, r2, r0
 8000bba:	414b      	adcs	r3, r1
 8000bbc:	04d9      	lsls	r1, r3, #19
 8000bbe:	135e      	asrs	r6, r3, #13
 8000bc0:	0b55      	lsrs	r5, r2, #13
 8000bc2:	2316      	movs	r3, #22
 8000bc4:	5ee0      	ldrsh	r0, [r4, r3]
 8000bc6:	430d      	orrs	r5, r1
 8000bc8:	002a      	movs	r2, r5
 8000bca:	0033      	movs	r3, r6
 8000bcc:	17c1      	asrs	r1, r0, #31
 8000bce:	f7ff fb69 	bl	80002a4 <__aeabi_lmul>
 8000bd2:	002a      	movs	r2, r5
 8000bd4:	0033      	movs	r3, r6
 8000bd6:	f7ff fb65 	bl	80002a4 <__aeabi_lmul>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	0006      	movs	r6, r0
 8000bde:	000f      	movs	r7, r1
 8000be0:	17c9      	asrs	r1, r1, #31
 8000be2:	01c9      	lsls	r1, r1, #7
 8000be4:	09ca      	lsrs	r2, r1, #7
 8000be6:	1992      	adds	r2, r2, r6
 8000be8:	417b      	adcs	r3, r7
 8000bea:	01dd      	lsls	r5, r3, #7
 8000bec:	0e56      	lsrs	r6, r2, #25
 8000bee:	432e      	orrs	r6, r5
 8000bf0:	165f      	asrs	r7, r3, #25
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_p7) * 16);
 8000bf2:	9a04      	ldr	r2, [sp, #16]
 8000bf4:	9b05      	ldr	r3, [sp, #20]
 8000bf6:	18b6      	adds	r6, r6, r2
 8000bf8:	415f      	adcs	r7, r3
        var2 = (((int64_t)calib_data->dig_p8) * var4) / 524288;
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	5ee0      	ldrsh	r0, [r4, r3]
 8000bfe:	9a04      	ldr	r2, [sp, #16]
 8000c00:	9b05      	ldr	r3, [sp, #20]
 8000c02:	17c1      	asrs	r1, r0, #31
 8000c04:	f7ff fb4e 	bl	80002a4 <__aeabi_lmul>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	000b      	movs	r3, r1
 8000c0c:	17cd      	asrs	r5, r1, #31
 8000c0e:	2100      	movs	r1, #0
 8000c10:	036d      	lsls	r5, r5, #13
 8000c12:	0b68      	lsrs	r0, r5, #13
 8000c14:	1880      	adds	r0, r0, r2
 8000c16:	4159      	adcs	r1, r3
 8000c18:	034d      	lsls	r5, r1, #13
 8000c1a:	0cc2      	lsrs	r2, r0, #19
 8000c1c:	432a      	orrs	r2, r5
 8000c1e:	14cb      	asrs	r3, r1, #19
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_p7) * 16);
 8000c20:	1992      	adds	r2, r2, r6
 8000c22:	417b      	adcs	r3, r7
 8000c24:	26ff      	movs	r6, #255	; 0xff
 8000c26:	17dd      	asrs	r5, r3, #31
 8000c28:	402e      	ands	r6, r5
 8000c2a:	0030      	movs	r0, r6
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	1812      	adds	r2, r2, r0
 8000c30:	414b      	adcs	r3, r1
 8000c32:	061d      	lsls	r5, r3, #24
 8000c34:	0a12      	lsrs	r2, r2, #8
 8000c36:	4315      	orrs	r5, r2
 8000c38:	0028      	movs	r0, r5
 8000c3a:	1219      	asrs	r1, r3, #8
 8000c3c:	2312      	movs	r3, #18
 8000c3e:	5ee5      	ldrsh	r5, [r4, r3]
 8000c40:	17ef      	asrs	r7, r5, #31
 8000c42:	0f2e      	lsrs	r6, r5, #28
 8000c44:	013b      	lsls	r3, r7, #4
 8000c46:	4333      	orrs	r3, r6
 8000c48:	012a      	lsls	r2, r5, #4
 8000c4a:	1812      	adds	r2, r2, r0
 8000c4c:	414b      	adcs	r3, r1
        pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	0fd8      	lsrs	r0, r3, #31
 8000c52:	1812      	adds	r2, r2, r0
 8000c54:	414b      	adcs	r3, r1
 8000c56:	07d9      	lsls	r1, r3, #31
 8000c58:	0850      	lsrs	r0, r2, #1
 8000c5a:	4308      	orrs	r0, r1
 8000c5c:	2264      	movs	r2, #100	; 0x64
 8000c5e:	1059      	asrs	r1, r3, #1
 8000c60:	2300      	movs	r3, #0
 8000c62:	f7ff fb1f 	bl	80002a4 <__aeabi_lmul>
 8000c66:	0006      	movs	r6, r0
 8000c68:	000f      	movs	r7, r1
 8000c6a:	17c8      	asrs	r0, r1, #31
 8000c6c:	217f      	movs	r1, #127	; 0x7f
 8000c6e:	4008      	ands	r0, r1
 8000c70:	0002      	movs	r2, r0
 8000c72:	2300      	movs	r3, #0
 8000c74:	18b6      	adds	r6, r6, r2
 8000c76:	415f      	adcs	r7, r3
 8000c78:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <bme280_compensate_data+0x36c>)
 8000c7a:	067a      	lsls	r2, r7, #25
 8000c7c:	09f0      	lsrs	r0, r6, #7
 8000c7e:	4302      	orrs	r2, r0
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d900      	bls.n	8000c86 <bme280_compensate_data+0x27e>
 8000c84:	001a      	movs	r2, r3
 8000c86:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <bme280_compensate_data+0x364>)
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d200      	bcs.n	8000c8e <bme280_compensate_data+0x286>
 8000c8c:	001a      	movs	r2, r3
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8000c8e:	9b03      	ldr	r3, [sp, #12]
 8000c90:	601a      	str	r2, [r3, #0]
        if (sensor_comp & BME280_HUM)
 8000c92:	9b07      	ldr	r3, [sp, #28]
    int8_t rslt = BME280_OK;
 8000c94:	2000      	movs	r0, #0
        if (sensor_comp & BME280_HUM)
 8000c96:	075b      	lsls	r3, r3, #29
 8000c98:	d558      	bpl.n	8000d4c <bme280_compensate_data+0x344>
    var1 = calib_data->t_fine - ((int32_t)76800);
 8000c9a:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <bme280_compensate_data+0x370>)
 8000c9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c9e:	18c0      	adds	r0, r0, r3
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8000ca0:	9b06      	ldr	r3, [sp, #24]
 8000ca2:	689a      	ldr	r2, [r3, #8]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 8000ca4:	211e      	movs	r1, #30
 8000ca6:	5e63      	ldrsh	r3, [r4, r1]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8000ca8:	0392      	lsls	r2, r2, #14
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 8000caa:	051b      	lsls	r3, r3, #20
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8000cac:	1ad2      	subs	r2, r2, r3
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 8000cae:	2120      	movs	r1, #32
 8000cb0:	5e63      	ldrsh	r3, [r4, r1]
 8000cb2:	4343      	muls	r3, r0
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	01db      	lsls	r3, r3, #7
 8000cba:	18d2      	adds	r2, r2, r3
 8000cbc:	17d3      	asrs	r3, r2, #31
 8000cbe:	045b      	lsls	r3, r3, #17
 8000cc0:	0c5b      	lsrs	r3, r3, #17
 8000cc2:	189b      	adds	r3, r3, r2
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8000cc4:	7f22      	ldrb	r2, [r4, #28]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8000cc6:	13db      	asrs	r3, r3, #15
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8000cc8:	4342      	muls	r2, r0
 8000cca:	17d1      	asrs	r1, r2, #31
 8000ccc:	0549      	lsls	r1, r1, #21
 8000cce:	0d49      	lsrs	r1, r1, #21
 8000cd0:	1889      	adds	r1, r1, r2
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8000cd2:	2280      	movs	r2, #128	; 0x80
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8000cd4:	12c9      	asrs	r1, r1, #11
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8000cd6:	0212      	lsls	r2, r2, #8
 8000cd8:	1889      	adds	r1, r1, r2
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 8000cda:	1ce2      	adds	r2, r4, #3
 8000cdc:	7fd2      	ldrb	r2, [r2, #31]
 8000cde:	b252      	sxtb	r2, r2
 8000ce0:	4350      	muls	r0, r2
 8000ce2:	17c2      	asrs	r2, r0, #31
 8000ce4:	0592      	lsls	r2, r2, #22
 8000ce6:	0d92      	lsrs	r2, r2, #22
 8000ce8:	1812      	adds	r2, r2, r0
 8000cea:	1292      	asrs	r2, r2, #10
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8000cec:	434a      	muls	r2, r1
 8000cee:	17d1      	asrs	r1, r2, #31
 8000cf0:	0589      	lsls	r1, r1, #22
 8000cf2:	0d89      	lsrs	r1, r1, #22
 8000cf4:	188a      	adds	r2, r1, r2
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	1292      	asrs	r2, r2, #10
 8000cfa:	0389      	lsls	r1, r1, #14
 8000cfc:	1852      	adds	r2, r2, r1
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 8000cfe:	201a      	movs	r0, #26
 8000d00:	5e21      	ldrsh	r1, [r4, r0]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8000d02:	200f      	movs	r0, #15
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 8000d04:	4351      	muls	r1, r2
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	0192      	lsls	r2, r2, #6
 8000d0a:	1889      	adds	r1, r1, r2
 8000d0c:	17ca      	asrs	r2, r1, #31
 8000d0e:	0492      	lsls	r2, r2, #18
 8000d10:	0c92      	lsrs	r2, r2, #18
 8000d12:	1852      	adds	r2, r2, r1
 8000d14:	1392      	asrs	r2, r2, #14
    var3 = var5 * var2;
 8000d16:	4353      	muls	r3, r2
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8000d18:	17da      	asrs	r2, r3, #31
 8000d1a:	0452      	lsls	r2, r2, #17
 8000d1c:	0c52      	lsrs	r2, r2, #17
 8000d1e:	18d2      	adds	r2, r2, r3
 8000d20:	13d2      	asrs	r2, r2, #15
 8000d22:	4352      	muls	r2, r2
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8000d24:	7e21      	ldrb	r1, [r4, #24]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8000d26:	11d2      	asrs	r2, r2, #7
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8000d28:	4351      	muls	r1, r2
 8000d2a:	17ca      	asrs	r2, r1, #31
 8000d2c:	4002      	ands	r2, r0
 8000d2e:	1852      	adds	r2, r2, r1
 8000d30:	1112      	asrs	r2, r2, #4
 8000d32:	1a9b      	subs	r3, r3, r2
    var5 = (var5 < 0 ? 0 : var5);
 8000d34:	43da      	mvns	r2, r3
 8000d36:	17d2      	asrs	r2, r2, #31
 8000d38:	4013      	ands	r3, r2
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8000d3a:	22c8      	movs	r2, #200	; 0xc8
 8000d3c:	0552      	lsls	r2, r2, #21
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	dd00      	ble.n	8000d44 <bme280_compensate_data+0x33c>
 8000d42:	0013      	movs	r3, r2
    int8_t rslt = BME280_OK;
 8000d44:	2000      	movs	r0, #0
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8000d46:	9a03      	ldr	r2, [sp, #12]
    humidity = (uint32_t)(var5 / 4096);
 8000d48:	131b      	asrs	r3, r3, #12
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8000d4a:	6093      	str	r3, [r2, #8]
}
 8000d4c:	b00f      	add	sp, #60	; 0x3c
 8000d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temperature = temperature_min;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <bme280_compensate_data+0x374>)
 8000d52:	e69a      	b.n	8000a8a <bme280_compensate_data+0x82>
        temperature = temperature_max;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <bme280_compensate_data+0x378>)
 8000d56:	e698      	b.n	8000a8a <bme280_compensate_data+0x82>
        rslt = BME280_E_NULL_PTR;
 8000d58:	2001      	movs	r0, #1
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	e7f6      	b.n	8000d4c <bme280_compensate_data+0x344>
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	fff05e81 	.word	0xfff05e81
 8000d64:	0021347f 	.word	0x0021347f
 8000d68:	fffe0c00 	.word	0xfffe0c00
 8000d6c:	002dc6c0 	.word	0x002dc6c0
 8000d70:	00000c35 	.word	0x00000c35
 8000d74:	00a7d8c0 	.word	0x00a7d8c0
 8000d78:	fffed400 	.word	0xfffed400
 8000d7c:	fffff060 	.word	0xfffff060
 8000d80:	00002134 	.word	0x00002134

08000d84 <bme280_get_sensor_data>:
{
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	0014      	movs	r4, r2
 8000d88:	000d      	movs	r5, r1
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8000d8a:	2100      	movs	r1, #0
{
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	0006      	movs	r6, r0
    struct bme280_uncomp_data uncomp_data = { 0 };
 8000d90:	220c      	movs	r2, #12
 8000d92:	a803      	add	r0, sp, #12
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8000d94:	9101      	str	r1, [sp, #4]
 8000d96:	9102      	str	r1, [sp, #8]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8000d98:	f002 fb2a 	bl	80033f0 <memset>
    rslt = null_ptr_check(dev);
 8000d9c:	0020      	movs	r0, r4
 8000d9e:	f7ff fbdd 	bl	800055c <null_ptr_check>
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d116      	bne.n	8000dd4 <bme280_get_sensor_data+0x50>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d014      	beq.n	8000dd4 <bme280_get_sensor_data+0x50>
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8000daa:	0023      	movs	r3, r4
 8000dac:	2208      	movs	r2, #8
 8000dae:	a901      	add	r1, sp, #4
 8000db0:	30f7      	adds	r0, #247	; 0xf7
 8000db2:	f7ff fbe2 	bl	800057a <bme280_get_regs>
        if (rslt == BME280_OK)
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d10a      	bne.n	8000dd0 <bme280_get_sensor_data+0x4c>
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8000dba:	a903      	add	r1, sp, #12
 8000dbc:	a801      	add	r0, sp, #4
 8000dbe:	f7ff fe08 	bl	80009d2 <bme280_parse_sensor_data>
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8000dc2:	0023      	movs	r3, r4
 8000dc4:	002a      	movs	r2, r5
 8000dc6:	0030      	movs	r0, r6
 8000dc8:	3310      	adds	r3, #16
 8000dca:	a903      	add	r1, sp, #12
 8000dcc:	f7ff fe1c 	bl	8000a08 <bme280_compensate_data>
}
 8000dd0:	b006      	add	sp, #24
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME280_E_NULL_PTR;
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	e7fa      	b.n	8000dd0 <bme280_get_sensor_data+0x4c>

08000dda <user_delay_ms>:

	return rslt;
}

void user_delay_ms(uint32_t period)
{
 8000dda:	b510      	push	{r4, lr}
	/*
	 * Return control or wait,
	 * for a period amount of milliseconds
	 */
	HAL_Delay(period);
 8000ddc:	f000 fb36 	bl	800144c <HAL_Delay>
}
 8000de0:	bd10      	pop	{r4, pc}
	...

08000de4 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len)
{
 8000de4:	b530      	push	{r4, r5, lr}
 8000de6:	0015      	movs	r5, r2
	 * | Read       | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */

	HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8000de8:	000a      	movs	r2, r1
 8000dea:	0001      	movs	r1, r0
 8000dec:	2064      	movs	r0, #100	; 0x64
 8000dee:	4c06      	ldr	r4, [pc, #24]	; (8000e08 <user_i2c_read+0x24>)
{
 8000df0:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8000df2:	9002      	str	r0, [sp, #8]
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	0020      	movs	r0, r4
 8000df8:	2301      	movs	r3, #1
 8000dfa:	9500      	str	r5, [sp, #0]
 8000dfc:	f000 fef0 	bl	8001be0 <HAL_I2C_Mem_Read>
	return rslt;
}
 8000e00:	2000      	movs	r0, #0
 8000e02:	b005      	add	sp, #20
 8000e04:	bd30      	pop	{r4, r5, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	200000d4 	.word	0x200000d4

08000e0c <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data,
		uint16_t len)
{
 8000e0c:	b530      	push	{r4, r5, lr}
 8000e0e:	0015      	movs	r5, r2
	 * | Write      | (reg_data[len - 1]) |
	 * | Stop       | -                   |
	 * |------------+---------------------|
	 */

	HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8000e10:	000a      	movs	r2, r1
 8000e12:	0001      	movs	r1, r0
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	4c06      	ldr	r4, [pc, #24]	; (8000e30 <user_i2c_write+0x24>)
{
 8000e18:	b085      	sub	sp, #20
	HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8000e1a:	9002      	str	r0, [sp, #8]
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	0020      	movs	r0, r4
 8000e20:	2301      	movs	r3, #1
 8000e22:	9500      	str	r5, [sp, #0]
 8000e24:	f000 fdfa 	bl	8001a1c <HAL_I2C_Mem_Write>
	return rslt;
}
 8000e28:	2000      	movs	r0, #0
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd30      	pop	{r4, r5, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	200000d4 	.word	0x200000d4

08000e34 <BME280_init>:
	init_done = BME280_E_DEV_NOT_FOUND;
 8000e34:	23fe      	movs	r3, #254	; 0xfe
{
 8000e36:	b570      	push	{r4, r5, r6, lr}
	dev.intf = BME280_I2C_INTF;
 8000e38:	2601      	movs	r6, #1
	init_done = BME280_E_DEV_NOT_FOUND;
 8000e3a:	4c11      	ldr	r4, [pc, #68]	; (8000e80 <BME280_init+0x4c>)
	dev.dev_id = (BME280_I2C_ADDR_PRIM << 1);
 8000e3c:	4d11      	ldr	r5, [pc, #68]	; (8000e84 <BME280_init+0x50>)
	init_done = BME280_E_DEV_NOT_FOUND;
 8000e3e:	7023      	strb	r3, [r4, #0]
	dev.dev_id = (BME280_I2C_ADDR_PRIM << 1);
 8000e40:	3b12      	subs	r3, #18
 8000e42:	706b      	strb	r3, [r5, #1]
	dev.read = user_i2c_read;
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <BME280_init+0x54>)
	rslt = bme280_init(&dev);
 8000e46:	0028      	movs	r0, r5
	dev.read = user_i2c_read;
 8000e48:	606b      	str	r3, [r5, #4]
	dev.write = user_i2c_write;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <BME280_init+0x58>)
	dev.intf = BME280_I2C_INTF;
 8000e4c:	70ae      	strb	r6, [r5, #2]
	dev.write = user_i2c_write;
 8000e4e:	60ab      	str	r3, [r5, #8]
	dev.delay_ms = user_delay_ms;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <BME280_init+0x5c>)
 8000e52:	60eb      	str	r3, [r5, #12]
	rslt = bme280_init(&dev);
 8000e54:	f7ff fcc0 	bl	80007d8 <bme280_init>
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <BME280_init+0x60>)
 8000e5a:	63ab      	str	r3, [r5, #56]	; 0x38
	dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	333c      	adds	r3, #60	; 0x3c
 8000e60:	701e      	strb	r6, [r3, #0]
	if (rslt == BME280_OK)
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d10a      	bne.n	8000e7c <BME280_init+0x48>
		rslt = bme280_set_sensor_settings(settings_sel, &dev);
 8000e66:	0029      	movs	r1, r5
 8000e68:	301f      	adds	r0, #31
 8000e6a:	f7ff fd4c 	bl	8000906 <bme280_set_sensor_settings>
		if (rslt == BME280_OK)
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d104      	bne.n	8000e7c <BME280_init+0x48>
			rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8000e72:	0029      	movs	r1, r5
 8000e74:	3003      	adds	r0, #3
 8000e76:	f7ff fd77 	bl	8000968 <bme280_set_sensor_mode>
			init_done = rslt;
 8000e7a:	7020      	strb	r0, [r4, #0]
}
 8000e7c:	bd70      	pop	{r4, r5, r6, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	200000d0 	.word	0x200000d0
 8000e84:	20000090 	.word	0x20000090
 8000e88:	08000de5 	.word	0x08000de5
 8000e8c:	08000e0d 	.word	0x08000e0d
 8000e90:	08000ddb 	.word	0x08000ddb
 8000e94:	04010205 	.word	0x04010205

08000e98 <BME280_read_data>:
{
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (init_done == BME280_OK)
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <BME280_read_data+0x3c>)
{
 8000e9c:	0005      	movs	r5, r0
	if (init_done == BME280_OK)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d112      	bne.n	8000ecc <BME280_read_data+0x34>
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8000ea6:	4c0c      	ldr	r4, [pc, #48]	; (8000ed8 <BME280_read_data+0x40>)
 8000ea8:	4f0c      	ldr	r7, [pc, #48]	; (8000edc <BME280_read_data+0x44>)
 8000eaa:	0021      	movs	r1, r4
 8000eac:	003a      	movs	r2, r7
 8000eae:	2007      	movs	r0, #7
 8000eb0:	f7ff ff68 	bl	8000d84 <bme280_get_sensor_data>
		dev.delay_ms(70);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8000eb6:	0006      	movs	r6, r0
		dev.delay_ms(70);
 8000eb8:	2046      	movs	r0, #70	; 0x46
 8000eba:	4798      	blx	r3
		data->humidity = comp_data.humidity;
 8000ebc:	68a3      	ldr	r3, [r4, #8]
 8000ebe:	60ab      	str	r3, [r5, #8]
		data->pressure = comp_data.pressure;
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	602b      	str	r3, [r5, #0]
		data->temperature = comp_data.temperature;
 8000ec4:	6863      	ldr	r3, [r4, #4]
 8000ec6:	606b      	str	r3, [r5, #4]
}
 8000ec8:	0030      	movs	r0, r6
 8000eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int8_t rslt = BME280_E_COMM_FAIL;
 8000ecc:	2604      	movs	r6, #4
 8000ece:	4276      	negs	r6, r6
 8000ed0:	e7fa      	b.n	8000ec8 <BME280_read_data+0x30>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	200000d0 	.word	0x200000d0
 8000ed8:	20000084 	.word	0x20000084
 8000edc:	20000090 	.word	0x20000090

08000ee0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2214      	movs	r2, #20
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	a803      	add	r0, sp, #12
 8000eea:	f002 fa81 	bl	80033f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_GPIO_Init+0x6c>)
 8000ef2:	03c9      	lsls	r1, r1, #15
 8000ef4:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ef6:	4c16      	ldr	r4, [pc, #88]	; (8000f50 <MX_GPIO_Init+0x70>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000efe:	0020      	movs	r0, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f00:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f04:	9200      	str	r2, [sp, #0]
 8000f06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	0289      	lsls	r1, r1, #10
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	9201      	str	r2, [sp, #4]
 8000f18:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	695a      	ldr	r2, [r3, #20]
 8000f1c:	02c9      	lsls	r1, r1, #11
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	615a      	str	r2, [r3, #20]
 8000f22:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	400b      	ands	r3, r1
 8000f28:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f2a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f2e:	f000 fbe3 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f32:	2308      	movs	r3, #8
 8000f34:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	3b07      	subs	r3, #7
 8000f38:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	0020      	movs	r0, r4
 8000f3e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f000 fb26 	bl	8001594 <HAL_GPIO_Init>

}
 8000f48:	b008      	add	sp, #32
 8000f4a:	bd10      	pop	{r4, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48000400 	.word	0x48000400

08000f54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f54:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_I2C1_Init+0x50>)
 8000f58:	4c13      	ldr	r4, [pc, #76]	; (8000fa8 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5a:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8000f5c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f60:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8000f62:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f64:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f66:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000f68:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6a:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6c:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f6e:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f70:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f72:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f74:	f000 fcfc 	bl	8001970 <HAL_I2C_Init>
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8000f7c:	f000 f8dc 	bl	8001138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f80:	2100      	movs	r1, #0
 8000f82:	0020      	movs	r0, r4
 8000f84:	f000 ff12 	bl	8001dac <HAL_I2CEx_ConfigAnalogFilter>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8000f8c:	f000 f8d4 	bl	8001138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f90:	2100      	movs	r1, #0
 8000f92:	0020      	movs	r0, r4
 8000f94:	f000 ff30 	bl	8001df8 <HAL_I2CEx_ConfigDigitalFilter>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f9c:	f000 f8cc 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa0:	bd10      	pop	{r4, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	200000d4 	.word	0x200000d4
 8000fac:	2000090e 	.word	0x2000090e

08000fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	0004      	movs	r4, r0
 8000fb4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	2214      	movs	r2, #20
 8000fb8:	2100      	movs	r1, #0
 8000fba:	a803      	add	r0, sp, #12
 8000fbc:	f002 fa18 	bl	80033f0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <HAL_I2C_MspInit+0x5c>)
 8000fc2:	6822      	ldr	r2, [r4, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d11e      	bne.n	8001006 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	4c11      	ldr	r4, [pc, #68]	; (8001010 <HAL_I2C_MspInit+0x60>)
 8000fcc:	02d2      	lsls	r2, r2, #11
 8000fce:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	4810      	ldr	r0, [pc, #64]	; (8001014 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	6163      	str	r3, [r4, #20]
 8000fd6:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4013      	ands	r3, r2
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe0:	23c0      	movs	r3, #192	; 0xc0
 8000fe2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe4:	3bae      	subs	r3, #174	; 0xae
 8000fe6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe8:	3b0f      	subs	r3, #15
 8000fea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fec:	3b02      	subs	r3, #2
 8000fee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f000 fad0 	bl	8001594 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	69e3      	ldr	r3, [r4, #28]
 8000ff8:	0392      	lsls	r2, r2, #14
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61e3      	str	r3, [r4, #28]
 8000ffe:	69e3      	ldr	r3, [r4, #28]
 8001000:	4013      	ands	r3, r2
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001006:	b008      	add	sp, #32
 8001008:	bd10      	pop	{r4, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40005400 	.word	0x40005400
 8001010:	40021000 	.word	0x40021000
 8001014:	48000400 	.word	0x48000400

08001018 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001018:	b570      	push	{r4, r5, r6, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct =
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800101a:	2610      	movs	r6, #16
{
 800101c:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800101e:	222c      	movs	r2, #44	; 0x2c
 8001020:	2100      	movs	r1, #0
 8001022:	a809      	add	r0, sp, #36	; 0x24
 8001024:	f002 f9e4 	bl	80033f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001028:	0032      	movs	r2, r6
 800102a:	2100      	movs	r1, #0
 800102c:	4668      	mov	r0, sp
 800102e:	f002 f9df 	bl	80033f0 <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8001032:	0032      	movs	r2, r6
 8001034:	2100      	movs	r1, #0
 8001036:	a804      	add	r0, sp, #16
 8001038:	f002 f9da 	bl	80033f0 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800103c:	23a0      	movs	r3, #160	; 0xa0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103e:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001042:	039b      	lsls	r3, r3, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001046:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	960c      	str	r6, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800104e:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f000 fef6 	bl	8001e40 <HAL_RCC_OscConfig>
 8001054:	2800      	cmp	r0, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800105a:	e7fe      	b.n	800105a <SystemClock_Config+0x42>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800105c:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001060:	9003      	str	r0, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001062:	0029      	movs	r1, r5
 8001064:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001066:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800106a:	f001 f90d 	bl	8002288 <HAL_RCC_ClockConfig>
 800106e:	2800      	cmp	r0, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x5e>
 8001072:	b672      	cpsid	i
	while (1)
 8001074:	e7fe      	b.n	8001074 <SystemClock_Config+0x5c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8001076:	2321      	movs	r3, #33	; 0x21
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001078:	9006      	str	r0, [sp, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800107a:	9007      	str	r0, [sp, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107c:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800107e:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f001 f996 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	2800      	cmp	r0, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x74>
 8001088:	b672      	cpsid	i
	while (1)
 800108a:	e7fe      	b.n	800108a <SystemClock_Config+0x72>
}
 800108c:	b014      	add	sp, #80	; 0x50
 800108e:	bd70      	pop	{r4, r5, r6, pc}

08001090 <main>:
{
 8001090:	b510      	push	{r4, lr}
	HAL_Init();
 8001092:	f000 f9b9 	bl	8001408 <HAL_Init>
	SystemClock_Config();
 8001096:	f7ff ffbf 	bl	8001018 <SystemClock_Config>
	MX_GPIO_Init();
 800109a:	f7ff ff21 	bl	8000ee0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800109e:	f000 f90d 	bl	80012bc <MX_USART1_UART_Init>
	MX_TIM14_Init();
 80010a2:	f000 f8d3 	bl	800124c <MX_TIM14_Init>
	MX_I2C1_Init();
 80010a6:	f7ff ff55 	bl	8000f54 <MX_I2C1_Init>
	HAL_TIM_Base_Start_IT(&htim14);
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <main+0x50>)
 80010ac:	f001 fa06 	bl	80024bc <HAL_TIM_Base_Start_IT>
	srand(145);
 80010b0:	2091      	movs	r0, #145	; 0x91
 80010b2:	f001 ff37 	bl	8002f24 <srand>
	if (BME280_init() != BME280_OK)
 80010b6:	f7ff febd 	bl	8000e34 <BME280_init>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d002      	beq.n	80010c4 <main+0x34>
		printf("Blad inicjalizacji!\n");
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <main+0x54>)
 80010c0:	f002 f87a 	bl	80031b8 <puts>
		HAL_Delay(1000);
 80010c4:	24fa      	movs	r4, #250	; 0xfa
 80010c6:	00a4      	lsls	r4, r4, #2
		if (BME280_read_data(&data_collection) != BME280_OK)
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <main+0x58>)
 80010ca:	f7ff fee5 	bl	8000e98 <BME280_read_data>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d002      	beq.n	80010d8 <main+0x48>
			printf("Blad odczytu!\n");
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <main+0x5c>)
 80010d4:	f002 f870 	bl	80031b8 <puts>
		HAL_Delay(1000);
 80010d8:	0020      	movs	r0, r4
 80010da:	f000 f9b7 	bl	800144c <HAL_Delay>
		if (BME280_read_data(&data_collection) != BME280_OK)
 80010de:	e7f3      	b.n	80010c8 <main+0x38>
 80010e0:	2000013c 	.word	0x2000013c
 80010e4:	080043c8 	.word	0x080043c8
 80010e8:	2000012c 	.word	0x2000012c
 80010ec:	080043dc 	.word	0x080043dc

080010f0 <HAL_TIM_PeriodElapsedCallback>:
	++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x34>)
{
 80010f2:	b500      	push	{lr}
	++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 80010f4:	8813      	ldrh	r3, [r2, #0]
{
 80010f6:	b0b5      	sub	sp, #212	; 0xd4
	++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 80010f8:	3301      	adds	r3, #1
 80010fa:	8013      	strh	r3, [r2, #0]
	size = sprintf(data,
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010fe:	490b      	ldr	r1, [pc, #44]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001100:	6893      	ldr	r3, [r2, #8]
 8001102:	a802      	add	r0, sp, #8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	6813      	ldr	r3, [r2, #0]
 8001108:	6852      	ldr	r2, [r2, #4]
 800110a:	f002 f85f 	bl	80031cc <siprintf>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) &data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 800110e:	a902      	add	r1, sp, #8
 8001110:	b282      	uxth	r2, r0
 8001112:	4807      	ldr	r0, [pc, #28]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001114:	f001 fb90 	bl	8002838 <HAL_UART_Transmit_IT>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Zmiana stanu pinu na diodzie LED
 8001118:	2108      	movs	r1, #8
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800111c:	f000 faf2 	bl	8001704 <HAL_GPIO_TogglePin>
}
 8001120:	b035      	add	sp, #212	; 0xd4
 8001122:	bd00      	pop	{pc}
 8001124:	20000128 	.word	0x20000128
 8001128:	2000012c 	.word	0x2000012c
 800112c:	080043ea 	.word	0x080043ea
 8001130:	20000184 	.word	0x20000184
 8001134:	48000400 	.word	0x48000400

08001138 <Error_Handler>:
 8001138:	b672      	cpsid	i
	while (1)
 800113a:	e7fe      	b.n	800113a <Error_Handler+0x2>

0800113c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113c:	2101      	movs	r1, #1
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_MspInit+0x2c>)
{
 8001140:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	430a      	orrs	r2, r1
 8001146:	619a      	str	r2, [r3, #24]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	9200      	str	r2, [sp, #0]
 8001150:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	69da      	ldr	r2, [r3, #28]
 8001154:	0549      	lsls	r1, r1, #21
 8001156:	430a      	orrs	r2, r1
 8001158:	61da      	str	r2, [r3, #28]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	400b      	ands	r3, r1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	b002      	add	sp, #8
 8001164:	4770      	bx	lr
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	40021000 	.word	0x40021000

0800116c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler>

0800116e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler>

08001170 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001170:	4770      	bx	lr

08001172 <PendSV_Handler>:
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f957 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bd10      	pop	{r4, pc}

0800117c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800117c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800117e:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM14_IRQHandler+0xc>)
 8001180:	f001 f9cc 	bl	800251c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001184:	bd10      	pop	{r4, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	2000013c 	.word	0x2000013c

0800118c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800118c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800118e:	4802      	ldr	r0, [pc, #8]	; (8001198 <USART1_IRQHandler+0xc>)
 8001190:	f001 fb9e 	bl	80028d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001194:	bd10      	pop	{r4, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000184 	.word	0x20000184

0800119c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800119c:	2001      	movs	r0, #1
 800119e:	4770      	bx	lr

080011a0 <_kill>:

int _kill(int pid, int sig)
{
 80011a0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011a2:	f002 f97b 	bl	800349c <__errno>
 80011a6:	2316      	movs	r3, #22
 80011a8:	6003      	str	r3, [r0, #0]
  return -1;
 80011aa:	2001      	movs	r0, #1
}
 80011ac:	4240      	negs	r0, r0
 80011ae:	bd10      	pop	{r4, pc}

080011b0 <_exit>:

void _exit (int status)
{
 80011b0:	b510      	push	{r4, lr}
  errno = EINVAL;
 80011b2:	f002 f973 	bl	800349c <__errno>
 80011b6:	2316      	movs	r3, #22
 80011b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80011ba:	e7fe      	b.n	80011ba <_exit+0xa>

080011bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	000e      	movs	r6, r1
 80011c0:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	2500      	movs	r5, #0
 80011c4:	42a5      	cmp	r5, r4
 80011c6:	db01      	blt.n	80011cc <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80011c8:	0020      	movs	r0, r4
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80011cc:	e000      	b.n	80011d0 <_read+0x14>
 80011ce:	bf00      	nop
 80011d0:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	3501      	adds	r5, #1
 80011d4:	e7f6      	b.n	80011c4 <_read+0x8>

080011d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d6:	b570      	push	{r4, r5, r6, lr}
 80011d8:	000e      	movs	r6, r1
 80011da:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2500      	movs	r5, #0
 80011de:	42a5      	cmp	r5, r4
 80011e0:	db01      	blt.n	80011e6 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80011e2:	0020      	movs	r0, r4
 80011e4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80011e6:	5d70      	ldrb	r0, [r6, r5]
 80011e8:	e000      	b.n	80011ec <_write+0x16>
 80011ea:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ec:	3501      	adds	r5, #1
 80011ee:	e7f6      	b.n	80011de <_write+0x8>

080011f0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80011f0:	2001      	movs	r0, #1
}
 80011f2:	4240      	negs	r0, r0
 80011f4:	4770      	bx	lr

080011f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	019b      	lsls	r3, r3, #6
  return 0;
}
 80011fa:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80011fc:	604b      	str	r3, [r1, #4]
}
 80011fe:	4770      	bx	lr

08001200 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001200:	2001      	movs	r0, #1
 8001202:	4770      	bx	lr

08001204 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001204:	2000      	movs	r0, #0
 8001206:	4770      	bx	lr

08001208 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	490b      	ldr	r1, [pc, #44]	; (8001238 <_sbrk+0x30>)
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <_sbrk+0x34>)
{
 800120c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	490b      	ldr	r1, [pc, #44]	; (8001240 <_sbrk+0x38>)
{
 8001212:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001214:	6808      	ldr	r0, [r1, #0]
 8001216:	2800      	cmp	r0, #0
 8001218:	d101      	bne.n	800121e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <_sbrk+0x3c>)
 800121c:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	6808      	ldr	r0, [r1, #0]
 8001220:	18c3      	adds	r3, r0, r3
 8001222:	4293      	cmp	r3, r2
 8001224:	d906      	bls.n	8001234 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001226:	f002 f939 	bl	800349c <__errno>
 800122a:	230c      	movs	r3, #12
 800122c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800122e:	2001      	movs	r0, #1
 8001230:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001232:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001234:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8001236:	e7fc      	b.n	8001232 <_sbrk+0x2a>
 8001238:	00000400 	.word	0x00000400
 800123c:	20001000 	.word	0x20001000
 8001240:	20000138 	.word	0x20000138
 8001244:	20000360 	.word	0x20000360

08001248 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001248:	4770      	bx	lr
	...

0800124c <MX_TIM14_Init>:
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_TIM14_Init+0x28>)
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_TIM14_Init+0x2c>)
{
 8001250:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8001252:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 9999;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_TIM14_Init+0x30>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 4799;
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <MX_TIM14_Init+0x34>)
  htim14.Init.Prescaler = 9999;
 8001258:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	2300      	movs	r3, #0
  htim14.Init.Period = 4799;
 800125c:	60c2      	str	r2, [r0, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	6083      	str	r3, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001264:	f001 fa46 	bl	80026f4 <HAL_TIM_Base_Init>
 8001268:	2800      	cmp	r0, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM14_Init+0x24>
  {
    Error_Handler();
 800126c:	f7ff ff64 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001270:	bd10      	pop	{r4, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	2000013c 	.word	0x2000013c
 8001278:	40002000 	.word	0x40002000
 800127c:	0000270f 	.word	0x0000270f
 8001280:	000012bf 	.word	0x000012bf

08001284 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001284:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM14)
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_TIM_Base_MspInit+0x30>)
 8001288:	6802      	ldr	r2, [r0, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d111      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_TIM_Base_MspInit+0x34>)
 8001292:	0049      	lsls	r1, r1, #1
 8001294:	69da      	ldr	r2, [r3, #28]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001296:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001298:	430a      	orrs	r2, r1
 800129a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	400b      	ands	r3, r1
 80012a2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80012a4:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012a6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80012a8:	f000 f8e2 	bl	8001470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80012ac:	2013      	movs	r0, #19
 80012ae:	f000 f909 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80012b2:	bd07      	pop	{r0, r1, r2, pc}
 80012b4:	40002000 	.word	0x40002000
 80012b8:	40021000 	.word	0x40021000

080012bc <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <MX_USART1_UART_Init+0x30>)
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART1_UART_Init+0x34>)
{
 80012c0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80012c2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80012c4:	23e1      	movs	r3, #225	; 0xe1
 80012c6:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80012ca:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012cc:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ce:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012dc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012de:	f001 fded 	bl	8002ebc <HAL_UART_Init>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80012e6:	f7ff ff27 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ea:	bd10      	pop	{r4, pc}
 80012ec:	20000184 	.word	0x20000184
 80012f0:	40013800 	.word	0x40013800

080012f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f4:	b510      	push	{r4, lr}
 80012f6:	0004      	movs	r4, r0
 80012f8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	2214      	movs	r2, #20
 80012fc:	2100      	movs	r1, #0
 80012fe:	a803      	add	r0, sp, #12
 8001300:	f002 f876 	bl	80033f0 <memset>
  if(uartHandle->Instance==USART1)
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_UART_MspInit+0x70>)
 8001306:	6822      	ldr	r2, [r4, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d128      	bne.n	800135e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_UART_MspInit+0x74>)
 8001310:	01c9      	lsls	r1, r1, #7
 8001312:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8001316:	430a      	orrs	r2, r1
 8001318:	619a      	str	r2, [r3, #24]
 800131a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800131e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001322:	9201      	str	r2, [sp, #4]
 8001324:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	0289      	lsls	r1, r1, #10
 800132a:	430a      	orrs	r2, r1
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	400b      	ands	r3, r1
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001336:	23c0      	movs	r3, #192	; 0xc0
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	3301      	adds	r3, #1
 8001342:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001346:	3b02      	subs	r3, #2
 8001348:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f000 f923 	bl	8001594 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	201b      	movs	r0, #27
 8001352:	0011      	movs	r1, r2
 8001354:	f000 f88c 	bl	8001470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001358:	201b      	movs	r0, #27
 800135a:	f000 f8b3 	bl	80014c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800135e:	b008      	add	sp, #32
 8001360:	bd10      	pop	{r4, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	40013800 	.word	0x40013800
 8001368:	40021000 	.word	0x40021000

0800136c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800136e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001370:	f7ff ff6a 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LoopForever+0xe>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <LoopForever+0x16>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800139a:	f002 f885 	bl	80034a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff fe77 	bl	8001090 <main>

080013a2 <LoopForever>:

LoopForever:
    b LoopForever
 80013a2:	e7fe      	b.n	80013a2 <LoopForever>
  ldr   r0, =_estack
 80013a4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013b0:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 80013b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013b8:	2000035c 	.word	0x2000035c

080013bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC1_IRQHandler>
	...

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b570      	push	{r4, r5, r6, lr}
 80013c2:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	20fa      	movs	r0, #250	; 0xfa
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_InitTick+0x3c>)
 80013c8:	0080      	lsls	r0, r0, #2
 80013ca:	7819      	ldrb	r1, [r3, #0]
 80013cc:	f7fe feba 	bl	8000144 <__udivsi3>
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <HAL_InitTick+0x40>)
 80013d2:	0001      	movs	r1, r0
 80013d4:	6820      	ldr	r0, [r4, #0]
 80013d6:	f7fe feb5 	bl	8000144 <__udivsi3>
 80013da:	f000 f87f 	bl	80014dc <HAL_SYSTICK_Config>
 80013de:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80013e0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e2:	2c00      	cmp	r4, #0
 80013e4:	d109      	bne.n	80013fa <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	2d03      	cmp	r5, #3
 80013e8:	d807      	bhi.n	80013fa <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ea:	3802      	subs	r0, #2
 80013ec:	0022      	movs	r2, r4
 80013ee:	0029      	movs	r1, r5
 80013f0:	f000 f83e 	bl	8001470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f4:	0020      	movs	r0, r4
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_InitTick+0x44>)
 80013f8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
 80013fc:	20000004 	.word	0x20000004
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008

08001408 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	2310      	movs	r3, #16
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_Init+0x1c>)
{
 800140c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001410:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001412:	430b      	orrs	r3, r1
 8001414:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	f7ff ffd3 	bl	80013c0 <HAL_InitTick>
  HAL_MspInit();
 800141a:	f7ff fe8f 	bl	800113c <HAL_MspInit>
}
 800141e:	2000      	movs	r0, #0
 8001420:	bd10      	pop	{r4, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_IncTick+0x10>)
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_IncTick+0x14>)
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	185b      	adds	r3, r3, r1
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	4770      	bx	lr
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	2000020c 	.word	0x2000020c
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001440:	4b01      	ldr	r3, [pc, #4]	; (8001448 <HAL_GetTick+0x8>)
 8001442:	6818      	ldr	r0, [r3, #0]
}
 8001444:	4770      	bx	lr
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	2000020c 	.word	0x2000020c

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff fff6 	bl	8001440 <HAL_GetTick>
 8001454:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	1c63      	adds	r3, r4, #1
 8001458:	d002      	beq.n	8001460 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_Delay+0x20>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	1b40      	subs	r0, r0, r5
 8001466:	42a0      	cmp	r0, r4
 8001468:	d3fa      	bcc.n	8001460 <HAL_Delay+0x14>
  {
  }
}
 800146a:	bd70      	pop	{r4, r5, r6, pc}
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001470:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001472:	25ff      	movs	r5, #255	; 0xff
 8001474:	2403      	movs	r4, #3
 8001476:	002a      	movs	r2, r5
 8001478:	4004      	ands	r4, r0
 800147a:	00e4      	lsls	r4, r4, #3
 800147c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800147e:	0189      	lsls	r1, r1, #6
 8001480:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001482:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001484:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001486:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001488:	2800      	cmp	r0, #0
 800148a:	db0a      	blt.n	80014a2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148c:	24c0      	movs	r4, #192	; 0xc0
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_NVIC_SetPriority+0x4c>)
 8001490:	0880      	lsrs	r0, r0, #2
 8001492:	0080      	lsls	r0, r0, #2
 8001494:	18c0      	adds	r0, r0, r3
 8001496:	00a4      	lsls	r4, r4, #2
 8001498:	5903      	ldr	r3, [r0, r4]
 800149a:	4013      	ands	r3, r2
 800149c:	430b      	orrs	r3, r1
 800149e:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80014a0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a2:	200f      	movs	r0, #15
 80014a4:	4003      	ands	r3, r0
 80014a6:	3b08      	subs	r3, #8
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_NVIC_SetPriority+0x50>)
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	181b      	adds	r3, r3, r0
 80014b0:	69d8      	ldr	r0, [r3, #28]
 80014b2:	4002      	ands	r2, r0
 80014b4:	430a      	orrs	r2, r1
 80014b6:	61da      	str	r2, [r3, #28]
 80014b8:	e7f2      	b.n	80014a0 <HAL_NVIC_SetPriority+0x30>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014c4:	2800      	cmp	r0, #0
 80014c6:	db05      	blt.n	80014d4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c8:	231f      	movs	r3, #31
 80014ca:	4018      	ands	r0, r3
 80014cc:	3b1e      	subs	r3, #30
 80014ce:	4083      	lsls	r3, r0
 80014d0:	4a01      	ldr	r2, [pc, #4]	; (80014d8 <HAL_NVIC_EnableIRQ+0x14>)
 80014d2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014d4:	4770      	bx	lr
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	e000e100 	.word	0xe000e100

080014dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	1e43      	subs	r3, r0, #1
 80014e0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d20d      	bcs.n	8001504 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f0:	6a03      	ldr	r3, [r0, #32]
 80014f2:	0609      	lsls	r1, r1, #24
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001504:	4770      	bx	lr
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	e000e010 	.word	0xe000e010
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001510:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001512:	1c84      	adds	r4, r0, #2
 8001514:	7fe2      	ldrb	r2, [r4, #31]
{
 8001516:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001518:	2a02      	cmp	r2, #2
 800151a:	d006      	beq.n	800152a <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151c:	2204      	movs	r2, #4
 800151e:	6382      	str	r2, [r0, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001522:	2200      	movs	r2, #0
 8001524:	3301      	adds	r3, #1
 8001526:	77da      	strb	r2, [r3, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8001528:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800152a:	6802      	ldr	r2, [r0, #0]
 800152c:	200e      	movs	r0, #14
 800152e:	6811      	ldr	r1, [r2, #0]
 8001530:	4381      	bics	r1, r0
 8001532:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001534:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001536:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001538:	6810      	ldr	r0, [r2, #0]
 800153a:	4388      	bics	r0, r1
 800153c:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800153e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001542:	4085      	lsls	r5, r0
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001546:	6055      	str	r5, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001548:	77e1      	strb	r1, [r4, #31]
  return HAL_OK;
 800154a:	e7ea      	b.n	8001522 <HAL_DMA_Abort+0x12>

0800154c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800154c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800154e:	1c84      	adds	r4, r0, #2
 8001550:	7fe3      	ldrb	r3, [r4, #31]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d004      	beq.n	8001560 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	2304      	movs	r3, #4
 8001558:	6383      	str	r3, [r0, #56]	; 0x38

    status = HAL_ERROR;
 800155a:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800155c:	0018      	movs	r0, r3
 800155e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001560:	210e      	movs	r1, #14
 8001562:	6803      	ldr	r3, [r0, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	438a      	bics	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800156a:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800156c:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	4391      	bics	r1, r2
 8001572:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001574:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001576:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001578:	408d      	lsls	r5, r1
 800157a:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800157c:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800157e:	2400      	movs	r4, #0
 8001580:	1883      	adds	r3, r0, r2
 8001582:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8001584:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8001588:	42a2      	cmp	r2, r4
 800158a:	d0e7      	beq.n	800155c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800158c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	0023      	movs	r3, r4
 8001590:	e7e4      	b.n	800155c <HAL_DMA_Abort_IT+0x10>
	...

08001594 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001594:	2300      	movs	r3, #0
{
 8001596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001598:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	680a      	ldr	r2, [r1, #0]
 800159c:	0014      	movs	r4, r2
 800159e:	40dc      	lsrs	r4, r3
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80015a2:	b007      	add	sp, #28
 80015a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a6:	2501      	movs	r5, #1
 80015a8:	0014      	movs	r4, r2
 80015aa:	409d      	lsls	r5, r3
 80015ac:	402c      	ands	r4, r5
 80015ae:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80015b0:	422a      	tst	r2, r5
 80015b2:	d100      	bne.n	80015b6 <HAL_GPIO_Init+0x22>
 80015b4:	e094      	b.n	80016e0 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b6:	684a      	ldr	r2, [r1, #4]
 80015b8:	005f      	lsls	r7, r3, #1
 80015ba:	4694      	mov	ip, r2
 80015bc:	2203      	movs	r2, #3
 80015be:	4664      	mov	r4, ip
 80015c0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c2:	2403      	movs	r4, #3
 80015c4:	40bc      	lsls	r4, r7
 80015c6:	43e4      	mvns	r4, r4
 80015c8:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ca:	1e54      	subs	r4, r2, #1
 80015cc:	2c01      	cmp	r4, #1
 80015ce:	d82e      	bhi.n	800162e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80015d0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015d2:	9c01      	ldr	r4, [sp, #4]
 80015d4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d6:	68cc      	ldr	r4, [r1, #12]
 80015d8:	40bc      	lsls	r4, r7
 80015da:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80015dc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80015de:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e2:	43ac      	bics	r4, r5
 80015e4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	4664      	mov	r4, ip
 80015e8:	0924      	lsrs	r4, r4, #4
 80015ea:	4034      	ands	r4, r6
 80015ec:	409c      	lsls	r4, r3
 80015ee:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80015f0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80015f2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015f4:	9c01      	ldr	r4, [sp, #4]
 80015f6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015f8:	688c      	ldr	r4, [r1, #8]
 80015fa:	40bc      	lsls	r4, r7
 80015fc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80015fe:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	2a02      	cmp	r2, #2
 8001602:	d116      	bne.n	8001632 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001604:	2507      	movs	r5, #7
 8001606:	260f      	movs	r6, #15
 8001608:	401d      	ands	r5, r3
 800160a:	00ad      	lsls	r5, r5, #2
 800160c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800160e:	08dc      	lsrs	r4, r3, #3
 8001610:	00a4      	lsls	r4, r4, #2
 8001612:	1904      	adds	r4, r0, r4
 8001614:	9402      	str	r4, [sp, #8]
 8001616:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001618:	9603      	str	r6, [sp, #12]
 800161a:	0026      	movs	r6, r4
 800161c:	9c03      	ldr	r4, [sp, #12]
 800161e:	43a6      	bics	r6, r4
 8001620:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001622:	690e      	ldr	r6, [r1, #16]
 8001624:	40ae      	lsls	r6, r5
 8001626:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001628:	9c02      	ldr	r4, [sp, #8]
 800162a:	6226      	str	r6, [r4, #32]
 800162c:	e001      	b.n	8001632 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	2a03      	cmp	r2, #3
 8001630:	d1df      	bne.n	80015f2 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001632:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001634:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001636:	9d01      	ldr	r5, [sp, #4]
 8001638:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163c:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 800163e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001640:	4662      	mov	r2, ip
 8001642:	02a4      	lsls	r4, r4, #10
 8001644:	4222      	tst	r2, r4
 8001646:	d04b      	beq.n	80016e0 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	2501      	movs	r5, #1
 800164a:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800164c:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001650:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	432c      	orrs	r4, r5
 8001654:	6194      	str	r4, [r2, #24]
 8001656:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001658:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	402a      	ands	r2, r5
 800165c:	9205      	str	r2, [sp, #20]
 800165e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001660:	4a21      	ldr	r2, [pc, #132]	; (80016e8 <HAL_GPIO_Init+0x154>)
 8001662:	00a4      	lsls	r4, r4, #2
 8001664:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001666:	220f      	movs	r2, #15
 8001668:	3502      	adds	r5, #2
 800166a:	401d      	ands	r5, r3
 800166c:	00ad      	lsls	r5, r5, #2
 800166e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001670:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001672:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001674:	2200      	movs	r2, #0
 8001676:	42b8      	cmp	r0, r7
 8001678:	d008      	beq.n	800168c <HAL_GPIO_Init+0xf8>
 800167a:	4f1c      	ldr	r7, [pc, #112]	; (80016ec <HAL_GPIO_Init+0x158>)
 800167c:	3201      	adds	r2, #1
 800167e:	42b8      	cmp	r0, r7
 8001680:	d004      	beq.n	800168c <HAL_GPIO_Init+0xf8>
 8001682:	4f1b      	ldr	r7, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x15c>)
 8001684:	3201      	adds	r2, #1
 8001686:	42b8      	cmp	r0, r7
 8001688:	d000      	beq.n	800168c <HAL_GPIO_Init+0xf8>
 800168a:	3203      	adds	r2, #3
 800168c:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800168e:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001690:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001692:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8001696:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8001698:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800169a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800169c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800169e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a0:	02ff      	lsls	r7, r7, #11
 80016a2:	d401      	bmi.n	80016a8 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 80016a4:	0035      	movs	r5, r6
 80016a6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a8:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80016aa:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80016ac:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80016ae:	9d00      	ldr	r5, [sp, #0]
 80016b0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b2:	02bf      	lsls	r7, r7, #10
 80016b4:	d401      	bmi.n	80016ba <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 80016b6:	0035      	movs	r5, r6
 80016b8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ba:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80016bc:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80016be:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80016c0:	9d00      	ldr	r5, [sp, #0]
 80016c2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c4:	03bf      	lsls	r7, r7, #14
 80016c6:	d401      	bmi.n	80016cc <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 80016c8:	0035      	movs	r5, r6
 80016ca:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016cc:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80016ce:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80016d0:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80016d2:	9e00      	ldr	r6, [sp, #0]
 80016d4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d6:	03ff      	lsls	r7, r7, #15
 80016d8:	d401      	bmi.n	80016de <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 80016da:	4025      	ands	r5, r4
 80016dc:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80016de:	6016      	str	r6, [r2, #0]
    position++;
 80016e0:	3301      	adds	r3, #1
 80016e2:	e75a      	b.n	800159a <HAL_GPIO_Init+0x6>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	48000800 	.word	0x48000800
 80016f4:	40010400 	.word	0x40010400

080016f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	d001      	beq.n	8001700 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016fe:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001700:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001702:	e7fc      	b.n	80016fe <HAL_GPIO_WritePin+0x6>

08001704 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001704:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001706:	0013      	movs	r3, r2
 8001708:	400b      	ands	r3, r1
 800170a:	041b      	lsls	r3, r3, #16
 800170c:	4391      	bics	r1, r2
 800170e:	430b      	orrs	r3, r1
 8001710:	6183      	str	r3, [r0, #24]
}
 8001712:	4770      	bx	lr

08001714 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001714:	6803      	ldr	r3, [r0, #0]
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	0792      	lsls	r2, r2, #30
 800171a:	d501      	bpl.n	8001720 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001720:	2201      	movs	r2, #1
 8001722:	6999      	ldr	r1, [r3, #24]
 8001724:	4211      	tst	r1, r2
 8001726:	d102      	bne.n	800172e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001728:	6999      	ldr	r1, [r3, #24]
 800172a:	430a      	orrs	r2, r1
 800172c:	619a      	str	r2, [r3, #24]
  }
}
 800172e:	4770      	bx	lr

08001730 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001730:	b530      	push	{r4, r5, lr}
 8001732:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001734:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001736:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001738:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800173a:	0589      	lsls	r1, r1, #22
 800173c:	431a      	orrs	r2, r3
 800173e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <I2C_TransferConfig+0x28>)
 8001742:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001744:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001746:	0d64      	lsrs	r4, r4, #21
 8001748:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800174a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800174c:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800174e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001750:	432a      	orrs	r2, r5
 8001752:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001754:	bd30      	pop	{r4, r5, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	03ff63ff 	.word	0x03ff63ff

0800175c <I2C_IsErrorOccurred>:
{
 800175c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800175e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001760:	6802      	ldr	r2, [r0, #0]
{
 8001762:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001764:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001766:	2310      	movs	r3, #16
 8001768:	000f      	movs	r7, r1
{
 800176a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800176c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001770:	4219      	tst	r1, r3
 8001772:	d00e      	beq.n	8001792 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001774:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001776:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8001778:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800177a:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	699a      	ldr	r2, [r3, #24]
 8001780:	423a      	tst	r2, r7
 8001782:	d163      	bne.n	800184c <I2C_IsErrorOccurred+0xf0>
 8001784:	9a01      	ldr	r2, [sp, #4]
 8001786:	2a00      	cmp	r2, #0
 8001788:	d031      	beq.n	80017ee <I2C_IsErrorOccurred+0x92>
    error_code |= HAL_I2C_ERROR_AF;
 800178a:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800178c:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800178e:	9b00      	ldr	r3, [sp, #0]
 8001790:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001792:	2280      	movs	r2, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8001794:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001796:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8001798:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800179a:	4213      	tst	r3, r2
 800179c:	d002      	beq.n	80017a4 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 800179e:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017a0:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80017a2:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	00d2      	lsls	r2, r2, #3
 80017a8:	4213      	tst	r3, r2
 80017aa:	d003      	beq.n	80017b4 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80017ac:	2108      	movs	r1, #8
    status = HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 80017b0:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017b2:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4213      	tst	r3, r2
 80017ba:	d04c      	beq.n	8001856 <I2C_IsErrorOccurred+0xfa>
    error_code |= HAL_I2C_ERROR_ARLO;
 80017bc:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017be:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80017c0:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 80017c2:	0020      	movs	r0, r4
 80017c4:	f7ff ffa6 	bl	8001714 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80017c8:	686b      	ldr	r3, [r5, #4]
 80017ca:	4a24      	ldr	r2, [pc, #144]	; (800185c <I2C_IsErrorOccurred+0x100>)
    __HAL_UNLOCK(hi2c);
 80017cc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80017ce:	4013      	ands	r3, r2
 80017d0:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 80017d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80017d6:	433b      	orrs	r3, r7
 80017d8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017da:	0023      	movs	r3, r4
 80017dc:	3341      	adds	r3, #65	; 0x41
 80017de:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	0022      	movs	r2, r4
 80017e2:	2300      	movs	r3, #0
 80017e4:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80017e6:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e8:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80017ea:	7023      	strb	r3, [r4, #0]
 80017ec:	e035      	b.n	800185a <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 80017ee:	1c72      	adds	r2, r6, #1
 80017f0:	d0c5      	beq.n	800177e <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017f2:	f7ff fe25 	bl	8001440 <HAL_GetTick>
 80017f6:	1b40      	subs	r0, r0, r5
 80017f8:	42b0      	cmp	r0, r6
 80017fa:	d801      	bhi.n	8001800 <I2C_IsErrorOccurred+0xa4>
 80017fc:	2e00      	cmp	r6, #0
 80017fe:	d1bd      	bne.n	800177c <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8001800:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001802:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8001804:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001806:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001808:	7811      	ldrb	r1, [r2, #0]
 800180a:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800180c:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 800180e:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	0209      	lsls	r1, r1, #8
 8001814:	420a      	tst	r2, r1
 8001816:	d00c      	beq.n	8001832 <I2C_IsErrorOccurred+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800181c:	4210      	tst	r0, r2
 800181e:	d108      	bne.n	8001832 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001820:	4661      	mov	r1, ip
 8001822:	2920      	cmp	r1, #32
 8001824:	d005      	beq.n	8001832 <I2C_IsErrorOccurred+0xd6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	430a      	orrs	r2, r1
 800182a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800182c:	f7ff fe08 	bl	8001440 <HAL_GetTick>
 8001830:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	423b      	tst	r3, r7
 8001838:	d1a0      	bne.n	800177c <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800183a:	f7ff fe01 	bl	8001440 <HAL_GetTick>
 800183e:	1b40      	subs	r0, r0, r5
 8001840:	2819      	cmp	r0, #25
 8001842:	d9f6      	bls.n	8001832 <I2C_IsErrorOccurred+0xd6>
              status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001846:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	e797      	b.n	800177c <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800184c:	9a01      	ldr	r2, [sp, #4]
 800184e:	2a00      	cmp	r2, #0
 8001850:	d19b      	bne.n	800178a <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001852:	61df      	str	r7, [r3, #28]
 8001854:	e799      	b.n	800178a <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8001856:	2800      	cmp	r0, #0
 8001858:	d1b3      	bne.n	80017c2 <I2C_IsErrorOccurred+0x66>
}
 800185a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800185c:	fe00e800 	.word	0xfe00e800

08001860 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	0004      	movs	r4, r0
 8001864:	000d      	movs	r5, r1
 8001866:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001868:	2702      	movs	r7, #2
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	423b      	tst	r3, r7
 8001870:	d001      	beq.n	8001876 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001872:	2000      	movs	r0, #0
}
 8001874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001876:	0032      	movs	r2, r6
 8001878:	0029      	movs	r1, r5
 800187a:	0020      	movs	r0, r4
 800187c:	f7ff ff6e 	bl	800175c <I2C_IsErrorOccurred>
 8001880:	2800      	cmp	r0, #0
 8001882:	d118      	bne.n	80018b6 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001884:	1c6b      	adds	r3, r5, #1
 8001886:	d0f0      	beq.n	800186a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001888:	f7ff fdda 	bl	8001440 <HAL_GetTick>
 800188c:	1b80      	subs	r0, r0, r6
 800188e:	42a8      	cmp	r0, r5
 8001890:	d801      	bhi.n	8001896 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001892:	2d00      	cmp	r5, #0
 8001894:	d1e9      	bne.n	800186a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	001a      	movs	r2, r3
 800189c:	403a      	ands	r2, r7
 800189e:	423b      	tst	r3, r7
 80018a0:	d1e3      	bne.n	800186a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a2:	2120      	movs	r1, #32
 80018a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018aa:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80018ac:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80018ae:	3341      	adds	r3, #65	; 0x41
 80018b0:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80018b4:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
 80018b8:	e7dc      	b.n	8001874 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080018ba <I2C_WaitOnFlagUntilTimeout>:
{
 80018ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018bc:	0004      	movs	r4, r0
 80018be:	000d      	movs	r5, r1
 80018c0:	0017      	movs	r7, r2
 80018c2:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	6993      	ldr	r3, [r2, #24]
 80018c8:	402b      	ands	r3, r5
 80018ca:	1b5b      	subs	r3, r3, r5
 80018cc:	4259      	negs	r1, r3
 80018ce:	414b      	adcs	r3, r1
 80018d0:	42bb      	cmp	r3, r7
 80018d2:	d001      	beq.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80018d4:	2000      	movs	r0, #0
 80018d6:	e01f      	b.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80018d8:	1c73      	adds	r3, r6, #1
 80018da:	d0f4      	beq.n	80018c6 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018dc:	f7ff fdb0 	bl	8001440 <HAL_GetTick>
 80018e0:	9b06      	ldr	r3, [sp, #24]
 80018e2:	1ac0      	subs	r0, r0, r3
 80018e4:	42b0      	cmp	r0, r6
 80018e6:	d801      	bhi.n	80018ec <I2C_WaitOnFlagUntilTimeout+0x32>
 80018e8:	2e00      	cmp	r6, #0
 80018ea:	d1eb      	bne.n	80018c4 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	402b      	ands	r3, r5
 80018f2:	1b5b      	subs	r3, r3, r5
 80018f4:	425a      	negs	r2, r3
 80018f6:	4153      	adcs	r3, r2
 80018f8:	42bb      	cmp	r3, r7
 80018fa:	d1e3      	bne.n	80018c4 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018fc:	2220      	movs	r2, #32
 80018fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001902:	4313      	orrs	r3, r2
 8001904:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001906:	0023      	movs	r3, r4
 8001908:	3341      	adds	r3, #65	; 0x41
 800190a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	0022      	movs	r2, r4
 800190e:	2300      	movs	r3, #0
 8001910:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8001912:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001916:	7023      	strb	r3, [r4, #0]
}
 8001918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800191a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800191a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191c:	0004      	movs	r4, r0
 800191e:	000e      	movs	r6, r1
 8001920:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001922:	2520      	movs	r5, #32
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	422b      	tst	r3, r5
 800192a:	d001      	beq.n	8001930 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800192c:	2000      	movs	r0, #0
}
 800192e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001930:	003a      	movs	r2, r7
 8001932:	0031      	movs	r1, r6
 8001934:	0020      	movs	r0, r4
 8001936:	f7ff ff11 	bl	800175c <I2C_IsErrorOccurred>
 800193a:	2800      	cmp	r0, #0
 800193c:	d115      	bne.n	800196a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193e:	f7ff fd7f 	bl	8001440 <HAL_GetTick>
 8001942:	1bc0      	subs	r0, r0, r7
 8001944:	42b0      	cmp	r0, r6
 8001946:	d801      	bhi.n	800194c <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001948:	2e00      	cmp	r6, #0
 800194a:	d1eb      	bne.n	8001924 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	001a      	movs	r2, r3
 8001952:	402a      	ands	r2, r5
 8001954:	422b      	tst	r3, r5
 8001956:	d1e5      	bne.n	8001924 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800195a:	432b      	orrs	r3, r5
 800195c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800195e:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8001960:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001962:	3341      	adds	r3, #65	; 0x41
 8001964:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001966:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8001968:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800196a:	2001      	movs	r0, #1
 800196c:	e7df      	b.n	800192e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08001970 <HAL_I2C_Init>:
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001976:	2c00      	cmp	r4, #0
 8001978:	d03f      	beq.n	80019fa <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197a:	0025      	movs	r5, r4
 800197c:	3541      	adds	r5, #65	; 0x41
 800197e:	782b      	ldrb	r3, [r5, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d105      	bne.n	8001992 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001986:	0023      	movs	r3, r4
 8001988:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800198a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800198c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800198e:	f7ff fb0f 	bl	8000fb0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001992:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001994:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001996:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001998:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800199a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800199c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800199e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80019a0:	438a      	bics	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019a4:	491a      	ldr	r1, [pc, #104]	; (8001a10 <HAL_I2C_Init+0xa0>)
 80019a6:	6862      	ldr	r2, [r4, #4]
 80019a8:	400a      	ands	r2, r1
 80019aa:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4919      	ldr	r1, [pc, #100]	; (8001a14 <HAL_I2C_Init+0xa4>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b4:	2801      	cmp	r0, #1
 80019b6:	d121      	bne.n	80019fc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	0212      	lsls	r2, r2, #8
 80019bc:	4332      	orrs	r2, r6
 80019be:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019c0:	6858      	ldr	r0, [r3, #4]
 80019c2:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_I2C_Init+0xa8>)
 80019c4:	4302      	orrs	r2, r0
 80019c6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019c8:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ca:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019cc:	400a      	ands	r2, r1
 80019ce:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019d0:	6961      	ldr	r1, [r4, #20]
 80019d2:	6922      	ldr	r2, [r4, #16]
 80019d4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019d6:	69a1      	ldr	r1, [r4, #24]
 80019d8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019da:	430a      	orrs	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019de:	6a21      	ldr	r1, [r4, #32]
 80019e0:	69e2      	ldr	r2, [r4, #28]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80019e6:	2201      	movs	r2, #1
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f6:	3442      	adds	r4, #66	; 0x42
 80019f8:	7020      	strb	r0, [r4, #0]
}
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019fc:	2284      	movs	r2, #132	; 0x84
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	4332      	orrs	r2, r6
 8001a02:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a04:	2802      	cmp	r0, #2
 8001a06:	d1db      	bne.n	80019c0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	e7d7      	b.n	80019c0 <HAL_I2C_Init+0x50>
 8001a10:	f0ffffff 	.word	0xf0ffffff
 8001a14:	ffff7fff 	.word	0xffff7fff
 8001a18:	02008000 	.word	0x02008000

08001a1c <HAL_I2C_Mem_Write>:
{
 8001a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	9304      	str	r3, [sp, #16]
 8001a22:	ab0e      	add	r3, sp, #56	; 0x38
 8001a24:	9203      	str	r2, [sp, #12]
 8001a26:	cb04      	ldmia	r3!, {r2}
 8001a28:	0004      	movs	r4, r0
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	9205      	str	r2, [sp, #20]
 8001a2e:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a30:	0003      	movs	r3, r0
 8001a32:	3341      	adds	r3, #65	; 0x41
 8001a34:	9307      	str	r3, [sp, #28]
 8001a36:	781b      	ldrb	r3, [r3, #0]
{
 8001a38:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001a3a:	2002      	movs	r0, #2
{
 8001a3c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d108      	bne.n	8001a54 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_I2C_Mem_Write+0x30>
 8001a46:	9b06      	ldr	r3, [sp, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
}
 8001a54:	b009      	add	sp, #36	; 0x24
 8001a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001a58:	0023      	movs	r3, r4
 8001a5a:	3340      	adds	r3, #64	; 0x40
 8001a5c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001a5e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8001a60:	2a01      	cmp	r2, #1
 8001a62:	d0f7      	beq.n	8001a54 <HAL_I2C_Mem_Write+0x38>
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001a68:	f7ff fcea 	bl	8001440 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001a6e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a70:	9000      	str	r0, [sp, #0]
 8001a72:	2319      	movs	r3, #25
 8001a74:	2201      	movs	r2, #1
 8001a76:	0020      	movs	r0, r4
 8001a78:	0209      	lsls	r1, r1, #8
 8001a7a:	f7ff ff1e 	bl	80018ba <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d1e7      	bne.n	8001a52 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a82:	2321      	movs	r3, #33	; 0x21
 8001a84:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a86:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a88:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a8a:	0023      	movs	r3, r4
 8001a8c:	3342      	adds	r3, #66	; 0x42
 8001a8e:	9307      	str	r3, [sp, #28]
 8001a90:	2340      	movs	r3, #64	; 0x40
 8001a92:	9a07      	ldr	r2, [sp, #28]
 8001a94:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8001a96:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001a9a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a9c:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8001a9e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001aa0:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001aa2:	466b      	mov	r3, sp
 8001aa4:	7c1a      	ldrb	r2, [r3, #16]
 8001aa6:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <HAL_I2C_Mem_Write+0x1bc>)
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	045b      	lsls	r3, r3, #17
 8001ab0:	f7ff fe3e 	bl	8001730 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab4:	002a      	movs	r2, r5
 8001ab6:	0031      	movs	r1, r6
 8001ab8:	0020      	movs	r0, r4
 8001aba:	f7ff fed1 	bl	8001860 <I2C_WaitOnTXISFlagUntilTimeout>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d129      	bne.n	8001b16 <HAL_I2C_Mem_Write+0xfa>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ac2:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	d116      	bne.n	8001af8 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aca:	466a      	mov	r2, sp
 8001acc:	7b12      	ldrb	r2, [r2, #12]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad0:	0033      	movs	r3, r6
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	9500      	str	r5, [sp, #0]
 8001ada:	f7ff feee 	bl	80018ba <I2C_WaitOnFlagUntilTimeout>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	d119      	bne.n	8001b16 <HAL_I2C_Mem_Write+0xfa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ae4:	2bff      	cmp	r3, #255	; 0xff
 8001ae6:	d81a      	bhi.n	8001b1e <HAL_I2C_Mem_Write+0x102>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ae8:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001aea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001aec:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8001aee:	b292      	uxth	r2, r2
 8001af0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	9000      	str	r0, [sp, #0]
 8001af6:	e017      	b.n	8001b28 <HAL_I2C_Mem_Write+0x10c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001af8:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afa:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001afc:	0a12      	lsrs	r2, r2, #8
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b00:	0020      	movs	r0, r4
 8001b02:	002a      	movs	r2, r5
 8001b04:	f7ff feac 	bl	8001860 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d104      	bne.n	8001b16 <HAL_I2C_Mem_Write+0xfa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b0c:	466b      	mov	r3, sp
 8001b0e:	6822      	ldr	r2, [r4, #0]
 8001b10:	7b1b      	ldrb	r3, [r3, #12]
 8001b12:	6293      	str	r3, [r2, #40]	; 0x28
 8001b14:	e7dc      	b.n	8001ad0 <HAL_I2C_Mem_Write+0xb4>
      __HAL_UNLOCK(hi2c);
 8001b16:	2300      	movs	r3, #0
 8001b18:	3440      	adds	r4, #64	; 0x40
 8001b1a:	7023      	strb	r3, [r4, #0]
 8001b1c:	e799      	b.n	8001a52 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b1e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b20:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b24:	045b      	lsls	r3, r3, #17
 8001b26:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b28:	0039      	movs	r1, r7
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	f7ff fe00 	bl	8001730 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b30:	002a      	movs	r2, r5
 8001b32:	0031      	movs	r1, r6
 8001b34:	0020      	movs	r0, r4
 8001b36:	f7ff fe93 	bl	8001860 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d000      	beq.n	8001b40 <HAL_I2C_Mem_Write+0x124>
 8001b3e:	e788      	b.n	8001a52 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001b46:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b48:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001b4a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001b4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001b4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001b56:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001b5a:	b292      	uxth	r2, r2
 8001b5c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d017      	beq.n	8001b92 <HAL_I2C_Mem_Write+0x176>
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_I2C_Mem_Write+0x176>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b66:	0033      	movs	r3, r6
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0020      	movs	r0, r4
 8001b6c:	9500      	str	r5, [sp, #0]
 8001b6e:	f7ff fea4 	bl	80018ba <I2C_WaitOnFlagUntilTimeout>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d000      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x15c>
 8001b76:	e76c      	b.n	8001a52 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d923      	bls.n	8001bc6 <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b7e:	23ff      	movs	r3, #255	; 0xff
 8001b80:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	22ff      	movs	r2, #255	; 0xff
 8001b86:	9000      	str	r0, [sp, #0]
 8001b88:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b8a:	0039      	movs	r1, r7
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	f7ff fdcf 	bl	8001730 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001b92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1cb      	bne.n	8001b30 <HAL_I2C_Mem_Write+0x114>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b98:	002a      	movs	r2, r5
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	0020      	movs	r0, r4
 8001b9e:	f7ff febc 	bl	800191a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d000      	beq.n	8001ba8 <HAL_I2C_Mem_Write+0x18c>
 8001ba6:	e754      	b.n	8001a52 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba8:	2120      	movs	r1, #32
 8001baa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001bac:	4d0b      	ldr	r5, [pc, #44]	; (8001bdc <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bae:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	402a      	ands	r2, r5
 8001bb4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bb6:	0023      	movs	r3, r4
 8001bb8:	3341      	adds	r3, #65	; 0x41
 8001bba:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bbc:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8001bbe:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bc0:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001bc2:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001bc4:	e746      	b.n	8001a54 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc6:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001bc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bca:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	9000      	str	r0, [sp, #0]
 8001bd4:	e7d9      	b.n	8001b8a <HAL_I2C_Mem_Write+0x16e>
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	80002000 	.word	0x80002000
 8001bdc:	fe00e800 	.word	0xfe00e800

08001be0 <HAL_I2C_Mem_Read>:
{
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	9304      	str	r3, [sp, #16]
 8001be6:	ab0e      	add	r3, sp, #56	; 0x38
 8001be8:	9203      	str	r2, [sp, #12]
 8001bea:	cb04      	ldmia	r3!, {r2}
 8001bec:	0004      	movs	r4, r0
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	9205      	str	r2, [sp, #20]
 8001bf2:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	3341      	adds	r3, #65	; 0x41
 8001bf8:	9307      	str	r3, [sp, #28]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
{
 8001bfc:	000f      	movs	r7, r1
    return HAL_BUSY;
 8001bfe:	2002      	movs	r0, #2
{
 8001c00:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d108      	bne.n	8001c18 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_I2C_Mem_Read+0x30>
 8001c0a:	9b06      	ldr	r3, [sp, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
}
 8001c18:	b009      	add	sp, #36	; 0x24
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001c1c:	0023      	movs	r3, r4
 8001c1e:	3340      	adds	r3, #64	; 0x40
 8001c20:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001c22:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8001c24:	2a01      	cmp	r2, #1
 8001c26:	d0f7      	beq.n	8001c18 <HAL_I2C_Mem_Read+0x38>
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001c2c:	f7ff fc08 	bl	8001440 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	2319      	movs	r3, #25
 8001c34:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001c36:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	0020      	movs	r0, r4
 8001c3c:	0209      	lsls	r1, r1, #8
 8001c3e:	f7ff fe3c 	bl	80018ba <I2C_WaitOnFlagUntilTimeout>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d1e7      	bne.n	8001c16 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c46:	2222      	movs	r2, #34	; 0x22
 8001c48:	9907      	ldr	r1, [sp, #28]
 8001c4a:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c4c:	0022      	movs	r2, r4
 8001c4e:	3242      	adds	r2, #66	; 0x42
 8001c50:	9207      	str	r2, [sp, #28]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	9907      	ldr	r1, [sp, #28]
 8001c56:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8001c58:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001c5c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c5e:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c60:	494f      	ldr	r1, [pc, #316]	; (8001da0 <HAL_I2C_Mem_Read+0x1c0>)
    hi2c->XferCount = Size;
 8001c62:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c64:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8001c66:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c68:	7c12      	ldrb	r2, [r2, #16]
 8001c6a:	0020      	movs	r0, r4
 8001c6c:	9100      	str	r1, [sp, #0]
 8001c6e:	0039      	movs	r1, r7
 8001c70:	f7ff fd5e 	bl	8001730 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c74:	002a      	movs	r2, r5
 8001c76:	0031      	movs	r1, r6
 8001c78:	0020      	movs	r0, r4
 8001c7a:	f7ff fdf1 	bl	8001860 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d12a      	bne.n	8001cd8 <HAL_I2C_Mem_Read+0xf8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c82:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c84:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c86:	2a01      	cmp	r2, #1
 8001c88:	d117      	bne.n	8001cba <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c8a:	466a      	mov	r2, sp
 8001c8c:	7b12      	ldrb	r2, [r2, #12]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c90:	0033      	movs	r3, r6
 8001c92:	2200      	movs	r2, #0
 8001c94:	2140      	movs	r1, #64	; 0x40
 8001c96:	0020      	movs	r0, r4
 8001c98:	9500      	str	r5, [sp, #0]
 8001c9a:	f7ff fe0e 	bl	80018ba <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d11a      	bne.n	8001cd8 <HAL_I2C_Mem_Read+0xf8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ca4:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_I2C_Mem_Read+0x1c4>)
 8001ca6:	2aff      	cmp	r2, #255	; 0xff
 8001ca8:	d81a      	bhi.n	8001ce0 <HAL_I2C_Mem_Read+0x100>
      hi2c->XferSize = hi2c->XferCount;
 8001caa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001cac:	b292      	uxth	r2, r2
 8001cae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	049b      	lsls	r3, r3, #18
 8001cb8:	e017      	b.n	8001cea <HAL_I2C_Mem_Read+0x10a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cba:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cbc:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cbe:	0a12      	lsrs	r2, r2, #8
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc2:	0020      	movs	r0, r4
 8001cc4:	002a      	movs	r2, r5
 8001cc6:	f7ff fdcb 	bl	8001860 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d104      	bne.n	8001cd8 <HAL_I2C_Mem_Read+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cce:	466b      	mov	r3, sp
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	7b1b      	ldrb	r3, [r3, #12]
 8001cd4:	6293      	str	r3, [r2, #40]	; 0x28
 8001cd6:	e7db      	b.n	8001c90 <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	3440      	adds	r4, #64	; 0x40
 8001cdc:	7023      	strb	r3, [r4, #0]
 8001cde:	e79a      	b.n	8001c16 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ce0:	22ff      	movs	r2, #255	; 0xff
 8001ce2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cea:	0039      	movs	r1, r7
 8001cec:	0020      	movs	r0, r4
 8001cee:	f7ff fd1f 	bl	8001730 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001cf2:	0033      	movs	r3, r6
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	0020      	movs	r0, r4
 8001cfa:	9500      	str	r5, [sp, #0]
 8001cfc:	f7ff fddd 	bl	80018ba <I2C_WaitOnFlagUntilTimeout>
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d000      	beq.n	8001d06 <HAL_I2C_Mem_Read+0x126>
 8001d04:	e787      	b.n	8001c16 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d0c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001d10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001d12:	3301      	adds	r3, #1
 8001d14:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d18:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d22:	b292      	uxth	r2, r2
 8001d24:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d017      	beq.n	8001d5a <HAL_I2C_Mem_Read+0x17a>
 8001d2a:	2a00      	cmp	r2, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_I2C_Mem_Read+0x17a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d2e:	0033      	movs	r3, r6
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	0020      	movs	r0, r4
 8001d34:	9500      	str	r5, [sp, #0]
 8001d36:	f7ff fdc0 	bl	80018ba <I2C_WaitOnFlagUntilTimeout>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d000      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x160>
 8001d3e:	e76a      	b.n	8001c16 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d42:	2bff      	cmp	r3, #255	; 0xff
 8001d44:	d923      	bls.n	8001d8e <HAL_I2C_Mem_Read+0x1ae>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d46:	23ff      	movs	r3, #255	; 0xff
 8001d48:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	22ff      	movs	r2, #255	; 0xff
 8001d4e:	9000      	str	r0, [sp, #0]
 8001d50:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d52:	0039      	movs	r1, r7
 8001d54:	0020      	movs	r0, r4
 8001d56:	f7ff fceb 	bl	8001730 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001d5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1c8      	bne.n	8001cf2 <HAL_I2C_Mem_Read+0x112>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d60:	002a      	movs	r2, r5
 8001d62:	0031      	movs	r1, r6
 8001d64:	0020      	movs	r0, r4
 8001d66:	f7ff fdd8 	bl	800191a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d000      	beq.n	8001d70 <HAL_I2C_Mem_Read+0x190>
 8001d6e:	e752      	b.n	8001c16 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d70:	2120      	movs	r1, #32
 8001d72:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001d74:	4d0c      	ldr	r5, [pc, #48]	; (8001da8 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d76:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	402a      	ands	r2, r5
 8001d7c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	0023      	movs	r3, r4
 8001d80:	3341      	adds	r3, #65	; 0x41
 8001d82:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d84:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8001d86:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d88:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001d8a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001d8c:	e744      	b.n	8001c18 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d8e:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8001d90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d92:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8001d94:	b292      	uxth	r2, r2
 8001d96:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	9000      	str	r0, [sp, #0]
 8001d9c:	e7d9      	b.n	8001d52 <HAL_I2C_Mem_Read+0x172>
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	80002000 	.word	0x80002000
 8001da4:	80002400 	.word	0x80002400
 8001da8:	fe00e800 	.word	0xfe00e800

08001dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dae:	0004      	movs	r4, r0
 8001db0:	3441      	adds	r4, #65	; 0x41
 8001db2:	7822      	ldrb	r2, [r4, #0]
{
 8001db4:	0003      	movs	r3, r0
 8001db6:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001db8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dba:	b2d6      	uxtb	r6, r2
 8001dbc:	2a20      	cmp	r2, #32
 8001dbe:	d118      	bne.n	8001df2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8001dc0:	001d      	movs	r5, r3
 8001dc2:	3540      	adds	r5, #64	; 0x40
 8001dc4:	782a      	ldrb	r2, [r5, #0]
 8001dc6:	2a01      	cmp	r2, #1
 8001dc8:	d013      	beq.n	8001df2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3a23      	subs	r2, #35	; 0x23
 8001dd2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dd4:	4807      	ldr	r0, [pc, #28]	; (8001df4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001dd6:	4391      	bics	r1, r2
 8001dd8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8001dde:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	4339      	orrs	r1, r7
 8001de6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001df0:	7028      	strb	r0, [r5, #0]
  }
}
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df4:	ffffefff 	.word	0xffffefff

08001df8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df8:	0002      	movs	r2, r0
{
 8001dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfc:	3241      	adds	r2, #65	; 0x41
 8001dfe:	7814      	ldrb	r4, [r2, #0]
{
 8001e00:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e02:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e04:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	2c20      	cmp	r4, #32
 8001e08:	d117      	bne.n	8001e3a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001e0a:	001c      	movs	r4, r3
 8001e0c:	3440      	adds	r4, #64	; 0x40
 8001e0e:	7826      	ldrb	r6, [r4, #0]
 8001e10:	2e01      	cmp	r6, #1
 8001e12:	d012      	beq.n	8001e3a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e14:	3022      	adds	r0, #34	; 0x22
 8001e16:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3823      	subs	r0, #35	; 0x23
 8001e1c:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001e1e:	4f07      	ldr	r7, [pc, #28]	; (8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8001e20:	4386      	bics	r6, r0
 8001e22:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001e24:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8001e26:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001e28:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001e2a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001e2c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	4308      	orrs	r0, r1
 8001e32:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001e34:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001e36:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001e38:	7020      	strb	r0, [r4, #0]
  }
}
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3c:	fffff0ff 	.word	0xfffff0ff

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	0004      	movs	r4, r0
 8001e44:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d045      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	6803      	ldr	r3, [r0, #0]
 8001e4c:	07db      	lsls	r3, r3, #31
 8001e4e:	d42f      	bmi.n	8001eb0 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	079b      	lsls	r3, r3, #30
 8001e54:	d500      	bpl.n	8001e58 <HAL_RCC_OscConfig+0x18>
 8001e56:	e081      	b.n	8001f5c <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	071b      	lsls	r3, r3, #28
 8001e5c:	d500      	bpl.n	8001e60 <HAL_RCC_OscConfig+0x20>
 8001e5e:	e0bc      	b.n	8001fda <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	075b      	lsls	r3, r3, #29
 8001e64:	d500      	bpl.n	8001e68 <HAL_RCC_OscConfig+0x28>
 8001e66:	e0df      	b.n	8002028 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	06db      	lsls	r3, r3, #27
 8001e6c:	d51a      	bpl.n	8001ea4 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e6e:	6962      	ldr	r2, [r4, #20]
 8001e70:	2304      	movs	r3, #4
 8001e72:	4db4      	ldr	r5, [pc, #720]	; (8002144 <HAL_RCC_OscConfig+0x304>)
 8001e74:	2a01      	cmp	r2, #1
 8001e76:	d000      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3a>
 8001e78:	e148      	b.n	800210c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e7a:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e7c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001e82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e84:	431a      	orrs	r2, r3
 8001e86:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001e88:	f7ff fada 	bl	8001440 <HAL_GetTick>
 8001e8c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e90:	423b      	tst	r3, r7
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x56>
 8001e94:	e133      	b.n	80020fe <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e96:	21f8      	movs	r1, #248	; 0xf8
 8001e98:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e9a:	69a3      	ldr	r3, [r4, #24]
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea4:	6a23      	ldr	r3, [r4, #32]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d000      	beq.n	8001eac <HAL_RCC_OscConfig+0x6c>
 8001eaa:	e157      	b.n	800215c <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8001eac:	2000      	movs	r0, #0
 8001eae:	e02a      	b.n	8001f06 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb0:	220c      	movs	r2, #12
 8001eb2:	4da4      	ldr	r5, [pc, #656]	; (8002144 <HAL_RCC_OscConfig+0x304>)
 8001eb4:	686b      	ldr	r3, [r5, #4]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d006      	beq.n	8001eca <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ebc:	686b      	ldr	r3, [r5, #4]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d10a      	bne.n	8001eda <HAL_RCC_OscConfig+0x9a>
 8001ec4:	686b      	ldr	r3, [r5, #4]
 8001ec6:	03db      	lsls	r3, r3, #15
 8001ec8:	d507      	bpl.n	8001eda <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	682b      	ldr	r3, [r5, #0]
 8001ecc:	039b      	lsls	r3, r3, #14
 8001ece:	d5bf      	bpl.n	8001e50 <HAL_RCC_OscConfig+0x10>
 8001ed0:	6863      	ldr	r3, [r4, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1bc      	bne.n	8001e50 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d114      	bne.n	8001f0a <HAL_RCC_OscConfig+0xca>
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	682a      	ldr	r2, [r5, #0]
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001eea:	f7ff faa9 	bl	8001440 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001ef0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	02bf      	lsls	r7, r7, #10
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	423b      	tst	r3, r7
 8001ef8:	d1aa      	bne.n	8001e50 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efa:	f7ff faa1 	bl	8001440 <HAL_GetTick>
 8001efe:	1b80      	subs	r0, r0, r6
 8001f00:	2864      	cmp	r0, #100	; 0x64
 8001f02:	d9f7      	bls.n	8001ef4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8001f04:	2003      	movs	r0, #3
}
 8001f06:	b005      	add	sp, #20
 8001f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <HAL_RCC_OscConfig+0xfc>
 8001f0e:	682b      	ldr	r3, [r5, #0]
 8001f10:	4a8d      	ldr	r2, [pc, #564]	; (8002148 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	4013      	ands	r3, r2
 8001f16:	602b      	str	r3, [r5, #0]
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	4a8c      	ldr	r2, [pc, #560]	; (800214c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1c:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	4013      	ands	r3, r2
 8001f20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa8d 	bl	8001440 <HAL_GetTick>
 8001f26:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f28:	682b      	ldr	r3, [r5, #0]
 8001f2a:	423b      	tst	r3, r7
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0xf0>
 8001f2e:	e78f      	b.n	8001e50 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fa86 	bl	8001440 <HAL_GetTick>
 8001f34:	1b80      	subs	r0, r0, r6
 8001f36:	2864      	cmp	r0, #100	; 0x64
 8001f38:	d9f6      	bls.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f3a:	e7e3      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x10c>
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	682a      	ldr	r2, [r5, #0]
 8001f44:	02db      	lsls	r3, r3, #11
 8001f46:	4313      	orrs	r3, r2
 8001f48:	602b      	str	r3, [r5, #0]
 8001f4a:	e7c9      	b.n	8001ee0 <HAL_RCC_OscConfig+0xa0>
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x308>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	602b      	str	r3, [r5, #0]
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	4a7d      	ldr	r2, [pc, #500]	; (800214c <HAL_RCC_OscConfig+0x30c>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	e7c5      	b.n	8001ee8 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	4d79      	ldr	r5, [pc, #484]	; (8002144 <HAL_RCC_OscConfig+0x304>)
 8001f60:	686b      	ldr	r3, [r5, #4]
 8001f62:	4213      	tst	r3, r2
 8001f64:	d006      	beq.n	8001f74 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f66:	686b      	ldr	r3, [r5, #4]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d110      	bne.n	8001f90 <HAL_RCC_OscConfig+0x150>
 8001f6e:	686b      	ldr	r3, [r5, #4]
 8001f70:	03db      	lsls	r3, r3, #15
 8001f72:	d40d      	bmi.n	8001f90 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	079b      	lsls	r3, r3, #30
 8001f78:	d502      	bpl.n	8001f80 <HAL_RCC_OscConfig+0x140>
 8001f7a:	68e3      	ldr	r3, [r4, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d1aa      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	21f8      	movs	r1, #248	; 0xf8
 8001f82:	682a      	ldr	r2, [r5, #0]
 8001f84:	6923      	ldr	r3, [r4, #16]
 8001f86:	438a      	bics	r2, r1
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	e763      	b.n	8001e58 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f90:	68e2      	ldr	r2, [r4, #12]
 8001f92:	2301      	movs	r3, #1
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d00f      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8001f98:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001fa0:	f7ff fa4e 	bl	8001440 <HAL_GetTick>
 8001fa4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	423b      	tst	r3, r7
 8001faa:	d1e9      	bne.n	8001f80 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff fa48 	bl	8001440 <HAL_GetTick>
 8001fb0:	1b80      	subs	r0, r0, r6
 8001fb2:	2802      	cmp	r0, #2
 8001fb4:	d9f7      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x166>
 8001fb6:	e7a5      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8001fb8:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001fbc:	439a      	bics	r2, r3
 8001fbe:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa3e 	bl	8001440 <HAL_GetTick>
 8001fc4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	423b      	tst	r3, r7
 8001fca:	d100      	bne.n	8001fce <HAL_RCC_OscConfig+0x18e>
 8001fcc:	e744      	b.n	8001e58 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff fa37 	bl	8001440 <HAL_GetTick>
 8001fd2:	1b80      	subs	r0, r0, r6
 8001fd4:	2802      	cmp	r0, #2
 8001fd6:	d9f6      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x186>
 8001fd8:	e794      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fda:	69e2      	ldr	r2, [r4, #28]
 8001fdc:	2301      	movs	r3, #1
 8001fde:	4d59      	ldr	r5, [pc, #356]	; (8002144 <HAL_RCC_OscConfig+0x304>)
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8001fe4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001fec:	f7ff fa28 	bl	8001440 <HAL_GetTick>
 8001ff0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001ff4:	423b      	tst	r3, r7
 8001ff6:	d000      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1ba>
 8001ff8:	e732      	b.n	8001e60 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fa21 	bl	8001440 <HAL_GetTick>
 8001ffe:	1b80      	subs	r0, r0, r6
 8002000:	2802      	cmp	r0, #2
 8002002:	d9f6      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1b2>
 8002004:	e77e      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8002006:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800200a:	439a      	bics	r2, r3
 800200c:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800200e:	f7ff fa17 	bl	8001440 <HAL_GetTick>
 8002012:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002016:	423b      	tst	r3, r7
 8002018:	d100      	bne.n	800201c <HAL_RCC_OscConfig+0x1dc>
 800201a:	e721      	b.n	8001e60 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fa10 	bl	8001440 <HAL_GetTick>
 8002020:	1b80      	subs	r0, r0, r6
 8002022:	2802      	cmp	r0, #2
 8002024:	d9f6      	bls.n	8002014 <HAL_RCC_OscConfig+0x1d4>
 8002026:	e76d      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002028:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202c:	4d45      	ldr	r5, [pc, #276]	; (8002144 <HAL_RCC_OscConfig+0x304>)
 800202e:	0552      	lsls	r2, r2, #21
 8002030:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002032:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002034:	4213      	tst	r3, r2
 8002036:	d108      	bne.n	800204a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002038:	69eb      	ldr	r3, [r5, #28]
 800203a:	4313      	orrs	r3, r2
 800203c:	61eb      	str	r3, [r5, #28]
 800203e:	69eb      	ldr	r3, [r5, #28]
 8002040:	4013      	ands	r3, r2
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	2780      	movs	r7, #128	; 0x80
 800204c:	4e40      	ldr	r6, [pc, #256]	; (8002150 <HAL_RCC_OscConfig+0x310>)
 800204e:	007f      	lsls	r7, r7, #1
 8002050:	6833      	ldr	r3, [r6, #0]
 8002052:	423b      	tst	r3, r7
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	68a3      	ldr	r3, [r4, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d122      	bne.n	80020a2 <HAL_RCC_OscConfig+0x262>
 800205c:	6a2a      	ldr	r2, [r5, #32]
 800205e:	4313      	orrs	r3, r2
 8002060:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002062:	f7ff f9ed 	bl	8001440 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002066:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002068:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	6a2b      	ldr	r3, [r5, #32]
 800206c:	423b      	tst	r3, r7
 800206e:	d03f      	beq.n	80020f0 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d000      	beq.n	8002078 <HAL_RCC_OscConfig+0x238>
 8002076:	e6f7      	b.n	8001e68 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	69eb      	ldr	r3, [r5, #28]
 800207a:	4a36      	ldr	r2, [pc, #216]	; (8002154 <HAL_RCC_OscConfig+0x314>)
 800207c:	4013      	ands	r3, r2
 800207e:	61eb      	str	r3, [r5, #28]
 8002080:	e6f2      	b.n	8001e68 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	6833      	ldr	r3, [r6, #0]
 8002084:	433b      	orrs	r3, r7
 8002086:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002088:	f7ff f9da 	bl	8001440 <HAL_GetTick>
 800208c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	6833      	ldr	r3, [r6, #0]
 8002090:	423b      	tst	r3, r7
 8002092:	d1e0      	bne.n	8002056 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7ff f9d4 	bl	8001440 <HAL_GetTick>
 8002098:	9b01      	ldr	r3, [sp, #4]
 800209a:	1ac0      	subs	r0, r0, r3
 800209c:	2864      	cmp	r0, #100	; 0x64
 800209e:	d9f6      	bls.n	800208e <HAL_RCC_OscConfig+0x24e>
 80020a0:	e730      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d114      	bne.n	80020d2 <HAL_RCC_OscConfig+0x292>
 80020a8:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020aa:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	4393      	bics	r3, r2
 80020ae:	622b      	str	r3, [r5, #32]
 80020b0:	6a2b      	ldr	r3, [r5, #32]
 80020b2:	3203      	adds	r2, #3
 80020b4:	4393      	bics	r3, r2
 80020b6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80020b8:	f7ff f9c2 	bl	8001440 <HAL_GetTick>
 80020bc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	6a2b      	ldr	r3, [r5, #32]
 80020c0:	423b      	tst	r3, r7
 80020c2:	d0d5      	beq.n	8002070 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7ff f9bc 	bl	8001440 <HAL_GetTick>
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_RCC_OscConfig+0x318>)
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	4298      	cmp	r0, r3
 80020ce:	d9f6      	bls.n	80020be <HAL_RCC_OscConfig+0x27e>
 80020d0:	e718      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2a2>
 80020d6:	6a29      	ldr	r1, [r5, #32]
 80020d8:	3b01      	subs	r3, #1
 80020da:	430b      	orrs	r3, r1
 80020dc:	622b      	str	r3, [r5, #32]
 80020de:	6a2b      	ldr	r3, [r5, #32]
 80020e0:	e7bd      	b.n	800205e <HAL_RCC_OscConfig+0x21e>
 80020e2:	6a2b      	ldr	r3, [r5, #32]
 80020e4:	4393      	bics	r3, r2
 80020e6:	2204      	movs	r2, #4
 80020e8:	622b      	str	r3, [r5, #32]
 80020ea:	6a2b      	ldr	r3, [r5, #32]
 80020ec:	4393      	bics	r3, r2
 80020ee:	e7b7      	b.n	8002060 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7ff f9a6 	bl	8001440 <HAL_GetTick>
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_RCC_OscConfig+0x318>)
 80020f6:	1b80      	subs	r0, r0, r6
 80020f8:	4298      	cmp	r0, r3
 80020fa:	d9b6      	bls.n	800206a <HAL_RCC_OscConfig+0x22a>
 80020fc:	e702      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020fe:	f7ff f99f 	bl	8001440 <HAL_GetTick>
 8002102:	1b80      	subs	r0, r0, r6
 8002104:	2802      	cmp	r0, #2
 8002106:	d800      	bhi.n	800210a <HAL_RCC_OscConfig+0x2ca>
 8002108:	e6c1      	b.n	8001e8e <HAL_RCC_OscConfig+0x4e>
 800210a:	e6fb      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800210c:	3205      	adds	r2, #5
 800210e:	d103      	bne.n	8002118 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002110:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002112:	439a      	bics	r2, r3
 8002114:	636a      	str	r2, [r5, #52]	; 0x34
 8002116:	e6be      	b.n	8001e96 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002118:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800211a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800211c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800211e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002120:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002122:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002124:	4393      	bics	r3, r2
 8002126:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002128:	f7ff f98a 	bl	8001440 <HAL_GetTick>
 800212c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800212e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002130:	423b      	tst	r3, r7
 8002132:	d100      	bne.n	8002136 <HAL_RCC_OscConfig+0x2f6>
 8002134:	e6b6      	b.n	8001ea4 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002136:	f7ff f983 	bl	8001440 <HAL_GetTick>
 800213a:	1b80      	subs	r0, r0, r6
 800213c:	2802      	cmp	r0, #2
 800213e:	d9f6      	bls.n	800212e <HAL_RCC_OscConfig+0x2ee>
 8002140:	e6e0      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40021000 	.word	0x40021000
 8002148:	fffeffff 	.word	0xfffeffff
 800214c:	fffbffff 	.word	0xfffbffff
 8002150:	40007000 	.word	0x40007000
 8002154:	efffffff 	.word	0xefffffff
 8002158:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215c:	210c      	movs	r1, #12
 800215e:	4d34      	ldr	r5, [pc, #208]	; (8002230 <HAL_RCC_OscConfig+0x3f0>)
 8002160:	686a      	ldr	r2, [r5, #4]
 8002162:	400a      	ands	r2, r1
 8002164:	2a08      	cmp	r2, #8
 8002166:	d047      	beq.n	80021f8 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002168:	4a32      	ldr	r2, [pc, #200]	; (8002234 <HAL_RCC_OscConfig+0x3f4>)
 800216a:	2b02      	cmp	r3, #2
 800216c:	d132      	bne.n	80021d4 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 800216e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002172:	4013      	ands	r3, r2
 8002174:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002176:	f7ff f963 	bl	8001440 <HAL_GetTick>
 800217a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217c:	04bf      	lsls	r7, r7, #18
 800217e:	682b      	ldr	r3, [r5, #0]
 8002180:	423b      	tst	r3, r7
 8002182:	d121      	bne.n	80021c8 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002184:	220f      	movs	r2, #15
 8002186:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002188:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218a:	4393      	bics	r3, r2
 800218c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800218e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002190:	4313      	orrs	r3, r2
 8002192:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002194:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002196:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002198:	686a      	ldr	r2, [r5, #4]
 800219a:	430b      	orrs	r3, r1
 800219c:	4926      	ldr	r1, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x3f8>)
 800219e:	400a      	ands	r2, r1
 80021a0:	4313      	orrs	r3, r2
 80021a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	045b      	lsls	r3, r3, #17
 80021aa:	4313      	orrs	r3, r2
 80021ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021ae:	f7ff f947 	bl	8001440 <HAL_GetTick>
 80021b2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	4233      	tst	r3, r6
 80021b8:	d000      	beq.n	80021bc <HAL_RCC_OscConfig+0x37c>
 80021ba:	e677      	b.n	8001eac <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff f940 	bl	8001440 <HAL_GetTick>
 80021c0:	1b00      	subs	r0, r0, r4
 80021c2:	2802      	cmp	r0, #2
 80021c4:	d9f6      	bls.n	80021b4 <HAL_RCC_OscConfig+0x374>
 80021c6:	e69d      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f93a 	bl	8001440 <HAL_GetTick>
 80021cc:	1b80      	subs	r0, r0, r6
 80021ce:	2802      	cmp	r0, #2
 80021d0:	d9d5      	bls.n	800217e <HAL_RCC_OscConfig+0x33e>
 80021d2:	e697      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 80021d4:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4013      	ands	r3, r2
 80021da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021dc:	f7ff f930 	bl	8001440 <HAL_GetTick>
 80021e0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	04b6      	lsls	r6, r6, #18
 80021e4:	682b      	ldr	r3, [r5, #0]
 80021e6:	4233      	tst	r3, r6
 80021e8:	d100      	bne.n	80021ec <HAL_RCC_OscConfig+0x3ac>
 80021ea:	e65f      	b.n	8001eac <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f928 	bl	8001440 <HAL_GetTick>
 80021f0:	1b00      	subs	r0, r0, r4
 80021f2:	2802      	cmp	r0, #2
 80021f4:	d9f6      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3a4>
 80021f6:	e685      	b.n	8001f04 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 80021f8:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d100      	bne.n	8002200 <HAL_RCC_OscConfig+0x3c0>
 80021fe:	e682      	b.n	8001f06 <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002200:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002202:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002204:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002206:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8002208:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	4019      	ands	r1, r3
 800220c:	4281      	cmp	r1, r0
 800220e:	d000      	beq.n	8002212 <HAL_RCC_OscConfig+0x3d2>
 8002210:	e661      	b.n	8001ed6 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002212:	210f      	movs	r1, #15
 8002214:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002218:	428a      	cmp	r2, r1
 800221a:	d000      	beq.n	800221e <HAL_RCC_OscConfig+0x3de>
 800221c:	e65b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800221e:	22f0      	movs	r2, #240	; 0xf0
 8002220:	0392      	lsls	r2, r2, #14
 8002222:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002226:	4293      	cmp	r3, r2
 8002228:	d100      	bne.n	800222c <HAL_RCC_OscConfig+0x3ec>
 800222a:	e63f      	b.n	8001eac <HAL_RCC_OscConfig+0x6c>
 800222c:	e653      	b.n	8001ed6 <HAL_RCC_OscConfig+0x96>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	40021000 	.word	0x40021000
 8002234:	feffffff 	.word	0xfeffffff
 8002238:	ffc2ffff 	.word	0xffc2ffff

0800223c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800223c:	220c      	movs	r2, #12
{
 800223e:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002240:	4d0c      	ldr	r5, [pc, #48]	; (8002274 <HAL_RCC_GetSysClockFreq+0x38>)
 8002242:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	401a      	ands	r2, r3
 8002246:	2a08      	cmp	r2, #8
 8002248:	d111      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800224a:	200f      	movs	r0, #15
 800224c:	490a      	ldr	r1, [pc, #40]	; (8002278 <HAL_RCC_GetSysClockFreq+0x3c>)
 800224e:	0c9a      	lsrs	r2, r3, #18
 8002250:	4002      	ands	r2, r0
 8002252:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002254:	6aea      	ldr	r2, [r5, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002256:	03db      	lsls	r3, r3, #15
 8002258:	d507      	bpl.n	800226a <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <HAL_RCC_GetSysClockFreq+0x40>)
 800225c:	4002      	ands	r2, r0
 800225e:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002260:	4807      	ldr	r0, [pc, #28]	; (8002280 <HAL_RCC_GetSysClockFreq+0x44>)
 8002262:	f7fd ff6f 	bl	8000144 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002266:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002268:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <HAL_RCC_GetSysClockFreq+0x48>)
 800226c:	e7fb      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 800226e:	4804      	ldr	r0, [pc, #16]	; (8002280 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8002270:	e7fa      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x2c>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	40021000 	.word	0x40021000
 8002278:	0800443e 	.word	0x0800443e
 800227c:	0800444e 	.word	0x0800444e
 8002280:	007a1200 	.word	0x007a1200
 8002284:	003d0900 	.word	0x003d0900

08002288 <HAL_RCC_ClockConfig>:
{
 8002288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800228a:	0004      	movs	r4, r0
 800228c:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800228e:	2800      	cmp	r0, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002292:	2001      	movs	r0, #1
}
 8002294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002296:	2201      	movs	r2, #1
 8002298:	4d37      	ldr	r5, [pc, #220]	; (8002378 <HAL_RCC_ClockConfig+0xf0>)
 800229a:	682b      	ldr	r3, [r5, #0]
 800229c:	4013      	ands	r3, r2
 800229e:	428b      	cmp	r3, r1
 80022a0:	d31c      	bcc.n	80022dc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	0793      	lsls	r3, r2, #30
 80022a6:	d422      	bmi.n	80022ee <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a8:	07d2      	lsls	r2, r2, #31
 80022aa:	d42f      	bmi.n	800230c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ac:	2301      	movs	r3, #1
 80022ae:	682a      	ldr	r2, [r5, #0]
 80022b0:	401a      	ands	r2, r3
 80022b2:	42b2      	cmp	r2, r6
 80022b4:	d851      	bhi.n	800235a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	4d30      	ldr	r5, [pc, #192]	; (800237c <HAL_RCC_ClockConfig+0xf4>)
 80022ba:	075b      	lsls	r3, r3, #29
 80022bc:	d454      	bmi.n	8002368 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022be:	f7ff ffbd 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80022c2:	686b      	ldr	r3, [r5, #4]
 80022c4:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <HAL_RCC_ClockConfig+0xf8>)
 80022c6:	061b      	lsls	r3, r3, #24
 80022c8:	0f1b      	lsrs	r3, r3, #28
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	492d      	ldr	r1, [pc, #180]	; (8002384 <HAL_RCC_ClockConfig+0xfc>)
 80022ce:	40d8      	lsrs	r0, r3
 80022d0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff f874 	bl	80013c0 <HAL_InitTick>
  return HAL_OK;
 80022d8:	2000      	movs	r0, #0
 80022da:	e7db      	b.n	8002294 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	4393      	bics	r3, r2
 80022e0:	430b      	orrs	r3, r1
 80022e2:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	4013      	ands	r3, r2
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d1d2      	bne.n	8002292 <HAL_RCC_ClockConfig+0xa>
 80022ec:	e7d9      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ee:	4923      	ldr	r1, [pc, #140]	; (800237c <HAL_RCC_ClockConfig+0xf4>)
 80022f0:	0753      	lsls	r3, r2, #29
 80022f2:	d504      	bpl.n	80022fe <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022f4:	23e0      	movs	r3, #224	; 0xe0
 80022f6:	6848      	ldr	r0, [r1, #4]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4303      	orrs	r3, r0
 80022fc:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fe:	20f0      	movs	r0, #240	; 0xf0
 8002300:	684b      	ldr	r3, [r1, #4]
 8002302:	4383      	bics	r3, r0
 8002304:	68a0      	ldr	r0, [r4, #8]
 8002306:	4303      	orrs	r3, r0
 8002308:	604b      	str	r3, [r1, #4]
 800230a:	e7cd      	b.n	80022a8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230c:	4f1b      	ldr	r7, [pc, #108]	; (800237c <HAL_RCC_ClockConfig+0xf4>)
 800230e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002310:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002312:	2a01      	cmp	r2, #1
 8002314:	d119      	bne.n	800234a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	039b      	lsls	r3, r3, #14
 8002318:	d5bb      	bpl.n	8002292 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	2103      	movs	r1, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	438b      	bics	r3, r1
 8002320:	4313      	orrs	r3, r2
 8002322:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8002324:	f7ff f88c 	bl	8001440 <HAL_GetTick>
 8002328:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	230c      	movs	r3, #12
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	401a      	ands	r2, r3
 8002330:	6863      	ldr	r3, [r4, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d0b9      	beq.n	80022ac <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7ff f882 	bl	8001440 <HAL_GetTick>
 800233c:	9b01      	ldr	r3, [sp, #4]
 800233e:	1ac0      	subs	r0, r0, r3
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_RCC_ClockConfig+0x100>)
 8002342:	4298      	cmp	r0, r3
 8002344:	d9f1      	bls.n	800232a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
 8002348:	e7a4      	b.n	8002294 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800234a:	2a02      	cmp	r2, #2
 800234c:	d102      	bne.n	8002354 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	d4e3      	bmi.n	800231a <HAL_RCC_ClockConfig+0x92>
 8002352:	e79e      	b.n	8002292 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	079b      	lsls	r3, r3, #30
 8002356:	d4e0      	bmi.n	800231a <HAL_RCC_ClockConfig+0x92>
 8002358:	e79b      	b.n	8002292 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	682a      	ldr	r2, [r5, #0]
 800235c:	439a      	bics	r2, r3
 800235e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002360:	682a      	ldr	r2, [r5, #0]
 8002362:	421a      	tst	r2, r3
 8002364:	d0a7      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x2e>
 8002366:	e794      	b.n	8002292 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	686b      	ldr	r3, [r5, #4]
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_RCC_ClockConfig+0x104>)
 800236c:	4013      	ands	r3, r2
 800236e:	68e2      	ldr	r2, [r4, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	606b      	str	r3, [r5, #4]
 8002374:	e7a3      	b.n	80022be <HAL_RCC_ClockConfig+0x36>
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	40022000 	.word	0x40022000
 800237c:	40021000 	.word	0x40021000
 8002380:	08004426 	.word	0x08004426
 8002384:	20000000 	.word	0x20000000
 8002388:	00001388 	.word	0x00001388
 800238c:	fffff8ff 	.word	0xfffff8ff

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4905      	ldr	r1, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002398:	055b      	lsls	r3, r3, #21
 800239a:	0f5b      	lsrs	r3, r3, #29
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	6810      	ldr	r0, [r2, #0]
 80023a0:	40d8      	lsrs	r0, r3
}    
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000
 80023a8:	20000000 	.word	0x20000000
 80023ac:	08004436 	.word	0x08004436

080023b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023b2:	6803      	ldr	r3, [r0, #0]
{
 80023b4:	0005      	movs	r5, r0
 80023b6:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023b8:	03db      	lsls	r3, r3, #15
 80023ba:	d52b      	bpl.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023bc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c0:	4c38      	ldr	r4, [pc, #224]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80023c2:	0552      	lsls	r2, r2, #21
 80023c4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c8:	4213      	tst	r3, r2
 80023ca:	d108      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	69e3      	ldr	r3, [r4, #28]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61e3      	str	r3, [r4, #28]
 80023d2:	69e3      	ldr	r3, [r4, #28]
 80023d4:	4013      	ands	r3, r2
 80023d6:	9303      	str	r3, [sp, #12]
 80023d8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	2780      	movs	r7, #128	; 0x80
 80023e0:	4e31      	ldr	r6, [pc, #196]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80023e2:	007f      	lsls	r7, r7, #1
 80023e4:	6833      	ldr	r3, [r6, #0]
 80023e6:	423b      	tst	r3, r7
 80023e8:	d029      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ea:	6a21      	ldr	r1, [r4, #32]
 80023ec:	22c0      	movs	r2, #192	; 0xc0
 80023ee:	0008      	movs	r0, r1
 80023f0:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f2:	686b      	ldr	r3, [r5, #4]
 80023f4:	4e2d      	ldr	r6, [pc, #180]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f6:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f8:	4211      	tst	r1, r2
 80023fa:	d132      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023fc:	6a23      	ldr	r3, [r4, #32]
 80023fe:	686a      	ldr	r2, [r5, #4]
 8002400:	4033      	ands	r3, r6
 8002402:	4313      	orrs	r3, r2
 8002404:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002406:	9b00      	ldr	r3, [sp, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d103      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	69e3      	ldr	r3, [r4, #28]
 800240e:	4a28      	ldr	r2, [pc, #160]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002410:	4013      	ands	r3, r2
 8002412:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002414:	682a      	ldr	r2, [r5, #0]
 8002416:	07d3      	lsls	r3, r2, #31
 8002418:	d506      	bpl.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241a:	2003      	movs	r0, #3
 800241c:	4921      	ldr	r1, [pc, #132]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800241e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002420:	4383      	bics	r3, r0
 8002422:	68a8      	ldr	r0, [r5, #8]
 8002424:	4303      	orrs	r3, r0
 8002426:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002428:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800242a:	0692      	lsls	r2, r2, #26
 800242c:	d517      	bpl.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xae>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800242e:	2110      	movs	r1, #16
 8002430:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002432:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002434:	438b      	bics	r3, r1
 8002436:	68e9      	ldr	r1, [r5, #12]
 8002438:	430b      	orrs	r3, r1
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	e00f      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xae>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243e:	6833      	ldr	r3, [r6, #0]
 8002440:	433b      	orrs	r3, r7
 8002442:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002444:	f7fe fffc 	bl	8001440 <HAL_GetTick>
 8002448:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	6833      	ldr	r3, [r6, #0]
 800244c:	423b      	tst	r3, r7
 800244e:	d1cc      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe fff6 	bl	8001440 <HAL_GetTick>
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	1ac0      	subs	r0, r0, r3
 8002458:	2864      	cmp	r0, #100	; 0x64
 800245a:	d9f6      	bls.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x9a>
          return HAL_TIMEOUT;
 800245c:	2003      	movs	r0, #3
}
 800245e:	b005      	add	sp, #20
 8002460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002462:	4013      	ands	r3, r2
 8002464:	4283      	cmp	r3, r0
 8002466:	d0c9      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800246a:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800246c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800246e:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002470:	0252      	lsls	r2, r2, #9
 8002472:	4302      	orrs	r2, r0
 8002474:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002476:	6a22      	ldr	r2, [r4, #32]
 8002478:	480e      	ldr	r0, [pc, #56]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800247a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800247c:	4002      	ands	r2, r0
 800247e:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8002480:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002482:	07db      	lsls	r3, r3, #31
 8002484:	d5ba      	bpl.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8002486:	f7fe ffdb 	bl	8001440 <HAL_GetTick>
 800248a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	2202      	movs	r2, #2
 800248e:	6a23      	ldr	r3, [r4, #32]
 8002490:	4213      	tst	r3, r2
 8002492:	d1b3      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe ffd4 	bl	8001440 <HAL_GetTick>
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800249a:	1bc0      	subs	r0, r0, r7
 800249c:	4298      	cmp	r0, r3
 800249e:	d9f5      	bls.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80024a0:	e7dc      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40007000 	.word	0x40007000
 80024ac:	fffffcff 	.word	0xfffffcff
 80024b0:	efffffff 	.word	0xefffffff
 80024b4:	fffeffff 	.word	0xfffeffff
 80024b8:	00001388 	.word	0x00001388

080024bc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	0002      	movs	r2, r0
{
 80024be:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80024c0:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80024c2:	323d      	adds	r2, #61	; 0x3d
 80024c4:	7811      	ldrb	r1, [r2, #0]
 80024c6:	4281      	cmp	r1, r0
 80024c8:	d119      	bne.n	80024fe <HAL_TIM_Base_Start_IT+0x42>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ca:	2102      	movs	r1, #2
 80024cc:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4302      	orrs	r2, r0
 80024d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d6:	4a0d      	ldr	r2, [pc, #52]	; (800250c <HAL_TIM_Base_Start_IT+0x50>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d006      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x2e>
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	05d2      	lsls	r2, r2, #23
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d002      	beq.n	80024ea <HAL_TIM_Base_Start_IT+0x2e>
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_TIM_Base_Start_IT+0x54>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10a      	bne.n	8002500 <HAL_TIM_Base_Start_IT+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ea:	2107      	movs	r1, #7
 80024ec:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80024ee:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	2a06      	cmp	r2, #6
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 80024f6:	2201      	movs	r2, #1
 80024f8:	6819      	ldr	r1, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4302      	orrs	r2, r0
 8002504:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002506:	2000      	movs	r0, #0
 8002508:	e7f9      	b.n	80024fe <HAL_TIM_Base_Start_IT+0x42>
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400

08002514 <HAL_TIM_OC_DelayElapsedCallback>:
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_IC_CaptureCallback>:
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002518:	4770      	bx	lr

0800251a <HAL_TIM_TriggerCallback>:
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800251c:	2202      	movs	r2, #2
 800251e:	6803      	ldr	r3, [r0, #0]
{
 8002520:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002522:	6919      	ldr	r1, [r3, #16]
{
 8002524:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002526:	4211      	tst	r1, r2
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800252a:	68d9      	ldr	r1, [r3, #12]
 800252c:	4211      	tst	r1, r2
 800252e:	d00b      	beq.n	8002548 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002530:	3a05      	subs	r2, #5
 8002532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002534:	3204      	adds	r2, #4
 8002536:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	079b      	lsls	r3, r3, #30
 800253c:	d100      	bne.n	8002540 <HAL_TIM_IRQHandler+0x24>
 800253e:	e079      	b.n	8002634 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002540:	f7ff ffe9 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002544:	2300      	movs	r3, #0
 8002546:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002548:	2204      	movs	r2, #4
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	6919      	ldr	r1, [r3, #16]
 800254e:	4211      	tst	r1, r2
 8002550:	d010      	beq.n	8002574 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002552:	68d9      	ldr	r1, [r3, #12]
 8002554:	4211      	tst	r1, r2
 8002556:	d00d      	beq.n	8002574 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002558:	3a09      	subs	r2, #9
 800255a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255c:	3207      	adds	r2, #7
 800255e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	23c0      	movs	r3, #192	; 0xc0
 8002564:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002568:	421a      	tst	r2, r3
 800256a:	d069      	beq.n	8002640 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 800256c:	f7ff ffd3 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002570:	2300      	movs	r3, #0
 8002572:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002574:	2208      	movs	r2, #8
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	4211      	tst	r1, r2
 800257c:	d00e      	beq.n	800259c <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257e:	68d9      	ldr	r1, [r3, #12]
 8002580:	4211      	tst	r1, r2
 8002582:	d00b      	beq.n	800259c <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002584:	3a11      	subs	r2, #17
 8002586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002588:	320d      	adds	r2, #13
 800258a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002590:	079b      	lsls	r3, r3, #30
 8002592:	d05b      	beq.n	800264c <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8002594:	f7ff ffbf 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002598:	2300      	movs	r3, #0
 800259a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800259c:	2210      	movs	r2, #16
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	6919      	ldr	r1, [r3, #16]
 80025a2:	4211      	tst	r1, r2
 80025a4:	d010      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025a6:	68d9      	ldr	r1, [r3, #12]
 80025a8:	4211      	tst	r1, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025ac:	3a21      	subs	r2, #33	; 0x21
 80025ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b0:	3219      	adds	r2, #25
 80025b2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	23c0      	movs	r3, #192	; 0xc0
 80025b8:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025bc:	421a      	tst	r2, r3
 80025be:	d04b      	beq.n	8002658 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80025c0:	f7ff ffa9 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c4:	2300      	movs	r3, #0
 80025c6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c8:	2201      	movs	r2, #1
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	6919      	ldr	r1, [r3, #16]
 80025ce:	4211      	tst	r1, r2
 80025d0:	d007      	beq.n	80025e2 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025d2:	68d9      	ldr	r1, [r3, #12]
 80025d4:	4211      	tst	r1, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025d8:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025da:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80025de:	f7fe fd87 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	6919      	ldr	r1, [r3, #16]
 80025e8:	4211      	tst	r1, r2
 80025ea:	d008      	beq.n	80025fe <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	4211      	tst	r1, r2
 80025f0:	d005      	beq.n	80025fe <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f2:	3a02      	subs	r2, #2
 80025f4:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025f6:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80025fa:	f000 f8a4 	bl	8002746 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	6919      	ldr	r1, [r3, #16]
 8002604:	4211      	tst	r1, r2
 8002606:	d007      	beq.n	8002618 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	4211      	tst	r1, r2
 800260c:	d004      	beq.n	8002618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260e:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002610:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002612:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002614:	f7ff ff81 	bl	800251a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002618:	2220      	movs	r2, #32
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	4211      	tst	r1, r2
 8002620:	d007      	beq.n	8002632 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	4211      	tst	r1, r2
 8002626:	d004      	beq.n	8002632 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002628:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800262a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800262c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800262e:	f000 f889 	bl	8002744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002632:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002634:	f7ff ff6e 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002638:	0020      	movs	r0, r4
 800263a:	f7ff ff6d 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
 800263e:	e781      	b.n	8002544 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002640:	f7ff ff68 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	0020      	movs	r0, r4
 8002646:	f7ff ff67 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
 800264a:	e791      	b.n	8002570 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264c:	f7ff ff62 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	0020      	movs	r0, r4
 8002652:	f7ff ff61 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
 8002656:	e79f      	b.n	8002598 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002658:	f7ff ff5c 	bl	8002514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	0020      	movs	r0, r4
 800265e:	f7ff ff5b 	bl	8002518 <HAL_TIM_PWM_PulseFinishedCallback>
 8002662:	e7af      	b.n	80025c4 <HAL_TIM_IRQHandler+0xa8>

08002664 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <TIM_Base_SetConfig+0x78>)
{
 8002666:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002668:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800266a:	4290      	cmp	r0, r2
 800266c:	d006      	beq.n	800267c <TIM_Base_SetConfig+0x18>
 800266e:	2480      	movs	r4, #128	; 0x80
 8002670:	05e4      	lsls	r4, r4, #23
 8002672:	42a0      	cmp	r0, r4
 8002674:	d002      	beq.n	800267c <TIM_Base_SetConfig+0x18>
 8002676:	4c1a      	ldr	r4, [pc, #104]	; (80026e0 <TIM_Base_SetConfig+0x7c>)
 8002678:	42a0      	cmp	r0, r4
 800267a:	d10c      	bne.n	8002696 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	2470      	movs	r4, #112	; 0x70
 800267e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002680:	684c      	ldr	r4, [r1, #4]
 8002682:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002684:	4290      	cmp	r0, r2
 8002686:	d00f      	beq.n	80026a8 <TIM_Base_SetConfig+0x44>
 8002688:	2480      	movs	r4, #128	; 0x80
 800268a:	05e4      	lsls	r4, r4, #23
 800268c:	42a0      	cmp	r0, r4
 800268e:	d00b      	beq.n	80026a8 <TIM_Base_SetConfig+0x44>
 8002690:	4c13      	ldr	r4, [pc, #76]	; (80026e0 <TIM_Base_SetConfig+0x7c>)
 8002692:	42a0      	cmp	r0, r4
 8002694:	d008      	beq.n	80026a8 <TIM_Base_SetConfig+0x44>
 8002696:	4c13      	ldr	r4, [pc, #76]	; (80026e4 <TIM_Base_SetConfig+0x80>)
 8002698:	42a0      	cmp	r0, r4
 800269a:	d005      	beq.n	80026a8 <TIM_Base_SetConfig+0x44>
 800269c:	4c12      	ldr	r4, [pc, #72]	; (80026e8 <TIM_Base_SetConfig+0x84>)
 800269e:	42a0      	cmp	r0, r4
 80026a0:	d002      	beq.n	80026a8 <TIM_Base_SetConfig+0x44>
 80026a2:	4c12      	ldr	r4, [pc, #72]	; (80026ec <TIM_Base_SetConfig+0x88>)
 80026a4:	42a0      	cmp	r0, r4
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a8:	4c11      	ldr	r4, [pc, #68]	; (80026f0 <TIM_Base_SetConfig+0x8c>)
 80026aa:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ac:	68cb      	ldr	r3, [r1, #12]
 80026ae:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b0:	2480      	movs	r4, #128	; 0x80
 80026b2:	43a3      	bics	r3, r4
 80026b4:	694c      	ldr	r4, [r1, #20]
 80026b6:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80026b8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ba:	688b      	ldr	r3, [r1, #8]
 80026bc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026be:	680b      	ldr	r3, [r1, #0]
 80026c0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c2:	4290      	cmp	r0, r2
 80026c4:	d005      	beq.n	80026d2 <TIM_Base_SetConfig+0x6e>
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <TIM_Base_SetConfig+0x84>)
 80026c8:	4298      	cmp	r0, r3
 80026ca:	d002      	beq.n	80026d2 <TIM_Base_SetConfig+0x6e>
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <TIM_Base_SetConfig+0x88>)
 80026ce:	4298      	cmp	r0, r3
 80026d0:	d101      	bne.n	80026d6 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d2:	690b      	ldr	r3, [r1, #16]
 80026d4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d6:	2301      	movs	r3, #1
 80026d8:	6143      	str	r3, [r0, #20]
}
 80026da:	bd10      	pop	{r4, pc}
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40002000 	.word	0x40002000
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800
 80026f0:	fffffcff 	.word	0xfffffcff

080026f4 <HAL_TIM_Base_Init>:
{
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
  if (htim == NULL)
 80026fa:	2c00      	cmp	r4, #0
 80026fc:	d021      	beq.n	8002742 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	0025      	movs	r5, r4
 8002700:	353d      	adds	r5, #61	; 0x3d
 8002702:	782b      	ldrb	r3, [r5, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800270a:	0023      	movs	r3, r4
 800270c:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800270e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002710:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8002712:	f7fe fdb7 	bl	8001284 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002716:	2302      	movs	r3, #2
 8002718:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271a:	6820      	ldr	r0, [r4, #0]
 800271c:	1d21      	adds	r1, r4, #4
 800271e:	f7ff ffa1 	bl	8002664 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002722:	0022      	movs	r2, r4
 8002724:	2301      	movs	r3, #1
  return HAL_OK;
 8002726:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002728:	3246      	adds	r2, #70	; 0x46
 800272a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272c:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272e:	3a08      	subs	r2, #8
 8002730:	7013      	strb	r3, [r2, #0]
 8002732:	7053      	strb	r3, [r2, #1]
 8002734:	7093      	strb	r3, [r2, #2]
 8002736:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002738:	7113      	strb	r3, [r2, #4]
 800273a:	7153      	strb	r3, [r2, #5]
 800273c:	7193      	strb	r3, [r2, #6]
 800273e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002740:	702b      	strb	r3, [r5, #0]
}
 8002742:	bd70      	pop	{r4, r5, r6, pc}

08002744 <HAL_TIMEx_CommutCallback>:
 8002744:	4770      	bx	lr

08002746 <HAL_TIMEx_BreakCallback>:
 8002746:	4770      	bx	lr

08002748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002748:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800274a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274e:	2201      	movs	r2, #1
 8002750:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002754:	6801      	ldr	r1, [r0, #0]
 8002756:	4d12      	ldr	r5, [pc, #72]	; (80027a0 <UART_EndRxTransfer+0x58>)
 8002758:	680b      	ldr	r3, [r1, #0]
 800275a:	402b      	ands	r3, r5
 800275c:	600b      	str	r3, [r1, #0]
 800275e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002762:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276a:	6801      	ldr	r1, [r0, #0]
 800276c:	688b      	ldr	r3, [r1, #8]
 800276e:	4393      	bics	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
 8002772:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002776:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002778:	4293      	cmp	r3, r2
 800277a:	d10a      	bne.n	8002792 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002780:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002784:	2410      	movs	r4, #16
 8002786:	6802      	ldr	r2, [r0, #0]
 8002788:	6813      	ldr	r3, [r2, #0]
 800278a:	43a3      	bics	r3, r4
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002792:	2220      	movs	r2, #32
 8002794:	1d03      	adds	r3, r0, #4
 8002796:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002798:	2300      	movs	r3, #0
 800279a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800279c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800279e:	bd30      	pop	{r4, r5, pc}
 80027a0:	fffffedf 	.word	0xfffffedf

080027a4 <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 80027a4:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027aa:	2201      	movs	r2, #1
 80027ac:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027b0:	2580      	movs	r5, #128	; 0x80
 80027b2:	6801      	ldr	r1, [r0, #0]
 80027b4:	680b      	ldr	r3, [r1, #0]
 80027b6:	43ab      	bics	r3, r5
 80027b8:	600b      	str	r3, [r1, #0]
 80027ba:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027c6:	2340      	movs	r3, #64	; 0x40
 80027c8:	6802      	ldr	r2, [r0, #0]
 80027ca:	6810      	ldr	r0, [r2, #0]
 80027cc:	4303      	orrs	r3, r0
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80027d4:	bd30      	pop	{r4, r5, pc}

080027d6 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027d6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80027d8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027da:	2b21      	cmp	r3, #33	; 0x21
 80027dc:	d106      	bne.n	80027ec <UART_TxISR_8BIT+0x16>
    if (huart->TxXferCount == 0U)
 80027de:	0002      	movs	r2, r0
 80027e0:	3252      	adds	r2, #82	; 0x52
 80027e2:	8813      	ldrh	r3, [r2, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <UART_TxISR_8BIT+0x18>
 80027e8:	f7ff ffdc 	bl	80027a4 <UART_TxISR_16BIT.part.0>
}
 80027ec:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80027ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80027f0:	6801      	ldr	r1, [r0, #0]
 80027f2:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 80027f4:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80027f6:	850c      	strh	r4, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 80027f8:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80027fa:	8813      	ldrh	r3, [r2, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	8013      	strh	r3, [r2, #0]
}
 8002802:	e7f3      	b.n	80027ec <UART_TxISR_8BIT+0x16>

08002804 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002804:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002806:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002808:	2b21      	cmp	r3, #33	; 0x21
 800280a:	d106      	bne.n	800281a <UART_TxISR_16BIT+0x16>
  {
    if (huart->TxXferCount == 0U)
 800280c:	0001      	movs	r1, r0
 800280e:	3152      	adds	r1, #82	; 0x52
 8002810:	880b      	ldrh	r3, [r1, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <UART_TxISR_16BIT+0x18>
 8002816:	f7ff ffc5 	bl	80027a4 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800281a:	bd10      	pop	{r4, pc}
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800281c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800281e:	6804      	ldr	r4, [r0, #0]
 8002820:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 8002822:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002824:	05db      	lsls	r3, r3, #23
 8002826:	0ddb      	lsrs	r3, r3, #23
 8002828:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800282a:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800282c:	880b      	ldrh	r3, [r1, #0]
 800282e:	3b01      	subs	r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	800b      	strh	r3, [r1, #0]
}
 8002834:	e7f1      	b.n	800281a <UART_TxISR_16BIT+0x16>
	...

08002838 <HAL_UART_Transmit_IT>:
{
 8002838:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800283a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 800283c:	0003      	movs	r3, r0
    return HAL_BUSY;
 800283e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8002840:	2c20      	cmp	r4, #32
 8002842:	d131      	bne.n	80028a8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8002844:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002846:	2900      	cmp	r1, #0
 8002848:	d02e      	beq.n	80028a8 <HAL_UART_Transmit_IT+0x70>
 800284a:	2a00      	cmp	r2, #0
 800284c:	d02c      	beq.n	80028a8 <HAL_UART_Transmit_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800284e:	2080      	movs	r0, #128	; 0x80
 8002850:	689c      	ldr	r4, [r3, #8]
 8002852:	0140      	lsls	r0, r0, #5
 8002854:	4284      	cmp	r4, r0
 8002856:	d105      	bne.n	8002864 <HAL_UART_Transmit_IT+0x2c>
 8002858:	6918      	ldr	r0, [r3, #16]
 800285a:	2800      	cmp	r0, #0
 800285c:	d102      	bne.n	8002864 <HAL_UART_Transmit_IT+0x2c>
      return HAL_ERROR;
 800285e:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8002860:	4201      	tst	r1, r0
 8002862:	d121      	bne.n	80028a8 <HAL_UART_Transmit_IT+0x70>
    huart->pTxBuffPtr  = pData;
 8002864:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002866:	0019      	movs	r1, r3
 8002868:	3150      	adds	r1, #80	; 0x50
 800286a:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 800286c:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286e:	001a      	movs	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	3208      	adds	r2, #8
 8002874:	67d1      	str	r1, [r2, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002876:	2221      	movs	r2, #33	; 0x21
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002878:	2180      	movs	r1, #128	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287a:	67da      	str	r2, [r3, #124]	; 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287c:	0149      	lsls	r1, r1, #5
      huart->TxISR = UART_TxISR_8BIT;
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <HAL_UART_Transmit_IT+0x74>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	428c      	cmp	r4, r1
 8002882:	d103      	bne.n	800288c <HAL_UART_Transmit_IT+0x54>
 8002884:	6919      	ldr	r1, [r3, #16]
 8002886:	2900      	cmp	r1, #0
 8002888:	d100      	bne.n	800288c <HAL_UART_Transmit_IT+0x54>
      huart->TxISR = UART_TxISR_16BIT;
 800288a:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_UART_Transmit_IT+0x78>)
 800288c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002892:	2201      	movs	r2, #1
 8002894:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	6810      	ldr	r0, [r2, #0]
 800289e:	4303      	orrs	r3, r0
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80028a6:	2000      	movs	r0, #0
}
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	080027d7 	.word	0x080027d7
 80028b0:	08002805 	.word	0x08002805

080028b4 <HAL_UART_TxCpltCallback>:
 80028b4:	4770      	bx	lr

080028b6 <HAL_UART_ErrorCallback>:
 80028b6:	4770      	bx	lr

080028b8 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	0002      	movs	r2, r0
{
 80028be:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80028c0:	325a      	adds	r2, #90	; 0x5a
 80028c2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80028c4:	3a08      	subs	r2, #8
 80028c6:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80028c8:	f7ff fff5 	bl	80028b6 <HAL_UART_ErrorCallback>
}
 80028cc:	bd10      	pop	{r4, pc}

080028ce <HAL_UARTEx_RxEventCallback>:
}
 80028ce:	4770      	bx	lr

080028d0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028d0:	6802      	ldr	r2, [r0, #0]
{
 80028d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028d4:	69d3      	ldr	r3, [r2, #28]
{
 80028d6:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028d8:	48a7      	ldr	r0, [pc, #668]	; (8002b78 <HAL_UART_IRQHandler+0x2a8>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028da:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028dc:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 80028de:	4203      	tst	r3, r0
 80028e0:	d10b      	bne.n	80028fa <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028e2:	2020      	movs	r0, #32
 80028e4:	4203      	tst	r3, r0
 80028e6:	d100      	bne.n	80028ea <HAL_UART_IRQHandler+0x1a>
 80028e8:	e080      	b.n	80029ec <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028ea:	4201      	tst	r1, r0
 80028ec:	d100      	bne.n	80028f0 <HAL_UART_IRQHandler+0x20>
 80028ee:	e07d      	b.n	80029ec <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 80028f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 80028f2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d16f      	bne.n	80029d8 <HAL_UART_IRQHandler+0x108>
 80028f8:	e06f      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028fa:	2001      	movs	r0, #1
 80028fc:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028fe:	4d9f      	ldr	r5, [pc, #636]	; (8002b7c <HAL_UART_IRQHandler+0x2ac>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002900:	4007      	ands	r7, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002902:	400d      	ands	r5, r1
 8002904:	433d      	orrs	r5, r7
 8002906:	d100      	bne.n	800290a <HAL_UART_IRQHandler+0x3a>
 8002908:	e070      	b.n	80029ec <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800290a:	0025      	movs	r5, r4
 800290c:	3508      	adds	r5, #8
 800290e:	4203      	tst	r3, r0
 8002910:	d005      	beq.n	800291e <HAL_UART_IRQHandler+0x4e>
 8002912:	05ce      	lsls	r6, r1, #23
 8002914:	d503      	bpl.n	800291e <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002916:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002918:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800291a:	4330      	orrs	r0, r6
 800291c:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800291e:	2002      	movs	r0, #2
 8002920:	4203      	tst	r3, r0
 8002922:	d006      	beq.n	8002932 <HAL_UART_IRQHandler+0x62>
 8002924:	2f00      	cmp	r7, #0
 8002926:	d004      	beq.n	8002932 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002928:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800292a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800292c:	1800      	adds	r0, r0, r0
 800292e:	4330      	orrs	r0, r6
 8002930:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002932:	2004      	movs	r0, #4
 8002934:	4203      	tst	r3, r0
 8002936:	d006      	beq.n	8002946 <HAL_UART_IRQHandler+0x76>
 8002938:	2f00      	cmp	r7, #0
 800293a:	d004      	beq.n	8002946 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800293c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800293e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8002940:	3802      	subs	r0, #2
 8002942:	4330      	orrs	r0, r6
 8002944:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002946:	2008      	movs	r0, #8
 8002948:	4203      	tst	r3, r0
 800294a:	d007      	beq.n	800295c <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800294c:	2620      	movs	r6, #32
 800294e:	400e      	ands	r6, r1
 8002950:	433e      	orrs	r6, r7
 8002952:	d003      	beq.n	800295c <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002954:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002956:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8002958:	4330      	orrs	r0, r6
 800295a:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800295c:	2080      	movs	r0, #128	; 0x80
 800295e:	0100      	lsls	r0, r0, #4
 8002960:	4203      	tst	r3, r0
 8002962:	d006      	beq.n	8002972 <HAL_UART_IRQHandler+0xa2>
 8002964:	014e      	lsls	r6, r1, #5
 8002966:	d504      	bpl.n	8002972 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002968:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800296a:	2220      	movs	r2, #32
 800296c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800296e:	4302      	orrs	r2, r0
 8002970:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002972:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002974:	2a00      	cmp	r2, #0
 8002976:	d030      	beq.n	80029da <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002978:	2220      	movs	r2, #32
 800297a:	4213      	tst	r3, r2
 800297c:	d006      	beq.n	800298c <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800297e:	4211      	tst	r1, r2
 8002980:	d004      	beq.n	800298c <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8002982:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8002988:	0020      	movs	r0, r4
 800298a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800298c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800298e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002990:	2740      	movs	r7, #64	; 0x40
 8002992:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002994:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002996:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002998:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 800299a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800299c:	431e      	orrs	r6, r3
 800299e:	d021      	beq.n	80029e4 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 80029a0:	f7ff fed2 	bl	8002748 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	423b      	tst	r3, r7
 80029aa:	d017      	beq.n	80029dc <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b0:	2301      	movs	r3, #1
 80029b2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	6893      	ldr	r3, [r2, #8]
 80029ba:	43bb      	bics	r3, r7
 80029bc:	6093      	str	r3, [r2, #8]
 80029be:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80029c2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d009      	beq.n	80029dc <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029c8:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_UART_IRQHandler+0x2b0>)
 80029ca:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029cc:	f7fe fdbe 	bl	800154c <HAL_DMA_Abort_IT>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d002      	beq.n	80029da <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80029d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029d8:	4798      	blx	r3
}
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80029dc:	0020      	movs	r0, r4
 80029de:	f7ff ff6a 	bl	80028b6 <HAL_UART_ErrorCallback>
 80029e2:	e7fa      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80029e4:	f7ff ff67 	bl	80028b6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e8:	67ee      	str	r6, [r5, #124]	; 0x7c
 80029ea:	e7f6      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ec:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80029ee:	2801      	cmp	r0, #1
 80029f0:	d000      	beq.n	80029f4 <HAL_UART_IRQHandler+0x124>
 80029f2:	e095      	b.n	8002b20 <HAL_UART_IRQHandler+0x250>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029f4:	2510      	movs	r5, #16
 80029f6:	422b      	tst	r3, r5
 80029f8:	d100      	bne.n	80029fc <HAL_UART_IRQHandler+0x12c>
 80029fa:	e091      	b.n	8002b20 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80029fc:	4229      	tst	r1, r5
 80029fe:	d100      	bne.n	8002a02 <HAL_UART_IRQHandler+0x132>
 8002a00:	e08e      	b.n	8002b20 <HAL_UART_IRQHandler+0x250>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a02:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	6893      	ldr	r3, [r2, #8]
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	001e      	movs	r6, r3
 8002a0a:	400e      	ands	r6, r1
 8002a0c:	420b      	tst	r3, r1
 8002a0e:	d04f      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x1e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a10:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002a12:	6813      	ldr	r3, [r2, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0de      	beq.n	80029da <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a1c:	0026      	movs	r6, r4
 8002a1e:	3658      	adds	r6, #88	; 0x58
 8002a20:	8837      	ldrh	r7, [r6, #0]
 8002a22:	429f      	cmp	r7, r3
 8002a24:	d9d9      	bls.n	80029da <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8002a26:	0027      	movs	r7, r4
 8002a28:	375a      	adds	r7, #90	; 0x5a
 8002a2a:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a2c:	6993      	ldr	r3, [r2, #24]
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d032      	beq.n	8002a98 <HAL_UART_IRQHandler+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a32:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a3a:	6822      	ldr	r2, [r4, #0]
 8002a3c:	4d51      	ldr	r5, [pc, #324]	; (8002b84 <HAL_UART_IRQHandler+0x2b4>)
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	402b      	ands	r3, r5
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a48:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	6893      	ldr	r3, [r2, #8]
 8002a54:	4383      	bics	r3, r0
 8002a56:	6093      	str	r3, [r2, #8]
 8002a58:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a60:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a64:	0023      	movs	r3, r4
 8002a66:	cb80      	ldmia	r3!, {r7}
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	60ba      	str	r2, [r7, #8]
 8002a6e:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 8002a72:	2220      	movs	r2, #32
 8002a74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a76:	2300      	movs	r3, #0
 8002a78:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a7a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7e:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	3512      	adds	r5, #18
 8002a86:	6813      	ldr	r3, [r2, #0]
 8002a88:	35ff      	adds	r5, #255	; 0xff
 8002a8a:	43ab      	bics	r3, r5
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a92:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002a94:	f7fe fd3c 	bl	8001510 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a9c:	0023      	movs	r3, r4
 8002a9e:	335a      	adds	r3, #90	; 0x5a
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	8831      	ldrh	r1, [r6, #0]
 8002aa4:	1ac9      	subs	r1, r1, r3
 8002aa6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aa8:	0020      	movs	r0, r4
 8002aaa:	f7ff ff10 	bl	80028ce <HAL_UARTEx_RxEventCallback>
 8002aae:	e794      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ab0:	0023      	movs	r3, r4
 8002ab2:	0022      	movs	r2, r4
 8002ab4:	3358      	adds	r3, #88	; 0x58
 8002ab6:	325a      	adds	r2, #90	; 0x5a
 8002ab8:	8819      	ldrh	r1, [r3, #0]
 8002aba:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 8002abc:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002abe:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d100      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x1f6>
 8002ac4:	e789      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ac6:	1ac9      	subs	r1, r1, r3
 8002ac8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002aca:	2900      	cmp	r1, #0
 8002acc:	d100      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x200>
 8002ace:	e784      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	4d2b      	ldr	r5, [pc, #172]	; (8002b88 <HAL_UART_IRQHandler+0x2b8>)
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	402b      	ands	r3, r5
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aee:	0023      	movs	r3, r4
 8002af0:	cb80      	ldmia	r3!, {r7}
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4382      	bics	r2, r0
 8002af6:	60ba      	str	r2, [r7, #8]
 8002af8:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8002afc:	2220      	movs	r2, #32
 8002afe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b00:	6626      	str	r6, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8002b02:	66a6      	str	r6, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b04:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b08:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0c:	2010      	movs	r0, #16
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	4383      	bics	r3, r0
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	f386 8810 	msr	PRIMASK, r6
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	6663      	str	r3, [r4, #100]	; 0x64
 8002b1e:	e7c3      	b.n	8002aa8 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b20:	2080      	movs	r0, #128	; 0x80
 8002b22:	0340      	lsls	r0, r0, #13
 8002b24:	4203      	tst	r3, r0
 8002b26:	d006      	beq.n	8002b36 <HAL_UART_IRQHandler+0x266>
 8002b28:	0276      	lsls	r6, r6, #9
 8002b2a:	d504      	bpl.n	8002b36 <HAL_UART_IRQHandler+0x266>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b2c:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002b2e:	0020      	movs	r0, r4
 8002b30:	f000 f9f6 	bl	8002f20 <HAL_UARTEx_WakeupCallback>
    return;
 8002b34:	e751      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	4213      	tst	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <HAL_UART_IRQHandler+0x274>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b3c:	4211      	tst	r1, r2
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_IRQHandler+0x274>
    if (huart->TxISR != NULL)
 8002b40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b42:	e6d6      	b.n	80028f2 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	4213      	tst	r3, r2
 8002b48:	d100      	bne.n	8002b4c <HAL_UART_IRQHandler+0x27c>
 8002b4a:	e746      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
 8002b4c:	4211      	tst	r1, r2
 8002b4e:	d100      	bne.n	8002b52 <HAL_UART_IRQHandler+0x282>
 8002b50:	e743      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b52:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b56:	2301      	movs	r3, #1
 8002b58:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b5c:	6821      	ldr	r1, [r4, #0]
 8002b5e:	680b      	ldr	r3, [r1, #0]
 8002b60:	4393      	bics	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
 8002b64:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b68:	2320      	movs	r3, #32
 8002b6a:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002b6c:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b6e:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002b70:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8002b72:	f7ff fe9f 	bl	80028b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b76:	e730      	b.n	80029da <HAL_UART_IRQHandler+0x10a>
 8002b78:	0000080f 	.word	0x0000080f
 8002b7c:	04000120 	.word	0x04000120
 8002b80:	080028b9 	.word	0x080028b9
 8002b84:	fffffeff 	.word	0xfffffeff
 8002b88:	fffffedf 	.word	0xfffffedf

08002b8c <UART_SetConfig>:
{
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b90:	6925      	ldr	r5, [r4, #16]
 8002b92:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b94:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b96:	432a      	orrs	r2, r5
 8002b98:	6965      	ldr	r5, [r4, #20]
 8002b9a:	69c3      	ldr	r3, [r0, #28]
 8002b9c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b9e:	6808      	ldr	r0, [r1, #0]
 8002ba0:	4d38      	ldr	r5, [pc, #224]	; (8002c84 <UART_SetConfig+0xf8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ba4:	4028      	ands	r0, r5
 8002ba6:	4302      	orrs	r2, r0
 8002ba8:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002baa:	684a      	ldr	r2, [r1, #4]
 8002bac:	4836      	ldr	r0, [pc, #216]	; (8002c88 <UART_SetConfig+0xfc>)
  tmpreg |= huart->Init.OneBitSampling;
 8002bae:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	4002      	ands	r2, r0
 8002bb2:	68e0      	ldr	r0, [r4, #12]
 8002bb4:	4302      	orrs	r2, r0
 8002bb6:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bb8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bba:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002bbc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bbe:	4d33      	ldr	r5, [pc, #204]	; (8002c8c <UART_SetConfig+0x100>)
 8002bc0:	4028      	ands	r0, r5
 8002bc2:	4302      	orrs	r2, r0
 8002bc4:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <UART_SetConfig+0x104>)
 8002bca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bcc:	400a      	ands	r2, r1
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	0209      	lsls	r1, r1, #8
 8002bd4:	2a02      	cmp	r2, #2
 8002bd6:	d849      	bhi.n	8002c6c <UART_SetConfig+0xe0>
 8002bd8:	482e      	ldr	r0, [pc, #184]	; (8002c94 <UART_SetConfig+0x108>)
 8002bda:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d123      	bne.n	8002c28 <UART_SetConfig+0x9c>
    switch (clocksource)
 8002be0:	2808      	cmp	r0, #8
 8002be2:	d815      	bhi.n	8002c10 <UART_SetConfig+0x84>
 8002be4:	f7fd fa9a 	bl	800011c <__gnu_thumb1_case_uqi>
 8002be8:	14081444 	.word	0x14081444
 8002bec:	14141405 	.word	0x14141405
 8002bf0:	09          	.byte	0x09
 8002bf1:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf2:	f7ff fb23 	bl	800223c <HAL_RCC_GetSysClockFreq>
 8002bf6:	e03d      	b.n	8002c74 <UART_SetConfig+0xe8>
    switch (clocksource)
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bfa:	6861      	ldr	r1, [r4, #4]
 8002bfc:	0058      	lsls	r0, r3, #1
 8002bfe:	084b      	lsrs	r3, r1, #1
 8002c00:	18c0      	adds	r0, r0, r3
 8002c02:	f7fd fa9f 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c06:	0002      	movs	r2, r0
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <UART_SetConfig+0x110>)
 8002c0a:	3a10      	subs	r2, #16
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d901      	bls.n	8002c14 <UART_SetConfig+0x88>
    switch (clocksource)
 8002c10:	2001      	movs	r0, #1
 8002c12:	e032      	b.n	8002c7a <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c14:	230f      	movs	r3, #15
 8002c16:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c18:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c1a:	439a      	bics	r2, r3
 8002c1c:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c1e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002c20:	6822      	ldr	r2, [r4, #0]
 8002c22:	4303      	orrs	r3, r0
 8002c24:	60d3      	str	r3, [r2, #12]
 8002c26:	e027      	b.n	8002c78 <UART_SetConfig+0xec>
    switch (clocksource)
 8002c28:	2808      	cmp	r0, #8
 8002c2a:	d8f1      	bhi.n	8002c10 <UART_SetConfig+0x84>
 8002c2c:	f7fd fa6c 	bl	8000108 <__gnu_thumb1_case_sqi>
 8002c30:	f01cf014 	.word	0xf01cf014
 8002c34:	f0f0f019 	.word	0xf0f0f019
 8002c38:	05          	.byte	0x05
 8002c39:	00          	.byte	0x00
 8002c3a:	2080      	movs	r0, #128	; 0x80
 8002c3c:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c3e:	6861      	ldr	r1, [r4, #4]
 8002c40:	084b      	lsrs	r3, r1, #1
 8002c42:	1818      	adds	r0, r3, r0
 8002c44:	f7fd fa7e 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c48:	0002      	movs	r2, r0
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <UART_SetConfig+0x110>)
 8002c4c:	3a10      	subs	r2, #16
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d8de      	bhi.n	8002c10 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	60d8      	str	r0, [r3, #12]
 8002c56:	e00f      	b.n	8002c78 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c58:	f7ff fb9a 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d00b      	beq.n	8002c78 <UART_SetConfig+0xec>
 8002c60:	e7ed      	b.n	8002c3e <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c62:	f7ff faeb 	bl	800223c <HAL_RCC_GetSysClockFreq>
        break;
 8002c66:	e7f9      	b.n	8002c5c <UART_SetConfig+0xd0>
        pclk = (uint32_t) HSI_VALUE;
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <UART_SetConfig+0x10c>)
 8002c6a:	e7e8      	b.n	8002c3e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	d1f3      	bne.n	8002c58 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7ff fb8e 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c74:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002c76:	d1c0      	bne.n	8002bfa <UART_SetConfig+0x6e>
 8002c78:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8002c7e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	ffff69f3 	.word	0xffff69f3
 8002c88:	ffffcfff 	.word	0xffffcfff
 8002c8c:	fffff4ff 	.word	0xfffff4ff
 8002c90:	40021000 	.word	0x40021000
 8002c94:	0800445e 	.word	0x0800445e
 8002c98:	007a1200 	.word	0x007a1200
 8002c9c:	0000ffef 	.word	0x0000ffef

08002ca0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002ca2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca4:	07da      	lsls	r2, r3, #31
 8002ca6:	d506      	bpl.n	8002cb6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ca8:	6801      	ldr	r1, [r0, #0]
 8002caa:	4c28      	ldr	r4, [pc, #160]	; (8002d4c <UART_AdvFeatureConfig+0xac>)
 8002cac:	684a      	ldr	r2, [r1, #4]
 8002cae:	4022      	ands	r2, r4
 8002cb0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002cb2:	4322      	orrs	r2, r4
 8002cb4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cb6:	079a      	lsls	r2, r3, #30
 8002cb8:	d506      	bpl.n	8002cc8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cba:	6801      	ldr	r1, [r0, #0]
 8002cbc:	4c24      	ldr	r4, [pc, #144]	; (8002d50 <UART_AdvFeatureConfig+0xb0>)
 8002cbe:	684a      	ldr	r2, [r1, #4]
 8002cc0:	4022      	ands	r2, r4
 8002cc2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002cc4:	4322      	orrs	r2, r4
 8002cc6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cc8:	075a      	lsls	r2, r3, #29
 8002cca:	d506      	bpl.n	8002cda <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ccc:	6801      	ldr	r1, [r0, #0]
 8002cce:	4c21      	ldr	r4, [pc, #132]	; (8002d54 <UART_AdvFeatureConfig+0xb4>)
 8002cd0:	684a      	ldr	r2, [r1, #4]
 8002cd2:	4022      	ands	r2, r4
 8002cd4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002cd6:	4322      	orrs	r2, r4
 8002cd8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cda:	071a      	lsls	r2, r3, #28
 8002cdc:	d506      	bpl.n	8002cec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cde:	6801      	ldr	r1, [r0, #0]
 8002ce0:	4c1d      	ldr	r4, [pc, #116]	; (8002d58 <UART_AdvFeatureConfig+0xb8>)
 8002ce2:	684a      	ldr	r2, [r1, #4]
 8002ce4:	4022      	ands	r2, r4
 8002ce6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002ce8:	4322      	orrs	r2, r4
 8002cea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cec:	06da      	lsls	r2, r3, #27
 8002cee:	d506      	bpl.n	8002cfe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cf0:	6801      	ldr	r1, [r0, #0]
 8002cf2:	4c1a      	ldr	r4, [pc, #104]	; (8002d5c <UART_AdvFeatureConfig+0xbc>)
 8002cf4:	688a      	ldr	r2, [r1, #8]
 8002cf6:	4022      	ands	r2, r4
 8002cf8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002cfa:	4322      	orrs	r2, r4
 8002cfc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cfe:	069a      	lsls	r2, r3, #26
 8002d00:	d506      	bpl.n	8002d10 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d02:	6801      	ldr	r1, [r0, #0]
 8002d04:	4c16      	ldr	r4, [pc, #88]	; (8002d60 <UART_AdvFeatureConfig+0xc0>)
 8002d06:	688a      	ldr	r2, [r1, #8]
 8002d08:	4022      	ands	r2, r4
 8002d0a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d0c:	4322      	orrs	r2, r4
 8002d0e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d10:	065a      	lsls	r2, r3, #25
 8002d12:	d510      	bpl.n	8002d36 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d14:	6801      	ldr	r1, [r0, #0]
 8002d16:	4d13      	ldr	r5, [pc, #76]	; (8002d64 <UART_AdvFeatureConfig+0xc4>)
 8002d18:	684a      	ldr	r2, [r1, #4]
 8002d1a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d1c:	402a      	ands	r2, r5
 8002d1e:	4322      	orrs	r2, r4
 8002d20:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	0352      	lsls	r2, r2, #13
 8002d26:	4294      	cmp	r4, r2
 8002d28:	d105      	bne.n	8002d36 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d2a:	684a      	ldr	r2, [r1, #4]
 8002d2c:	4c0e      	ldr	r4, [pc, #56]	; (8002d68 <UART_AdvFeatureConfig+0xc8>)
 8002d2e:	4022      	ands	r2, r4
 8002d30:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002d32:	4322      	orrs	r2, r4
 8002d34:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	d506      	bpl.n	8002d48 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d3a:	6802      	ldr	r2, [r0, #0]
 8002d3c:	490b      	ldr	r1, [pc, #44]	; (8002d6c <UART_AdvFeatureConfig+0xcc>)
 8002d3e:	6853      	ldr	r3, [r2, #4]
 8002d40:	400b      	ands	r3, r1
 8002d42:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6053      	str	r3, [r2, #4]
}
 8002d48:	bd30      	pop	{r4, r5, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	fffdffff 	.word	0xfffdffff
 8002d50:	fffeffff 	.word	0xfffeffff
 8002d54:	fffbffff 	.word	0xfffbffff
 8002d58:	ffff7fff 	.word	0xffff7fff
 8002d5c:	ffffefff 	.word	0xffffefff
 8002d60:	ffffdfff 	.word	0xffffdfff
 8002d64:	ffefffff 	.word	0xffefffff
 8002d68:	ff9fffff 	.word	0xff9fffff
 8002d6c:	fff7ffff 	.word	0xfff7ffff

08002d70 <UART_WaitOnFlagUntilTimeout>:
{
 8002d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d72:	0004      	movs	r4, r0
 8002d74:	000d      	movs	r5, r1
 8002d76:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d78:	2608      	movs	r6, #8
{
 8002d7a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	69d3      	ldr	r3, [r2, #28]
 8002d80:	402b      	ands	r3, r5
 8002d82:	1b5b      	subs	r3, r3, r5
 8002d84:	4259      	negs	r1, r3
 8002d86:	414b      	adcs	r3, r1
 8002d88:	42bb      	cmp	r3, r7
 8002d8a:	d001      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	e021      	b.n	8002dd4 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	9b08      	ldr	r3, [sp, #32]
 8002d92:	3301      	adds	r3, #1
 8002d94:	d0f3      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7fe fb53 	bl	8001440 <HAL_GetTick>
 8002d9a:	9b00      	ldr	r3, [sp, #0]
 8002d9c:	1ac0      	subs	r0, r0, r3
 8002d9e:	9b08      	ldr	r3, [sp, #32]
 8002da0:	4298      	cmp	r0, r3
 8002da2:	d828      	bhi.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x86>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d026      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002da8:	2104      	movs	r1, #4
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	420a      	tst	r2, r1
 8002db0:	d0e4      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	0011      	movs	r1, r2
 8002db6:	4031      	ands	r1, r6
 8002db8:	9101      	str	r1, [sp, #4]
 8002dba:	4232      	tst	r2, r6
 8002dbc:	d00b      	beq.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8002dbe:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dc0:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8002dc2:	f7ff fcc1 	bl	8002748 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dc6:	0023      	movs	r3, r4
 8002dc8:	3308      	adds	r3, #8
 8002dca:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8002dcc:	2300      	movs	r3, #0
           return HAL_ERROR;
 8002dce:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8002dd0:	3478      	adds	r4, #120	; 0x78
 8002dd2:	7023      	strb	r3, [r4, #0]
}
 8002dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	69d9      	ldr	r1, [r3, #28]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	4211      	tst	r1, r2
 8002dde:	d0cd      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002de0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002de2:	0020      	movs	r0, r4
 8002de4:	f7ff fcb0 	bl	8002748 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002de8:	0023      	movs	r3, r4
 8002dea:	2220      	movs	r2, #32
 8002dec:	3308      	adds	r3, #8
 8002dee:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002df0:	9b01      	ldr	r3, [sp, #4]
 8002df2:	3478      	adds	r4, #120	; 0x78
 8002df4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002df6:	2003      	movs	r0, #3
 8002df8:	e7ec      	b.n	8002dd4 <UART_WaitOnFlagUntilTimeout+0x64>
	...

08002dfc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	0003      	movs	r3, r0
{
 8002dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	2500      	movs	r5, #0
{
 8002e02:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e04:	3308      	adds	r3, #8
 8002e06:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002e08:	f7fe fb1a 	bl	8001440 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e0c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002e0e:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	071b      	lsls	r3, r3, #28
 8002e14:	d51d      	bpl.n	8002e52 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <UART_CheckIdleState+0xb8>)
 8002e1a:	002a      	movs	r2, r5
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	0389      	lsls	r1, r1, #14
 8002e20:	0003      	movs	r3, r0
 8002e22:	0020      	movs	r0, r4
 8002e24:	f7ff ffa4 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8002e28:	42a8      	cmp	r0, r5
 8002e2a:	d012      	beq.n	8002e52 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e30:	2301      	movs	r3, #1
 8002e32:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e36:	2080      	movs	r0, #128	; 0x80
 8002e38:	6822      	ldr	r2, [r4, #0]
 8002e3a:	6813      	ldr	r3, [r2, #0]
 8002e3c:	4383      	bics	r3, r0
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002e44:	2320      	movs	r3, #32
 8002e46:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8002e48:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	3478      	adds	r4, #120	; 0x78
 8002e4e:	7023      	strb	r3, [r4, #0]
}
 8002e50:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e52:	0025      	movs	r5, r4
 8002e54:	cd08      	ldmia	r5!, {r3}
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	075b      	lsls	r3, r3, #29
 8002e5a:	d523      	bpl.n	8002ea4 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <UART_CheckIdleState+0xb8>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	0020      	movs	r0, r4
 8002e66:	0033      	movs	r3, r6
 8002e68:	03c9      	lsls	r1, r1, #15
 8002e6a:	f7ff ff81 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d018      	beq.n	8002ea4 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e72:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e76:	2201      	movs	r2, #1
 8002e78:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e7c:	6821      	ldr	r1, [r4, #0]
 8002e7e:	4e0e      	ldr	r6, [pc, #56]	; (8002eb8 <UART_CheckIdleState+0xbc>)
 8002e80:	680b      	ldr	r3, [r1, #0]
 8002e82:	4033      	ands	r3, r6
 8002e84:	600b      	str	r3, [r1, #0]
 8002e86:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e92:	6821      	ldr	r1, [r4, #0]
 8002e94:	688b      	ldr	r3, [r1, #8]
 8002e96:	4393      	bics	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
 8002e9a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	67eb      	str	r3, [r5, #124]	; 0x7c
 8002ea2:	e7d1      	b.n	8002e48 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002ea4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002ea8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eac:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eae:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8002eb0:	e7cb      	b.n	8002e4a <UART_CheckIdleState+0x4e>
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	01ffffff 	.word	0x01ffffff
 8002eb8:	fffffedf 	.word	0xfffffedf

08002ebc <HAL_UART_Init>:
{
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002ec2:	2001      	movs	r0, #1
}
 8002ec4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002ecc:	0002      	movs	r2, r0
 8002ece:	3278      	adds	r2, #120	; 0x78
 8002ed0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002ed2:	f7fe fa0f 	bl	80012f4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002ed6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002ed8:	2101      	movs	r1, #1
 8002eda:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002ede:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002ee2:	438b      	bics	r3, r1
 8002ee4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee6:	f7ff fe51 	bl	8002b8c <UART_SetConfig>
 8002eea:	2801      	cmp	r0, #1
 8002eec:	d0e9      	beq.n	8002ec2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002ef4:	0020      	movs	r0, r4
 8002ef6:	f7ff fed3 	bl	8002ca0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <HAL_UART_Init+0x60>)
 8002efe:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002f00:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f02:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f04:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	438a      	bics	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002f16:	f7ff ff71 	bl	8002dfc <UART_CheckIdleState>
 8002f1a:	e7d3      	b.n	8002ec4 <HAL_UART_Init+0x8>
 8002f1c:	ffffb7ff 	.word	0xffffb7ff

08002f20 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f20:	4770      	bx	lr
	...

08002f24 <srand>:
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <srand+0x48>)
 8002f26:	b570      	push	{r4, r5, r6, lr}
 8002f28:	681d      	ldr	r5, [r3, #0]
 8002f2a:	0004      	movs	r4, r0
 8002f2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <srand+0x3c>
 8002f32:	2018      	movs	r0, #24
 8002f34:	f000 fb50 	bl	80035d8 <malloc>
 8002f38:	1e02      	subs	r2, r0, #0
 8002f3a:	6328      	str	r0, [r5, #48]	; 0x30
 8002f3c:	d104      	bne.n	8002f48 <srand+0x24>
 8002f3e:	2146      	movs	r1, #70	; 0x46
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <srand+0x4c>)
 8002f42:	480c      	ldr	r0, [pc, #48]	; (8002f74 <srand+0x50>)
 8002f44:	f000 fae0 	bl	8003508 <__assert_func>
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <srand+0x54>)
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	6003      	str	r3, [r0, #0]
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <srand+0x58>)
 8002f50:	6043      	str	r3, [r0, #4]
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <srand+0x5c>)
 8002f54:	6083      	str	r3, [r0, #8]
 8002f56:	230b      	movs	r3, #11
 8002f58:	8183      	strh	r3, [r0, #12]
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	6110      	str	r0, [r2, #16]
 8002f5e:	6151      	str	r1, [r2, #20]
 8002f60:	2200      	movs	r2, #0
 8002f62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f64:	611c      	str	r4, [r3, #16]
 8002f66:	615a      	str	r2, [r3, #20]
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	20000064 	.word	0x20000064
 8002f70:	08004461 	.word	0x08004461
 8002f74:	08004478 	.word	0x08004478
 8002f78:	abcd330e 	.word	0xabcd330e
 8002f7c:	e66d1234 	.word	0xe66d1234
 8002f80:	0005deec 	.word	0x0005deec

08002f84 <std>:
 8002f84:	2300      	movs	r3, #0
 8002f86:	b510      	push	{r4, lr}
 8002f88:	0004      	movs	r4, r0
 8002f8a:	6003      	str	r3, [r0, #0]
 8002f8c:	6043      	str	r3, [r0, #4]
 8002f8e:	6083      	str	r3, [r0, #8]
 8002f90:	8181      	strh	r1, [r0, #12]
 8002f92:	6643      	str	r3, [r0, #100]	; 0x64
 8002f94:	81c2      	strh	r2, [r0, #14]
 8002f96:	6103      	str	r3, [r0, #16]
 8002f98:	6143      	str	r3, [r0, #20]
 8002f9a:	6183      	str	r3, [r0, #24]
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	305c      	adds	r0, #92	; 0x5c
 8002fa2:	f000 fa25 	bl	80033f0 <memset>
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <std+0x50>)
 8002fa8:	6224      	str	r4, [r4, #32]
 8002faa:	6263      	str	r3, [r4, #36]	; 0x24
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <std+0x54>)
 8002fae:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <std+0x58>)
 8002fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <std+0x5c>)
 8002fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <std+0x60>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d005      	beq.n	8002fca <std+0x46>
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <std+0x64>)
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	d002      	beq.n	8002fca <std+0x46>
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <std+0x68>)
 8002fc6:	429c      	cmp	r4, r3
 8002fc8:	d103      	bne.n	8002fd2 <std+0x4e>
 8002fca:	0020      	movs	r0, r4
 8002fcc:	3058      	adds	r0, #88	; 0x58
 8002fce:	f000 fa8f 	bl	80034f0 <__retarget_lock_init_recursive>
 8002fd2:	bd10      	pop	{r4, pc}
 8002fd4:	0800320d 	.word	0x0800320d
 8002fd8:	08003235 	.word	0x08003235
 8002fdc:	0800326d 	.word	0x0800326d
 8002fe0:	08003299 	.word	0x08003299
 8002fe4:	20000210 	.word	0x20000210
 8002fe8:	20000278 	.word	0x20000278
 8002fec:	200002e0 	.word	0x200002e0

08002ff0 <stdio_exit_handler>:
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4a03      	ldr	r2, [pc, #12]	; (8003000 <stdio_exit_handler+0x10>)
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <stdio_exit_handler+0x14>)
 8002ff6:	4804      	ldr	r0, [pc, #16]	; (8003008 <stdio_exit_handler+0x18>)
 8002ff8:	f000 f86c 	bl	80030d4 <_fwalk_sglue>
 8002ffc:	bd10      	pop	{r4, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	2000000c 	.word	0x2000000c
 8003004:	08003e2d 	.word	0x08003e2d
 8003008:	20000018 	.word	0x20000018

0800300c <cleanup_stdio>:
 800300c:	6841      	ldr	r1, [r0, #4]
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <cleanup_stdio+0x30>)
 8003010:	b510      	push	{r4, lr}
 8003012:	0004      	movs	r4, r0
 8003014:	4299      	cmp	r1, r3
 8003016:	d001      	beq.n	800301c <cleanup_stdio+0x10>
 8003018:	f000 ff08 	bl	8003e2c <_fflush_r>
 800301c:	68a1      	ldr	r1, [r4, #8]
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <cleanup_stdio+0x34>)
 8003020:	4299      	cmp	r1, r3
 8003022:	d002      	beq.n	800302a <cleanup_stdio+0x1e>
 8003024:	0020      	movs	r0, r4
 8003026:	f000 ff01 	bl	8003e2c <_fflush_r>
 800302a:	68e1      	ldr	r1, [r4, #12]
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <cleanup_stdio+0x38>)
 800302e:	4299      	cmp	r1, r3
 8003030:	d002      	beq.n	8003038 <cleanup_stdio+0x2c>
 8003032:	0020      	movs	r0, r4
 8003034:	f000 fefa 	bl	8003e2c <_fflush_r>
 8003038:	bd10      	pop	{r4, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	20000210 	.word	0x20000210
 8003040:	20000278 	.word	0x20000278
 8003044:	200002e0 	.word	0x200002e0

08003048 <global_stdio_init.part.0>:
 8003048:	b510      	push	{r4, lr}
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <global_stdio_init.part.0+0x28>)
 800304c:	4a09      	ldr	r2, [pc, #36]	; (8003074 <global_stdio_init.part.0+0x2c>)
 800304e:	2104      	movs	r1, #4
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	4809      	ldr	r0, [pc, #36]	; (8003078 <global_stdio_init.part.0+0x30>)
 8003054:	2200      	movs	r2, #0
 8003056:	f7ff ff95 	bl	8002f84 <std>
 800305a:	2201      	movs	r2, #1
 800305c:	2109      	movs	r1, #9
 800305e:	4807      	ldr	r0, [pc, #28]	; (800307c <global_stdio_init.part.0+0x34>)
 8003060:	f7ff ff90 	bl	8002f84 <std>
 8003064:	2202      	movs	r2, #2
 8003066:	2112      	movs	r1, #18
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <global_stdio_init.part.0+0x38>)
 800306a:	f7ff ff8b 	bl	8002f84 <std>
 800306e:	bd10      	pop	{r4, pc}
 8003070:	20000348 	.word	0x20000348
 8003074:	08002ff1 	.word	0x08002ff1
 8003078:	20000210 	.word	0x20000210
 800307c:	20000278 	.word	0x20000278
 8003080:	200002e0 	.word	0x200002e0

08003084 <__sfp_lock_acquire>:
 8003084:	b510      	push	{r4, lr}
 8003086:	4802      	ldr	r0, [pc, #8]	; (8003090 <__sfp_lock_acquire+0xc>)
 8003088:	f000 fa33 	bl	80034f2 <__retarget_lock_acquire_recursive>
 800308c:	bd10      	pop	{r4, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000351 	.word	0x20000351

08003094 <__sfp_lock_release>:
 8003094:	b510      	push	{r4, lr}
 8003096:	4802      	ldr	r0, [pc, #8]	; (80030a0 <__sfp_lock_release+0xc>)
 8003098:	f000 fa2c 	bl	80034f4 <__retarget_lock_release_recursive>
 800309c:	bd10      	pop	{r4, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	20000351 	.word	0x20000351

080030a4 <__sinit>:
 80030a4:	b510      	push	{r4, lr}
 80030a6:	0004      	movs	r4, r0
 80030a8:	f7ff ffec 	bl	8003084 <__sfp_lock_acquire>
 80030ac:	6a23      	ldr	r3, [r4, #32]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <__sinit+0x14>
 80030b2:	f7ff ffef 	bl	8003094 <__sfp_lock_release>
 80030b6:	bd10      	pop	{r4, pc}
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <__sinit+0x28>)
 80030ba:	6223      	str	r3, [r4, #32]
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__sinit+0x2c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f6      	bne.n	80030b2 <__sinit+0xe>
 80030c4:	f7ff ffc0 	bl	8003048 <global_stdio_init.part.0>
 80030c8:	e7f3      	b.n	80030b2 <__sinit+0xe>
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	0800300d 	.word	0x0800300d
 80030d0:	20000348 	.word	0x20000348

080030d4 <_fwalk_sglue>:
 80030d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030d6:	0014      	movs	r4, r2
 80030d8:	2600      	movs	r6, #0
 80030da:	9000      	str	r0, [sp, #0]
 80030dc:	9101      	str	r1, [sp, #4]
 80030de:	68a5      	ldr	r5, [r4, #8]
 80030e0:	6867      	ldr	r7, [r4, #4]
 80030e2:	3f01      	subs	r7, #1
 80030e4:	d504      	bpl.n	80030f0 <_fwalk_sglue+0x1c>
 80030e6:	6824      	ldr	r4, [r4, #0]
 80030e8:	2c00      	cmp	r4, #0
 80030ea:	d1f8      	bne.n	80030de <_fwalk_sglue+0xa>
 80030ec:	0030      	movs	r0, r6
 80030ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80030f0:	89ab      	ldrh	r3, [r5, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d908      	bls.n	8003108 <_fwalk_sglue+0x34>
 80030f6:	220e      	movs	r2, #14
 80030f8:	5eab      	ldrsh	r3, [r5, r2]
 80030fa:	3301      	adds	r3, #1
 80030fc:	d004      	beq.n	8003108 <_fwalk_sglue+0x34>
 80030fe:	0029      	movs	r1, r5
 8003100:	9800      	ldr	r0, [sp, #0]
 8003102:	9b01      	ldr	r3, [sp, #4]
 8003104:	4798      	blx	r3
 8003106:	4306      	orrs	r6, r0
 8003108:	3568      	adds	r5, #104	; 0x68
 800310a:	e7ea      	b.n	80030e2 <_fwalk_sglue+0xe>

0800310c <_puts_r>:
 800310c:	6a03      	ldr	r3, [r0, #32]
 800310e:	b570      	push	{r4, r5, r6, lr}
 8003110:	0005      	movs	r5, r0
 8003112:	000e      	movs	r6, r1
 8003114:	6884      	ldr	r4, [r0, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <_puts_r+0x12>
 800311a:	f7ff ffc3 	bl	80030a4 <__sinit>
 800311e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003120:	07db      	lsls	r3, r3, #31
 8003122:	d405      	bmi.n	8003130 <_puts_r+0x24>
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	059b      	lsls	r3, r3, #22
 8003128:	d402      	bmi.n	8003130 <_puts_r+0x24>
 800312a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312c:	f000 f9e1 	bl	80034f2 <__retarget_lock_acquire_recursive>
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	071b      	lsls	r3, r3, #28
 8003134:	d502      	bpl.n	800313c <_puts_r+0x30>
 8003136:	6923      	ldr	r3, [r4, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11f      	bne.n	800317c <_puts_r+0x70>
 800313c:	0021      	movs	r1, r4
 800313e:	0028      	movs	r0, r5
 8003140:	f000 f8f2 	bl	8003328 <__swsetup_r>
 8003144:	2800      	cmp	r0, #0
 8003146:	d019      	beq.n	800317c <_puts_r+0x70>
 8003148:	2501      	movs	r5, #1
 800314a:	426d      	negs	r5, r5
 800314c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800314e:	07db      	lsls	r3, r3, #31
 8003150:	d405      	bmi.n	800315e <_puts_r+0x52>
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	059b      	lsls	r3, r3, #22
 8003156:	d402      	bmi.n	800315e <_puts_r+0x52>
 8003158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315a:	f000 f9cb 	bl	80034f4 <__retarget_lock_release_recursive>
 800315e:	0028      	movs	r0, r5
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	3601      	adds	r6, #1
 8003164:	60a3      	str	r3, [r4, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da04      	bge.n	8003174 <_puts_r+0x68>
 800316a:	69a2      	ldr	r2, [r4, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	dc16      	bgt.n	800319e <_puts_r+0x92>
 8003170:	290a      	cmp	r1, #10
 8003172:	d014      	beq.n	800319e <_puts_r+0x92>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	6022      	str	r2, [r4, #0]
 800317a:	7019      	strb	r1, [r3, #0]
 800317c:	68a3      	ldr	r3, [r4, #8]
 800317e:	7831      	ldrb	r1, [r6, #0]
 8003180:	3b01      	subs	r3, #1
 8003182:	2900      	cmp	r1, #0
 8003184:	d1ed      	bne.n	8003162 <_puts_r+0x56>
 8003186:	60a3      	str	r3, [r4, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	da0f      	bge.n	80031ac <_puts_r+0xa0>
 800318c:	0028      	movs	r0, r5
 800318e:	0022      	movs	r2, r4
 8003190:	310a      	adds	r1, #10
 8003192:	f000 f887 	bl	80032a4 <__swbuf_r>
 8003196:	250a      	movs	r5, #10
 8003198:	3001      	adds	r0, #1
 800319a:	d1d7      	bne.n	800314c <_puts_r+0x40>
 800319c:	e7d4      	b.n	8003148 <_puts_r+0x3c>
 800319e:	0022      	movs	r2, r4
 80031a0:	0028      	movs	r0, r5
 80031a2:	f000 f87f 	bl	80032a4 <__swbuf_r>
 80031a6:	3001      	adds	r0, #1
 80031a8:	d1e8      	bne.n	800317c <_puts_r+0x70>
 80031aa:	e7cd      	b.n	8003148 <_puts_r+0x3c>
 80031ac:	250a      	movs	r5, #10
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	6022      	str	r2, [r4, #0]
 80031b4:	701d      	strb	r5, [r3, #0]
 80031b6:	e7c9      	b.n	800314c <_puts_r+0x40>

080031b8 <puts>:
 80031b8:	b510      	push	{r4, lr}
 80031ba:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <puts+0x10>)
 80031bc:	0001      	movs	r1, r0
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	f7ff ffa4 	bl	800310c <_puts_r>
 80031c4:	bd10      	pop	{r4, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	20000064 	.word	0x20000064

080031cc <siprintf>:
 80031cc:	b40e      	push	{r1, r2, r3}
 80031ce:	b500      	push	{lr}
 80031d0:	490b      	ldr	r1, [pc, #44]	; (8003200 <siprintf+0x34>)
 80031d2:	b09c      	sub	sp, #112	; 0x70
 80031d4:	ab1d      	add	r3, sp, #116	; 0x74
 80031d6:	9002      	str	r0, [sp, #8]
 80031d8:	9006      	str	r0, [sp, #24]
 80031da:	9107      	str	r1, [sp, #28]
 80031dc:	9104      	str	r1, [sp, #16]
 80031de:	4809      	ldr	r0, [pc, #36]	; (8003204 <siprintf+0x38>)
 80031e0:	4909      	ldr	r1, [pc, #36]	; (8003208 <siprintf+0x3c>)
 80031e2:	cb04      	ldmia	r3!, {r2}
 80031e4:	9105      	str	r1, [sp, #20]
 80031e6:	6800      	ldr	r0, [r0, #0]
 80031e8:	a902      	add	r1, sp, #8
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f000 fb14 	bl	8003818 <_svfiprintf_r>
 80031f0:	2200      	movs	r2, #0
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	b01c      	add	sp, #112	; 0x70
 80031f8:	bc08      	pop	{r3}
 80031fa:	b003      	add	sp, #12
 80031fc:	4718      	bx	r3
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	7fffffff 	.word	0x7fffffff
 8003204:	20000064 	.word	0x20000064
 8003208:	ffff0208 	.word	0xffff0208

0800320c <__sread>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	000c      	movs	r4, r1
 8003210:	250e      	movs	r5, #14
 8003212:	5f49      	ldrsh	r1, [r1, r5]
 8003214:	f000 f91a 	bl	800344c <_read_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	db03      	blt.n	8003224 <__sread+0x18>
 800321c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800321e:	181b      	adds	r3, r3, r0
 8003220:	6563      	str	r3, [r4, #84]	; 0x54
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	4a02      	ldr	r2, [pc, #8]	; (8003230 <__sread+0x24>)
 8003228:	4013      	ands	r3, r2
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	e7f9      	b.n	8003222 <__sread+0x16>
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	ffffefff 	.word	0xffffefff

08003234 <__swrite>:
 8003234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003236:	001f      	movs	r7, r3
 8003238:	898b      	ldrh	r3, [r1, #12]
 800323a:	0005      	movs	r5, r0
 800323c:	000c      	movs	r4, r1
 800323e:	0016      	movs	r6, r2
 8003240:	05db      	lsls	r3, r3, #23
 8003242:	d505      	bpl.n	8003250 <__swrite+0x1c>
 8003244:	230e      	movs	r3, #14
 8003246:	5ec9      	ldrsh	r1, [r1, r3]
 8003248:	2200      	movs	r2, #0
 800324a:	2302      	movs	r3, #2
 800324c:	f000 f8ea 	bl	8003424 <_lseek_r>
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	4a05      	ldr	r2, [pc, #20]	; (8003268 <__swrite+0x34>)
 8003254:	0028      	movs	r0, r5
 8003256:	4013      	ands	r3, r2
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	0032      	movs	r2, r6
 800325c:	230e      	movs	r3, #14
 800325e:	5ee1      	ldrsh	r1, [r4, r3]
 8003260:	003b      	movs	r3, r7
 8003262:	f000 f907 	bl	8003474 <_write_r>
 8003266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003268:	ffffefff 	.word	0xffffefff

0800326c <__sseek>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	000c      	movs	r4, r1
 8003270:	250e      	movs	r5, #14
 8003272:	5f49      	ldrsh	r1, [r1, r5]
 8003274:	f000 f8d6 	bl	8003424 <_lseek_r>
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	1c42      	adds	r2, r0, #1
 800327c:	d103      	bne.n	8003286 <__sseek+0x1a>
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <__sseek+0x28>)
 8003280:	4013      	ands	r3, r2
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	bd70      	pop	{r4, r5, r6, pc}
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	0152      	lsls	r2, r2, #5
 800328a:	4313      	orrs	r3, r2
 800328c:	81a3      	strh	r3, [r4, #12]
 800328e:	6560      	str	r0, [r4, #84]	; 0x54
 8003290:	e7f8      	b.n	8003284 <__sseek+0x18>
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	ffffefff 	.word	0xffffefff

08003298 <__sclose>:
 8003298:	b510      	push	{r4, lr}
 800329a:	230e      	movs	r3, #14
 800329c:	5ec9      	ldrsh	r1, [r1, r3]
 800329e:	f000 f8af 	bl	8003400 <_close_r>
 80032a2:	bd10      	pop	{r4, pc}

080032a4 <__swbuf_r>:
 80032a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a6:	0006      	movs	r6, r0
 80032a8:	000d      	movs	r5, r1
 80032aa:	0014      	movs	r4, r2
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d004      	beq.n	80032ba <__swbuf_r+0x16>
 80032b0:	6a03      	ldr	r3, [r0, #32]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <__swbuf_r+0x16>
 80032b6:	f7ff fef5 	bl	80030a4 <__sinit>
 80032ba:	69a3      	ldr	r3, [r4, #24]
 80032bc:	60a3      	str	r3, [r4, #8]
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	d528      	bpl.n	8003316 <__swbuf_r+0x72>
 80032c4:	6923      	ldr	r3, [r4, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d025      	beq.n	8003316 <__swbuf_r+0x72>
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	6820      	ldr	r0, [r4, #0]
 80032ce:	b2ef      	uxtb	r7, r5
 80032d0:	1ac0      	subs	r0, r0, r3
 80032d2:	6963      	ldr	r3, [r4, #20]
 80032d4:	b2ed      	uxtb	r5, r5
 80032d6:	4283      	cmp	r3, r0
 80032d8:	dc05      	bgt.n	80032e6 <__swbuf_r+0x42>
 80032da:	0021      	movs	r1, r4
 80032dc:	0030      	movs	r0, r6
 80032de:	f000 fda5 	bl	8003e2c <_fflush_r>
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d11d      	bne.n	8003322 <__swbuf_r+0x7e>
 80032e6:	68a3      	ldr	r3, [r4, #8]
 80032e8:	3001      	adds	r0, #1
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60a3      	str	r3, [r4, #8]
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	6022      	str	r2, [r4, #0]
 80032f4:	701f      	strb	r7, [r3, #0]
 80032f6:	6963      	ldr	r3, [r4, #20]
 80032f8:	4283      	cmp	r3, r0
 80032fa:	d004      	beq.n	8003306 <__swbuf_r+0x62>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	07db      	lsls	r3, r3, #31
 8003300:	d507      	bpl.n	8003312 <__swbuf_r+0x6e>
 8003302:	2d0a      	cmp	r5, #10
 8003304:	d105      	bne.n	8003312 <__swbuf_r+0x6e>
 8003306:	0021      	movs	r1, r4
 8003308:	0030      	movs	r0, r6
 800330a:	f000 fd8f 	bl	8003e2c <_fflush_r>
 800330e:	2800      	cmp	r0, #0
 8003310:	d107      	bne.n	8003322 <__swbuf_r+0x7e>
 8003312:	0028      	movs	r0, r5
 8003314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003316:	0021      	movs	r1, r4
 8003318:	0030      	movs	r0, r6
 800331a:	f000 f805 	bl	8003328 <__swsetup_r>
 800331e:	2800      	cmp	r0, #0
 8003320:	d0d3      	beq.n	80032ca <__swbuf_r+0x26>
 8003322:	2501      	movs	r5, #1
 8003324:	426d      	negs	r5, r5
 8003326:	e7f4      	b.n	8003312 <__swbuf_r+0x6e>

08003328 <__swsetup_r>:
 8003328:	4b30      	ldr	r3, [pc, #192]	; (80033ec <__swsetup_r+0xc4>)
 800332a:	b570      	push	{r4, r5, r6, lr}
 800332c:	0005      	movs	r5, r0
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	000c      	movs	r4, r1
 8003332:	2800      	cmp	r0, #0
 8003334:	d004      	beq.n	8003340 <__swsetup_r+0x18>
 8003336:	6a03      	ldr	r3, [r0, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <__swsetup_r+0x18>
 800333c:	f7ff feb2 	bl	80030a4 <__sinit>
 8003340:	230c      	movs	r3, #12
 8003342:	5ee2      	ldrsh	r2, [r4, r3]
 8003344:	b293      	uxth	r3, r2
 8003346:	0711      	lsls	r1, r2, #28
 8003348:	d423      	bmi.n	8003392 <__swsetup_r+0x6a>
 800334a:	06d9      	lsls	r1, r3, #27
 800334c:	d407      	bmi.n	800335e <__swsetup_r+0x36>
 800334e:	2309      	movs	r3, #9
 8003350:	2001      	movs	r0, #1
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	3337      	adds	r3, #55	; 0x37
 8003356:	4313      	orrs	r3, r2
 8003358:	81a3      	strh	r3, [r4, #12]
 800335a:	4240      	negs	r0, r0
 800335c:	bd70      	pop	{r4, r5, r6, pc}
 800335e:	075b      	lsls	r3, r3, #29
 8003360:	d513      	bpl.n	800338a <__swsetup_r+0x62>
 8003362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003364:	2900      	cmp	r1, #0
 8003366:	d008      	beq.n	800337a <__swsetup_r+0x52>
 8003368:	0023      	movs	r3, r4
 800336a:	3344      	adds	r3, #68	; 0x44
 800336c:	4299      	cmp	r1, r3
 800336e:	d002      	beq.n	8003376 <__swsetup_r+0x4e>
 8003370:	0028      	movs	r0, r5
 8003372:	f000 f8e7 	bl	8003544 <_free_r>
 8003376:	2300      	movs	r3, #0
 8003378:	6363      	str	r3, [r4, #52]	; 0x34
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	4393      	bics	r3, r2
 8003380:	81a3      	strh	r3, [r4, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	6063      	str	r3, [r4, #4]
 8003386:	6923      	ldr	r3, [r4, #16]
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	2308      	movs	r3, #8
 800338c:	89a2      	ldrh	r2, [r4, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	81a3      	strh	r3, [r4, #12]
 8003392:	6923      	ldr	r3, [r4, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <__swsetup_r+0x88>
 8003398:	21a0      	movs	r1, #160	; 0xa0
 800339a:	2280      	movs	r2, #128	; 0x80
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	0089      	lsls	r1, r1, #2
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	400b      	ands	r3, r1
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <__swsetup_r+0x88>
 80033a8:	0021      	movs	r1, r4
 80033aa:	0028      	movs	r0, r5
 80033ac:	f000 fda2 	bl	8003ef4 <__smakebuf_r>
 80033b0:	220c      	movs	r2, #12
 80033b2:	5ea3      	ldrsh	r3, [r4, r2]
 80033b4:	2001      	movs	r0, #1
 80033b6:	001a      	movs	r2, r3
 80033b8:	b299      	uxth	r1, r3
 80033ba:	4002      	ands	r2, r0
 80033bc:	4203      	tst	r3, r0
 80033be:	d00f      	beq.n	80033e0 <__swsetup_r+0xb8>
 80033c0:	2200      	movs	r2, #0
 80033c2:	60a2      	str	r2, [r4, #8]
 80033c4:	6962      	ldr	r2, [r4, #20]
 80033c6:	4252      	negs	r2, r2
 80033c8:	61a2      	str	r2, [r4, #24]
 80033ca:	2000      	movs	r0, #0
 80033cc:	6922      	ldr	r2, [r4, #16]
 80033ce:	4282      	cmp	r2, r0
 80033d0:	d1c4      	bne.n	800335c <__swsetup_r+0x34>
 80033d2:	0609      	lsls	r1, r1, #24
 80033d4:	d5c2      	bpl.n	800335c <__swsetup_r+0x34>
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	4313      	orrs	r3, r2
 80033da:	81a3      	strh	r3, [r4, #12]
 80033dc:	3801      	subs	r0, #1
 80033de:	e7bd      	b.n	800335c <__swsetup_r+0x34>
 80033e0:	0788      	lsls	r0, r1, #30
 80033e2:	d400      	bmi.n	80033e6 <__swsetup_r+0xbe>
 80033e4:	6962      	ldr	r2, [r4, #20]
 80033e6:	60a2      	str	r2, [r4, #8]
 80033e8:	e7ef      	b.n	80033ca <__swsetup_r+0xa2>
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	20000064 	.word	0x20000064

080033f0 <memset>:
 80033f0:	0003      	movs	r3, r0
 80033f2:	1882      	adds	r2, r0, r2
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	7019      	strb	r1, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <_close_r>:
 8003400:	2300      	movs	r3, #0
 8003402:	b570      	push	{r4, r5, r6, lr}
 8003404:	4d06      	ldr	r5, [pc, #24]	; (8003420 <_close_r+0x20>)
 8003406:	0004      	movs	r4, r0
 8003408:	0008      	movs	r0, r1
 800340a:	602b      	str	r3, [r5, #0]
 800340c:	f7fd fef0 	bl	80011f0 <_close>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d103      	bne.n	800341c <_close_r+0x1c>
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d000      	beq.n	800341c <_close_r+0x1c>
 800341a:	6023      	str	r3, [r4, #0]
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	2000034c 	.word	0x2000034c

08003424 <_lseek_r>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	0004      	movs	r4, r0
 8003428:	0008      	movs	r0, r1
 800342a:	0011      	movs	r1, r2
 800342c:	001a      	movs	r2, r3
 800342e:	2300      	movs	r3, #0
 8003430:	4d05      	ldr	r5, [pc, #20]	; (8003448 <_lseek_r+0x24>)
 8003432:	602b      	str	r3, [r5, #0]
 8003434:	f7fd fee6 	bl	8001204 <_lseek>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d103      	bne.n	8003444 <_lseek_r+0x20>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d000      	beq.n	8003444 <_lseek_r+0x20>
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	bd70      	pop	{r4, r5, r6, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	2000034c 	.word	0x2000034c

0800344c <_read_r>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	0004      	movs	r4, r0
 8003450:	0008      	movs	r0, r1
 8003452:	0011      	movs	r1, r2
 8003454:	001a      	movs	r2, r3
 8003456:	2300      	movs	r3, #0
 8003458:	4d05      	ldr	r5, [pc, #20]	; (8003470 <_read_r+0x24>)
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fd feae 	bl	80011bc <_read>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d103      	bne.n	800346c <_read_r+0x20>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d000      	beq.n	800346c <_read_r+0x20>
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	2000034c 	.word	0x2000034c

08003474 <_write_r>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	0004      	movs	r4, r0
 8003478:	0008      	movs	r0, r1
 800347a:	0011      	movs	r1, r2
 800347c:	001a      	movs	r2, r3
 800347e:	2300      	movs	r3, #0
 8003480:	4d05      	ldr	r5, [pc, #20]	; (8003498 <_write_r+0x24>)
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	f7fd fea7 	bl	80011d6 <_write>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d103      	bne.n	8003494 <_write_r+0x20>
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d000      	beq.n	8003494 <_write_r+0x20>
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	bd70      	pop	{r4, r5, r6, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	2000034c 	.word	0x2000034c

0800349c <__errno>:
 800349c:	4b01      	ldr	r3, [pc, #4]	; (80034a4 <__errno+0x8>)
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	4770      	bx	lr
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	20000064 	.word	0x20000064

080034a8 <__libc_init_array>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	2600      	movs	r6, #0
 80034ac:	4c0c      	ldr	r4, [pc, #48]	; (80034e0 <__libc_init_array+0x38>)
 80034ae:	4d0d      	ldr	r5, [pc, #52]	; (80034e4 <__libc_init_array+0x3c>)
 80034b0:	1b64      	subs	r4, r4, r5
 80034b2:	10a4      	asrs	r4, r4, #2
 80034b4:	42a6      	cmp	r6, r4
 80034b6:	d109      	bne.n	80034cc <__libc_init_array+0x24>
 80034b8:	2600      	movs	r6, #0
 80034ba:	f000 ff79 	bl	80043b0 <_init>
 80034be:	4c0a      	ldr	r4, [pc, #40]	; (80034e8 <__libc_init_array+0x40>)
 80034c0:	4d0a      	ldr	r5, [pc, #40]	; (80034ec <__libc_init_array+0x44>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	42a6      	cmp	r6, r4
 80034c8:	d105      	bne.n	80034d6 <__libc_init_array+0x2e>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	00b3      	lsls	r3, r6, #2
 80034ce:	58eb      	ldr	r3, [r5, r3]
 80034d0:	4798      	blx	r3
 80034d2:	3601      	adds	r6, #1
 80034d4:	e7ee      	b.n	80034b4 <__libc_init_array+0xc>
 80034d6:	00b3      	lsls	r3, r6, #2
 80034d8:	58eb      	ldr	r3, [r5, r3]
 80034da:	4798      	blx	r3
 80034dc:	3601      	adds	r6, #1
 80034de:	e7f2      	b.n	80034c6 <__libc_init_array+0x1e>
 80034e0:	08004548 	.word	0x08004548
 80034e4:	08004548 	.word	0x08004548
 80034e8:	0800454c 	.word	0x0800454c
 80034ec:	08004548 	.word	0x08004548

080034f0 <__retarget_lock_init_recursive>:
 80034f0:	4770      	bx	lr

080034f2 <__retarget_lock_acquire_recursive>:
 80034f2:	4770      	bx	lr

080034f4 <__retarget_lock_release_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <memcpy>:
 80034f6:	2300      	movs	r3, #0
 80034f8:	b510      	push	{r4, lr}
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d100      	bne.n	8003500 <memcpy+0xa>
 80034fe:	bd10      	pop	{r4, pc}
 8003500:	5ccc      	ldrb	r4, [r1, r3]
 8003502:	54c4      	strb	r4, [r0, r3]
 8003504:	3301      	adds	r3, #1
 8003506:	e7f8      	b.n	80034fa <memcpy+0x4>

08003508 <__assert_func>:
 8003508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800350a:	0014      	movs	r4, r2
 800350c:	001a      	movs	r2, r3
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <__assert_func+0x2c>)
 8003510:	0005      	movs	r5, r0
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	000e      	movs	r6, r1
 8003516:	68d8      	ldr	r0, [r3, #12]
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <__assert_func+0x30>)
 800351a:	2c00      	cmp	r4, #0
 800351c:	d101      	bne.n	8003522 <__assert_func+0x1a>
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <__assert_func+0x34>)
 8003520:	001c      	movs	r4, r3
 8003522:	4907      	ldr	r1, [pc, #28]	; (8003540 <__assert_func+0x38>)
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	9402      	str	r4, [sp, #8]
 8003528:	002b      	movs	r3, r5
 800352a:	9600      	str	r6, [sp, #0]
 800352c:	f000 fcaa 	bl	8003e84 <fiprintf>
 8003530:	f000 fd73 	bl	800401a <abort>
 8003534:	20000064 	.word	0x20000064
 8003538:	080044d0 	.word	0x080044d0
 800353c:	08004425 	.word	0x08004425
 8003540:	080044dd 	.word	0x080044dd

08003544 <_free_r>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	0005      	movs	r5, r0
 8003548:	2900      	cmp	r1, #0
 800354a:	d010      	beq.n	800356e <_free_r+0x2a>
 800354c:	1f0c      	subs	r4, r1, #4
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	da00      	bge.n	8003556 <_free_r+0x12>
 8003554:	18e4      	adds	r4, r4, r3
 8003556:	0028      	movs	r0, r5
 8003558:	f000 f8ec 	bl	8003734 <__malloc_lock>
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <_free_r+0x90>)
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <_free_r+0x2c>
 8003564:	6063      	str	r3, [r4, #4]
 8003566:	6014      	str	r4, [r2, #0]
 8003568:	0028      	movs	r0, r5
 800356a:	f000 f8eb 	bl	8003744 <__malloc_unlock>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	42a3      	cmp	r3, r4
 8003572:	d908      	bls.n	8003586 <_free_r+0x42>
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	1821      	adds	r1, r4, r0
 8003578:	428b      	cmp	r3, r1
 800357a:	d1f3      	bne.n	8003564 <_free_r+0x20>
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	1809      	adds	r1, r1, r0
 8003582:	6021      	str	r1, [r4, #0]
 8003584:	e7ee      	b.n	8003564 <_free_r+0x20>
 8003586:	001a      	movs	r2, r3
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <_free_r+0x4e>
 800358e:	42a3      	cmp	r3, r4
 8003590:	d9f9      	bls.n	8003586 <_free_r+0x42>
 8003592:	6811      	ldr	r1, [r2, #0]
 8003594:	1850      	adds	r0, r2, r1
 8003596:	42a0      	cmp	r0, r4
 8003598:	d10b      	bne.n	80035b2 <_free_r+0x6e>
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	1809      	adds	r1, r1, r0
 800359e:	1850      	adds	r0, r2, r1
 80035a0:	6011      	str	r1, [r2, #0]
 80035a2:	4283      	cmp	r3, r0
 80035a4:	d1e0      	bne.n	8003568 <_free_r+0x24>
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	1841      	adds	r1, r0, r1
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	6053      	str	r3, [r2, #4]
 80035b0:	e7da      	b.n	8003568 <_free_r+0x24>
 80035b2:	42a0      	cmp	r0, r4
 80035b4:	d902      	bls.n	80035bc <_free_r+0x78>
 80035b6:	230c      	movs	r3, #12
 80035b8:	602b      	str	r3, [r5, #0]
 80035ba:	e7d5      	b.n	8003568 <_free_r+0x24>
 80035bc:	6820      	ldr	r0, [r4, #0]
 80035be:	1821      	adds	r1, r4, r0
 80035c0:	428b      	cmp	r3, r1
 80035c2:	d103      	bne.n	80035cc <_free_r+0x88>
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	1809      	adds	r1, r1, r0
 80035ca:	6021      	str	r1, [r4, #0]
 80035cc:	6063      	str	r3, [r4, #4]
 80035ce:	6054      	str	r4, [r2, #4]
 80035d0:	e7ca      	b.n	8003568 <_free_r+0x24>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000354 	.word	0x20000354

080035d8 <malloc>:
 80035d8:	b510      	push	{r4, lr}
 80035da:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <malloc+0x10>)
 80035dc:	0001      	movs	r1, r0
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	f000 f826 	bl	8003630 <_malloc_r>
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	20000064 	.word	0x20000064

080035ec <sbrk_aligned>:
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4e0f      	ldr	r6, [pc, #60]	; (800362c <sbrk_aligned+0x40>)
 80035f0:	000d      	movs	r5, r1
 80035f2:	6831      	ldr	r1, [r6, #0]
 80035f4:	0004      	movs	r4, r0
 80035f6:	2900      	cmp	r1, #0
 80035f8:	d102      	bne.n	8003600 <sbrk_aligned+0x14>
 80035fa:	f000 fcf1 	bl	8003fe0 <_sbrk_r>
 80035fe:	6030      	str	r0, [r6, #0]
 8003600:	0029      	movs	r1, r5
 8003602:	0020      	movs	r0, r4
 8003604:	f000 fcec 	bl	8003fe0 <_sbrk_r>
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d00a      	beq.n	8003622 <sbrk_aligned+0x36>
 800360c:	2303      	movs	r3, #3
 800360e:	1cc5      	adds	r5, r0, #3
 8003610:	439d      	bics	r5, r3
 8003612:	42a8      	cmp	r0, r5
 8003614:	d007      	beq.n	8003626 <sbrk_aligned+0x3a>
 8003616:	1a29      	subs	r1, r5, r0
 8003618:	0020      	movs	r0, r4
 800361a:	f000 fce1 	bl	8003fe0 <_sbrk_r>
 800361e:	3001      	adds	r0, #1
 8003620:	d101      	bne.n	8003626 <sbrk_aligned+0x3a>
 8003622:	2501      	movs	r5, #1
 8003624:	426d      	negs	r5, r5
 8003626:	0028      	movs	r0, r5
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	20000358 	.word	0x20000358

08003630 <_malloc_r>:
 8003630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003632:	2203      	movs	r2, #3
 8003634:	1ccb      	adds	r3, r1, #3
 8003636:	4393      	bics	r3, r2
 8003638:	3308      	adds	r3, #8
 800363a:	0006      	movs	r6, r0
 800363c:	001f      	movs	r7, r3
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d238      	bcs.n	80036b4 <_malloc_r+0x84>
 8003642:	270c      	movs	r7, #12
 8003644:	42b9      	cmp	r1, r7
 8003646:	d837      	bhi.n	80036b8 <_malloc_r+0x88>
 8003648:	0030      	movs	r0, r6
 800364a:	f000 f873 	bl	8003734 <__malloc_lock>
 800364e:	4b38      	ldr	r3, [pc, #224]	; (8003730 <_malloc_r+0x100>)
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	001c      	movs	r4, r3
 8003656:	2c00      	cmp	r4, #0
 8003658:	d133      	bne.n	80036c2 <_malloc_r+0x92>
 800365a:	0039      	movs	r1, r7
 800365c:	0030      	movs	r0, r6
 800365e:	f7ff ffc5 	bl	80035ec <sbrk_aligned>
 8003662:	0004      	movs	r4, r0
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d15e      	bne.n	8003726 <_malloc_r+0xf6>
 8003668:	9b00      	ldr	r3, [sp, #0]
 800366a:	681c      	ldr	r4, [r3, #0]
 800366c:	0025      	movs	r5, r4
 800366e:	2d00      	cmp	r5, #0
 8003670:	d14e      	bne.n	8003710 <_malloc_r+0xe0>
 8003672:	2c00      	cmp	r4, #0
 8003674:	d051      	beq.n	800371a <_malloc_r+0xea>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	0029      	movs	r1, r5
 800367a:	18e3      	adds	r3, r4, r3
 800367c:	0030      	movs	r0, r6
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	f000 fcae 	bl	8003fe0 <_sbrk_r>
 8003684:	9b01      	ldr	r3, [sp, #4]
 8003686:	4283      	cmp	r3, r0
 8003688:	d147      	bne.n	800371a <_malloc_r+0xea>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	0030      	movs	r0, r6
 800368e:	1aff      	subs	r7, r7, r3
 8003690:	0039      	movs	r1, r7
 8003692:	f7ff ffab 	bl	80035ec <sbrk_aligned>
 8003696:	3001      	adds	r0, #1
 8003698:	d03f      	beq.n	800371a <_malloc_r+0xea>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	19db      	adds	r3, r3, r7
 800369e:	6023      	str	r3, [r4, #0]
 80036a0:	9b00      	ldr	r3, [sp, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d040      	beq.n	800372a <_malloc_r+0xfa>
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	42a2      	cmp	r2, r4
 80036ac:	d133      	bne.n	8003716 <_malloc_r+0xe6>
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e014      	b.n	80036de <_malloc_r+0xae>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	dac5      	bge.n	8003644 <_malloc_r+0x14>
 80036b8:	230c      	movs	r3, #12
 80036ba:	2500      	movs	r5, #0
 80036bc:	6033      	str	r3, [r6, #0]
 80036be:	0028      	movs	r0, r5
 80036c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036c2:	6821      	ldr	r1, [r4, #0]
 80036c4:	1bc9      	subs	r1, r1, r7
 80036c6:	d420      	bmi.n	800370a <_malloc_r+0xda>
 80036c8:	290b      	cmp	r1, #11
 80036ca:	d918      	bls.n	80036fe <_malloc_r+0xce>
 80036cc:	19e2      	adds	r2, r4, r7
 80036ce:	6027      	str	r7, [r4, #0]
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	d112      	bne.n	80036fa <_malloc_r+0xca>
 80036d4:	9b00      	ldr	r3, [sp, #0]
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	6011      	str	r1, [r2, #0]
 80036dc:	6053      	str	r3, [r2, #4]
 80036de:	0030      	movs	r0, r6
 80036e0:	0025      	movs	r5, r4
 80036e2:	f000 f82f 	bl	8003744 <__malloc_unlock>
 80036e6:	2207      	movs	r2, #7
 80036e8:	350b      	adds	r5, #11
 80036ea:	1d23      	adds	r3, r4, #4
 80036ec:	4395      	bics	r5, r2
 80036ee:	1aea      	subs	r2, r5, r3
 80036f0:	429d      	cmp	r5, r3
 80036f2:	d0e4      	beq.n	80036be <_malloc_r+0x8e>
 80036f4:	1b5b      	subs	r3, r3, r5
 80036f6:	50a3      	str	r3, [r4, r2]
 80036f8:	e7e1      	b.n	80036be <_malloc_r+0x8e>
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	e7ec      	b.n	80036d8 <_malloc_r+0xa8>
 80036fe:	6862      	ldr	r2, [r4, #4]
 8003700:	42a3      	cmp	r3, r4
 8003702:	d1d5      	bne.n	80036b0 <_malloc_r+0x80>
 8003704:	9b00      	ldr	r3, [sp, #0]
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e7e9      	b.n	80036de <_malloc_r+0xae>
 800370a:	0023      	movs	r3, r4
 800370c:	6864      	ldr	r4, [r4, #4]
 800370e:	e7a2      	b.n	8003656 <_malloc_r+0x26>
 8003710:	002c      	movs	r4, r5
 8003712:	686d      	ldr	r5, [r5, #4]
 8003714:	e7ab      	b.n	800366e <_malloc_r+0x3e>
 8003716:	0013      	movs	r3, r2
 8003718:	e7c4      	b.n	80036a4 <_malloc_r+0x74>
 800371a:	230c      	movs	r3, #12
 800371c:	0030      	movs	r0, r6
 800371e:	6033      	str	r3, [r6, #0]
 8003720:	f000 f810 	bl	8003744 <__malloc_unlock>
 8003724:	e7cb      	b.n	80036be <_malloc_r+0x8e>
 8003726:	6027      	str	r7, [r4, #0]
 8003728:	e7d9      	b.n	80036de <_malloc_r+0xae>
 800372a:	605b      	str	r3, [r3, #4]
 800372c:	deff      	udf	#255	; 0xff
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	20000354 	.word	0x20000354

08003734 <__malloc_lock>:
 8003734:	b510      	push	{r4, lr}
 8003736:	4802      	ldr	r0, [pc, #8]	; (8003740 <__malloc_lock+0xc>)
 8003738:	f7ff fedb 	bl	80034f2 <__retarget_lock_acquire_recursive>
 800373c:	bd10      	pop	{r4, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	20000350 	.word	0x20000350

08003744 <__malloc_unlock>:
 8003744:	b510      	push	{r4, lr}
 8003746:	4802      	ldr	r0, [pc, #8]	; (8003750 <__malloc_unlock+0xc>)
 8003748:	f7ff fed4 	bl	80034f4 <__retarget_lock_release_recursive>
 800374c:	bd10      	pop	{r4, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	20000350 	.word	0x20000350

08003754 <__ssputs_r>:
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	9203      	str	r2, [sp, #12]
 800375c:	688e      	ldr	r6, [r1, #8]
 800375e:	9a01      	ldr	r2, [sp, #4]
 8003760:	0007      	movs	r7, r0
 8003762:	000c      	movs	r4, r1
 8003764:	680b      	ldr	r3, [r1, #0]
 8003766:	4296      	cmp	r6, r2
 8003768:	d831      	bhi.n	80037ce <__ssputs_r+0x7a>
 800376a:	898a      	ldrh	r2, [r1, #12]
 800376c:	2190      	movs	r1, #144	; 0x90
 800376e:	00c9      	lsls	r1, r1, #3
 8003770:	420a      	tst	r2, r1
 8003772:	d029      	beq.n	80037c8 <__ssputs_r+0x74>
 8003774:	2003      	movs	r0, #3
 8003776:	6921      	ldr	r1, [r4, #16]
 8003778:	1a5b      	subs	r3, r3, r1
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	6963      	ldr	r3, [r4, #20]
 800377e:	4343      	muls	r3, r0
 8003780:	0fdd      	lsrs	r5, r3, #31
 8003782:	18ed      	adds	r5, r5, r3
 8003784:	9b01      	ldr	r3, [sp, #4]
 8003786:	9802      	ldr	r0, [sp, #8]
 8003788:	3301      	adds	r3, #1
 800378a:	181b      	adds	r3, r3, r0
 800378c:	106d      	asrs	r5, r5, #1
 800378e:	42ab      	cmp	r3, r5
 8003790:	d900      	bls.n	8003794 <__ssputs_r+0x40>
 8003792:	001d      	movs	r5, r3
 8003794:	0552      	lsls	r2, r2, #21
 8003796:	d529      	bpl.n	80037ec <__ssputs_r+0x98>
 8003798:	0029      	movs	r1, r5
 800379a:	0038      	movs	r0, r7
 800379c:	f7ff ff48 	bl	8003630 <_malloc_r>
 80037a0:	1e06      	subs	r6, r0, #0
 80037a2:	d02d      	beq.n	8003800 <__ssputs_r+0xac>
 80037a4:	9a02      	ldr	r2, [sp, #8]
 80037a6:	6921      	ldr	r1, [r4, #16]
 80037a8:	f7ff fea5 	bl	80034f6 <memcpy>
 80037ac:	89a2      	ldrh	r2, [r4, #12]
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <__ssputs_r+0xc0>)
 80037b0:	401a      	ands	r2, r3
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	4313      	orrs	r3, r2
 80037b6:	81a3      	strh	r3, [r4, #12]
 80037b8:	9b02      	ldr	r3, [sp, #8]
 80037ba:	6126      	str	r6, [r4, #16]
 80037bc:	18f6      	adds	r6, r6, r3
 80037be:	6026      	str	r6, [r4, #0]
 80037c0:	6165      	str	r5, [r4, #20]
 80037c2:	9e01      	ldr	r6, [sp, #4]
 80037c4:	1aed      	subs	r5, r5, r3
 80037c6:	60a5      	str	r5, [r4, #8]
 80037c8:	9b01      	ldr	r3, [sp, #4]
 80037ca:	429e      	cmp	r6, r3
 80037cc:	d900      	bls.n	80037d0 <__ssputs_r+0x7c>
 80037ce:	9e01      	ldr	r6, [sp, #4]
 80037d0:	0032      	movs	r2, r6
 80037d2:	9903      	ldr	r1, [sp, #12]
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	f000 fbcb 	bl	8003f70 <memmove>
 80037da:	2000      	movs	r0, #0
 80037dc:	68a3      	ldr	r3, [r4, #8]
 80037de:	1b9b      	subs	r3, r3, r6
 80037e0:	60a3      	str	r3, [r4, #8]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	199b      	adds	r3, r3, r6
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	b005      	add	sp, #20
 80037ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ec:	002a      	movs	r2, r5
 80037ee:	0038      	movs	r0, r7
 80037f0:	f000 fc1a 	bl	8004028 <_realloc_r>
 80037f4:	1e06      	subs	r6, r0, #0
 80037f6:	d1df      	bne.n	80037b8 <__ssputs_r+0x64>
 80037f8:	0038      	movs	r0, r7
 80037fa:	6921      	ldr	r1, [r4, #16]
 80037fc:	f7ff fea2 	bl	8003544 <_free_r>
 8003800:	230c      	movs	r3, #12
 8003802:	2001      	movs	r0, #1
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	89a2      	ldrh	r2, [r4, #12]
 8003808:	3334      	adds	r3, #52	; 0x34
 800380a:	4313      	orrs	r3, r2
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	4240      	negs	r0, r0
 8003810:	e7ea      	b.n	80037e8 <__ssputs_r+0x94>
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	fffffb7f 	.word	0xfffffb7f

08003818 <_svfiprintf_r>:
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	b0a1      	sub	sp, #132	; 0x84
 800381c:	9003      	str	r0, [sp, #12]
 800381e:	001d      	movs	r5, r3
 8003820:	898b      	ldrh	r3, [r1, #12]
 8003822:	000f      	movs	r7, r1
 8003824:	0016      	movs	r6, r2
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	d511      	bpl.n	800384e <_svfiprintf_r+0x36>
 800382a:	690b      	ldr	r3, [r1, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10e      	bne.n	800384e <_svfiprintf_r+0x36>
 8003830:	2140      	movs	r1, #64	; 0x40
 8003832:	f7ff fefd 	bl	8003630 <_malloc_r>
 8003836:	6038      	str	r0, [r7, #0]
 8003838:	6138      	str	r0, [r7, #16]
 800383a:	2800      	cmp	r0, #0
 800383c:	d105      	bne.n	800384a <_svfiprintf_r+0x32>
 800383e:	230c      	movs	r3, #12
 8003840:	9a03      	ldr	r2, [sp, #12]
 8003842:	3801      	subs	r0, #1
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	b021      	add	sp, #132	; 0x84
 8003848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384a:	2340      	movs	r3, #64	; 0x40
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	2300      	movs	r3, #0
 8003850:	ac08      	add	r4, sp, #32
 8003852:	6163      	str	r3, [r4, #20]
 8003854:	3320      	adds	r3, #32
 8003856:	7663      	strb	r3, [r4, #25]
 8003858:	3310      	adds	r3, #16
 800385a:	76a3      	strb	r3, [r4, #26]
 800385c:	9507      	str	r5, [sp, #28]
 800385e:	0035      	movs	r5, r6
 8003860:	782b      	ldrb	r3, [r5, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <_svfiprintf_r+0x52>
 8003866:	2b25      	cmp	r3, #37	; 0x25
 8003868:	d148      	bne.n	80038fc <_svfiprintf_r+0xe4>
 800386a:	1bab      	subs	r3, r5, r6
 800386c:	9305      	str	r3, [sp, #20]
 800386e:	42b5      	cmp	r5, r6
 8003870:	d00b      	beq.n	800388a <_svfiprintf_r+0x72>
 8003872:	0032      	movs	r2, r6
 8003874:	0039      	movs	r1, r7
 8003876:	9803      	ldr	r0, [sp, #12]
 8003878:	f7ff ff6c 	bl	8003754 <__ssputs_r>
 800387c:	3001      	adds	r0, #1
 800387e:	d100      	bne.n	8003882 <_svfiprintf_r+0x6a>
 8003880:	e0af      	b.n	80039e2 <_svfiprintf_r+0x1ca>
 8003882:	6963      	ldr	r3, [r4, #20]
 8003884:	9a05      	ldr	r2, [sp, #20]
 8003886:	189b      	adds	r3, r3, r2
 8003888:	6163      	str	r3, [r4, #20]
 800388a:	782b      	ldrb	r3, [r5, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d100      	bne.n	8003892 <_svfiprintf_r+0x7a>
 8003890:	e0a7      	b.n	80039e2 <_svfiprintf_r+0x1ca>
 8003892:	2201      	movs	r2, #1
 8003894:	2300      	movs	r3, #0
 8003896:	4252      	negs	r2, r2
 8003898:	6062      	str	r2, [r4, #4]
 800389a:	a904      	add	r1, sp, #16
 800389c:	3254      	adds	r2, #84	; 0x54
 800389e:	1852      	adds	r2, r2, r1
 80038a0:	1c6e      	adds	r6, r5, #1
 80038a2:	6023      	str	r3, [r4, #0]
 80038a4:	60e3      	str	r3, [r4, #12]
 80038a6:	60a3      	str	r3, [r4, #8]
 80038a8:	7013      	strb	r3, [r2, #0]
 80038aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80038ac:	4b55      	ldr	r3, [pc, #340]	; (8003a04 <_svfiprintf_r+0x1ec>)
 80038ae:	2205      	movs	r2, #5
 80038b0:	0018      	movs	r0, r3
 80038b2:	7831      	ldrb	r1, [r6, #0]
 80038b4:	9305      	str	r3, [sp, #20]
 80038b6:	f000 fba5 	bl	8004004 <memchr>
 80038ba:	1c75      	adds	r5, r6, #1
 80038bc:	2800      	cmp	r0, #0
 80038be:	d11f      	bne.n	8003900 <_svfiprintf_r+0xe8>
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	06d3      	lsls	r3, r2, #27
 80038c4:	d504      	bpl.n	80038d0 <_svfiprintf_r+0xb8>
 80038c6:	2353      	movs	r3, #83	; 0x53
 80038c8:	a904      	add	r1, sp, #16
 80038ca:	185b      	adds	r3, r3, r1
 80038cc:	2120      	movs	r1, #32
 80038ce:	7019      	strb	r1, [r3, #0]
 80038d0:	0713      	lsls	r3, r2, #28
 80038d2:	d504      	bpl.n	80038de <_svfiprintf_r+0xc6>
 80038d4:	2353      	movs	r3, #83	; 0x53
 80038d6:	a904      	add	r1, sp, #16
 80038d8:	185b      	adds	r3, r3, r1
 80038da:	212b      	movs	r1, #43	; 0x2b
 80038dc:	7019      	strb	r1, [r3, #0]
 80038de:	7833      	ldrb	r3, [r6, #0]
 80038e0:	2b2a      	cmp	r3, #42	; 0x2a
 80038e2:	d016      	beq.n	8003912 <_svfiprintf_r+0xfa>
 80038e4:	0035      	movs	r5, r6
 80038e6:	2100      	movs	r1, #0
 80038e8:	200a      	movs	r0, #10
 80038ea:	68e3      	ldr	r3, [r4, #12]
 80038ec:	782a      	ldrb	r2, [r5, #0]
 80038ee:	1c6e      	adds	r6, r5, #1
 80038f0:	3a30      	subs	r2, #48	; 0x30
 80038f2:	2a09      	cmp	r2, #9
 80038f4:	d94e      	bls.n	8003994 <_svfiprintf_r+0x17c>
 80038f6:	2900      	cmp	r1, #0
 80038f8:	d111      	bne.n	800391e <_svfiprintf_r+0x106>
 80038fa:	e017      	b.n	800392c <_svfiprintf_r+0x114>
 80038fc:	3501      	adds	r5, #1
 80038fe:	e7af      	b.n	8003860 <_svfiprintf_r+0x48>
 8003900:	9b05      	ldr	r3, [sp, #20]
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	1ac0      	subs	r0, r0, r3
 8003906:	2301      	movs	r3, #1
 8003908:	4083      	lsls	r3, r0
 800390a:	4313      	orrs	r3, r2
 800390c:	002e      	movs	r6, r5
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	e7cc      	b.n	80038ac <_svfiprintf_r+0x94>
 8003912:	9b07      	ldr	r3, [sp, #28]
 8003914:	1d19      	adds	r1, r3, #4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	9107      	str	r1, [sp, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	db01      	blt.n	8003922 <_svfiprintf_r+0x10a>
 800391e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003920:	e004      	b.n	800392c <_svfiprintf_r+0x114>
 8003922:	425b      	negs	r3, r3
 8003924:	60e3      	str	r3, [r4, #12]
 8003926:	2302      	movs	r3, #2
 8003928:	4313      	orrs	r3, r2
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	782b      	ldrb	r3, [r5, #0]
 800392e:	2b2e      	cmp	r3, #46	; 0x2e
 8003930:	d10a      	bne.n	8003948 <_svfiprintf_r+0x130>
 8003932:	786b      	ldrb	r3, [r5, #1]
 8003934:	2b2a      	cmp	r3, #42	; 0x2a
 8003936:	d135      	bne.n	80039a4 <_svfiprintf_r+0x18c>
 8003938:	9b07      	ldr	r3, [sp, #28]
 800393a:	3502      	adds	r5, #2
 800393c:	1d1a      	adds	r2, r3, #4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	9207      	str	r2, [sp, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db2b      	blt.n	800399e <_svfiprintf_r+0x186>
 8003946:	9309      	str	r3, [sp, #36]	; 0x24
 8003948:	4e2f      	ldr	r6, [pc, #188]	; (8003a08 <_svfiprintf_r+0x1f0>)
 800394a:	2203      	movs	r2, #3
 800394c:	0030      	movs	r0, r6
 800394e:	7829      	ldrb	r1, [r5, #0]
 8003950:	f000 fb58 	bl	8004004 <memchr>
 8003954:	2800      	cmp	r0, #0
 8003956:	d006      	beq.n	8003966 <_svfiprintf_r+0x14e>
 8003958:	2340      	movs	r3, #64	; 0x40
 800395a:	1b80      	subs	r0, r0, r6
 800395c:	4083      	lsls	r3, r0
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	3501      	adds	r5, #1
 8003962:	4313      	orrs	r3, r2
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	7829      	ldrb	r1, [r5, #0]
 8003968:	2206      	movs	r2, #6
 800396a:	4828      	ldr	r0, [pc, #160]	; (8003a0c <_svfiprintf_r+0x1f4>)
 800396c:	1c6e      	adds	r6, r5, #1
 800396e:	7621      	strb	r1, [r4, #24]
 8003970:	f000 fb48 	bl	8004004 <memchr>
 8003974:	2800      	cmp	r0, #0
 8003976:	d03c      	beq.n	80039f2 <_svfiprintf_r+0x1da>
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <_svfiprintf_r+0x1f8>)
 800397a:	2b00      	cmp	r3, #0
 800397c:	d125      	bne.n	80039ca <_svfiprintf_r+0x1b2>
 800397e:	2207      	movs	r2, #7
 8003980:	9b07      	ldr	r3, [sp, #28]
 8003982:	3307      	adds	r3, #7
 8003984:	4393      	bics	r3, r2
 8003986:	3308      	adds	r3, #8
 8003988:	9307      	str	r3, [sp, #28]
 800398a:	6963      	ldr	r3, [r4, #20]
 800398c:	9a04      	ldr	r2, [sp, #16]
 800398e:	189b      	adds	r3, r3, r2
 8003990:	6163      	str	r3, [r4, #20]
 8003992:	e764      	b.n	800385e <_svfiprintf_r+0x46>
 8003994:	4343      	muls	r3, r0
 8003996:	0035      	movs	r5, r6
 8003998:	2101      	movs	r1, #1
 800399a:	189b      	adds	r3, r3, r2
 800399c:	e7a6      	b.n	80038ec <_svfiprintf_r+0xd4>
 800399e:	2301      	movs	r3, #1
 80039a0:	425b      	negs	r3, r3
 80039a2:	e7d0      	b.n	8003946 <_svfiprintf_r+0x12e>
 80039a4:	2300      	movs	r3, #0
 80039a6:	200a      	movs	r0, #10
 80039a8:	001a      	movs	r2, r3
 80039aa:	3501      	adds	r5, #1
 80039ac:	6063      	str	r3, [r4, #4]
 80039ae:	7829      	ldrb	r1, [r5, #0]
 80039b0:	1c6e      	adds	r6, r5, #1
 80039b2:	3930      	subs	r1, #48	; 0x30
 80039b4:	2909      	cmp	r1, #9
 80039b6:	d903      	bls.n	80039c0 <_svfiprintf_r+0x1a8>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0c5      	beq.n	8003948 <_svfiprintf_r+0x130>
 80039bc:	9209      	str	r2, [sp, #36]	; 0x24
 80039be:	e7c3      	b.n	8003948 <_svfiprintf_r+0x130>
 80039c0:	4342      	muls	r2, r0
 80039c2:	0035      	movs	r5, r6
 80039c4:	2301      	movs	r3, #1
 80039c6:	1852      	adds	r2, r2, r1
 80039c8:	e7f1      	b.n	80039ae <_svfiprintf_r+0x196>
 80039ca:	aa07      	add	r2, sp, #28
 80039cc:	9200      	str	r2, [sp, #0]
 80039ce:	0021      	movs	r1, r4
 80039d0:	003a      	movs	r2, r7
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <_svfiprintf_r+0x1fc>)
 80039d4:	9803      	ldr	r0, [sp, #12]
 80039d6:	e000      	b.n	80039da <_svfiprintf_r+0x1c2>
 80039d8:	bf00      	nop
 80039da:	9004      	str	r0, [sp, #16]
 80039dc:	9b04      	ldr	r3, [sp, #16]
 80039de:	3301      	adds	r3, #1
 80039e0:	d1d3      	bne.n	800398a <_svfiprintf_r+0x172>
 80039e2:	89bb      	ldrh	r3, [r7, #12]
 80039e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80039e6:	065b      	lsls	r3, r3, #25
 80039e8:	d400      	bmi.n	80039ec <_svfiprintf_r+0x1d4>
 80039ea:	e72c      	b.n	8003846 <_svfiprintf_r+0x2e>
 80039ec:	2001      	movs	r0, #1
 80039ee:	4240      	negs	r0, r0
 80039f0:	e729      	b.n	8003846 <_svfiprintf_r+0x2e>
 80039f2:	aa07      	add	r2, sp, #28
 80039f4:	9200      	str	r2, [sp, #0]
 80039f6:	0021      	movs	r1, r4
 80039f8:	003a      	movs	r2, r7
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <_svfiprintf_r+0x1fc>)
 80039fc:	9803      	ldr	r0, [sp, #12]
 80039fe:	f000 f87b 	bl	8003af8 <_printf_i>
 8003a02:	e7ea      	b.n	80039da <_svfiprintf_r+0x1c2>
 8003a04:	0800450c 	.word	0x0800450c
 8003a08:	08004512 	.word	0x08004512
 8003a0c:	08004516 	.word	0x08004516
 8003a10:	00000000 	.word	0x00000000
 8003a14:	08003755 	.word	0x08003755

08003a18 <_printf_common>:
 8003a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a1a:	0016      	movs	r6, r2
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	688a      	ldr	r2, [r1, #8]
 8003a20:	690b      	ldr	r3, [r1, #16]
 8003a22:	000c      	movs	r4, r1
 8003a24:	9000      	str	r0, [sp, #0]
 8003a26:	4293      	cmp	r3, r2
 8003a28:	da00      	bge.n	8003a2c <_printf_common+0x14>
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	0022      	movs	r2, r4
 8003a2e:	6033      	str	r3, [r6, #0]
 8003a30:	3243      	adds	r2, #67	; 0x43
 8003a32:	7812      	ldrb	r2, [r2, #0]
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	d001      	beq.n	8003a3c <_printf_common+0x24>
 8003a38:	3301      	adds	r3, #1
 8003a3a:	6033      	str	r3, [r6, #0]
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	069b      	lsls	r3, r3, #26
 8003a40:	d502      	bpl.n	8003a48 <_printf_common+0x30>
 8003a42:	6833      	ldr	r3, [r6, #0]
 8003a44:	3302      	adds	r3, #2
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	2306      	movs	r3, #6
 8003a4c:	0015      	movs	r5, r2
 8003a4e:	401d      	ands	r5, r3
 8003a50:	421a      	tst	r2, r3
 8003a52:	d027      	beq.n	8003aa4 <_printf_common+0x8c>
 8003a54:	0023      	movs	r3, r4
 8003a56:	3343      	adds	r3, #67	; 0x43
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	4193      	sbcs	r3, r2
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	0692      	lsls	r2, r2, #26
 8003a62:	d430      	bmi.n	8003ac6 <_printf_common+0xae>
 8003a64:	0022      	movs	r2, r4
 8003a66:	9901      	ldr	r1, [sp, #4]
 8003a68:	9800      	ldr	r0, [sp, #0]
 8003a6a:	9d08      	ldr	r5, [sp, #32]
 8003a6c:	3243      	adds	r2, #67	; 0x43
 8003a6e:	47a8      	blx	r5
 8003a70:	3001      	adds	r0, #1
 8003a72:	d025      	beq.n	8003ac0 <_printf_common+0xa8>
 8003a74:	2206      	movs	r2, #6
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	2500      	movs	r5, #0
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d105      	bne.n	8003a8c <_printf_common+0x74>
 8003a80:	6833      	ldr	r3, [r6, #0]
 8003a82:	68e5      	ldr	r5, [r4, #12]
 8003a84:	1aed      	subs	r5, r5, r3
 8003a86:	43eb      	mvns	r3, r5
 8003a88:	17db      	asrs	r3, r3, #31
 8003a8a:	401d      	ands	r5, r3
 8003a8c:	68a3      	ldr	r3, [r4, #8]
 8003a8e:	6922      	ldr	r2, [r4, #16]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	dd01      	ble.n	8003a98 <_printf_common+0x80>
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	18ed      	adds	r5, r5, r3
 8003a98:	2600      	movs	r6, #0
 8003a9a:	42b5      	cmp	r5, r6
 8003a9c:	d120      	bne.n	8003ae0 <_printf_common+0xc8>
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	e010      	b.n	8003ac4 <_printf_common+0xac>
 8003aa2:	3501      	adds	r5, #1
 8003aa4:	68e3      	ldr	r3, [r4, #12]
 8003aa6:	6832      	ldr	r2, [r6, #0]
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	42ab      	cmp	r3, r5
 8003aac:	ddd2      	ble.n	8003a54 <_printf_common+0x3c>
 8003aae:	0022      	movs	r2, r4
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	9901      	ldr	r1, [sp, #4]
 8003ab4:	9800      	ldr	r0, [sp, #0]
 8003ab6:	9f08      	ldr	r7, [sp, #32]
 8003ab8:	3219      	adds	r2, #25
 8003aba:	47b8      	blx	r7
 8003abc:	3001      	adds	r0, #1
 8003abe:	d1f0      	bne.n	8003aa2 <_printf_common+0x8a>
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	4240      	negs	r0, r0
 8003ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ac6:	2030      	movs	r0, #48	; 0x30
 8003ac8:	18e1      	adds	r1, r4, r3
 8003aca:	3143      	adds	r1, #67	; 0x43
 8003acc:	7008      	strb	r0, [r1, #0]
 8003ace:	0021      	movs	r1, r4
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	3145      	adds	r1, #69	; 0x45
 8003ad4:	7809      	ldrb	r1, [r1, #0]
 8003ad6:	18a2      	adds	r2, r4, r2
 8003ad8:	3243      	adds	r2, #67	; 0x43
 8003ada:	3302      	adds	r3, #2
 8003adc:	7011      	strb	r1, [r2, #0]
 8003ade:	e7c1      	b.n	8003a64 <_printf_common+0x4c>
 8003ae0:	0022      	movs	r2, r4
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	9901      	ldr	r1, [sp, #4]
 8003ae6:	9800      	ldr	r0, [sp, #0]
 8003ae8:	9f08      	ldr	r7, [sp, #32]
 8003aea:	321a      	adds	r2, #26
 8003aec:	47b8      	blx	r7
 8003aee:	3001      	adds	r0, #1
 8003af0:	d0e6      	beq.n	8003ac0 <_printf_common+0xa8>
 8003af2:	3601      	adds	r6, #1
 8003af4:	e7d1      	b.n	8003a9a <_printf_common+0x82>
	...

08003af8 <_printf_i>:
 8003af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	9206      	str	r2, [sp, #24]
 8003afe:	000a      	movs	r2, r1
 8003b00:	3243      	adds	r2, #67	; 0x43
 8003b02:	9307      	str	r3, [sp, #28]
 8003b04:	9005      	str	r0, [sp, #20]
 8003b06:	9204      	str	r2, [sp, #16]
 8003b08:	7e0a      	ldrb	r2, [r1, #24]
 8003b0a:	000c      	movs	r4, r1
 8003b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b0e:	2a78      	cmp	r2, #120	; 0x78
 8003b10:	d809      	bhi.n	8003b26 <_printf_i+0x2e>
 8003b12:	2a62      	cmp	r2, #98	; 0x62
 8003b14:	d80b      	bhi.n	8003b2e <_printf_i+0x36>
 8003b16:	2a00      	cmp	r2, #0
 8003b18:	d100      	bne.n	8003b1c <_printf_i+0x24>
 8003b1a:	e0be      	b.n	8003c9a <_printf_i+0x1a2>
 8003b1c:	497c      	ldr	r1, [pc, #496]	; (8003d10 <_printf_i+0x218>)
 8003b1e:	9103      	str	r1, [sp, #12]
 8003b20:	2a58      	cmp	r2, #88	; 0x58
 8003b22:	d100      	bne.n	8003b26 <_printf_i+0x2e>
 8003b24:	e093      	b.n	8003c4e <_printf_i+0x156>
 8003b26:	0026      	movs	r6, r4
 8003b28:	3642      	adds	r6, #66	; 0x42
 8003b2a:	7032      	strb	r2, [r6, #0]
 8003b2c:	e022      	b.n	8003b74 <_printf_i+0x7c>
 8003b2e:	0010      	movs	r0, r2
 8003b30:	3863      	subs	r0, #99	; 0x63
 8003b32:	2815      	cmp	r0, #21
 8003b34:	d8f7      	bhi.n	8003b26 <_printf_i+0x2e>
 8003b36:	f7fc fafb 	bl	8000130 <__gnu_thumb1_case_shi>
 8003b3a:	0016      	.short	0x0016
 8003b3c:	fff6001f 	.word	0xfff6001f
 8003b40:	fff6fff6 	.word	0xfff6fff6
 8003b44:	001ffff6 	.word	0x001ffff6
 8003b48:	fff6fff6 	.word	0xfff6fff6
 8003b4c:	fff6fff6 	.word	0xfff6fff6
 8003b50:	003600a3 	.word	0x003600a3
 8003b54:	fff60083 	.word	0xfff60083
 8003b58:	00b4fff6 	.word	0x00b4fff6
 8003b5c:	0036fff6 	.word	0x0036fff6
 8003b60:	fff6fff6 	.word	0xfff6fff6
 8003b64:	0087      	.short	0x0087
 8003b66:	0026      	movs	r6, r4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	3642      	adds	r6, #66	; 0x42
 8003b6c:	1d11      	adds	r1, r2, #4
 8003b6e:	6019      	str	r1, [r3, #0]
 8003b70:	6813      	ldr	r3, [r2, #0]
 8003b72:	7033      	strb	r3, [r6, #0]
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0a2      	b.n	8003cbe <_printf_i+0x1c6>
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	6809      	ldr	r1, [r1, #0]
 8003b7c:	1d02      	adds	r2, r0, #4
 8003b7e:	060d      	lsls	r5, r1, #24
 8003b80:	d50b      	bpl.n	8003b9a <_printf_i+0xa2>
 8003b82:	6805      	ldr	r5, [r0, #0]
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	2d00      	cmp	r5, #0
 8003b88:	da03      	bge.n	8003b92 <_printf_i+0x9a>
 8003b8a:	232d      	movs	r3, #45	; 0x2d
 8003b8c:	9a04      	ldr	r2, [sp, #16]
 8003b8e:	426d      	negs	r5, r5
 8003b90:	7013      	strb	r3, [r2, #0]
 8003b92:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <_printf_i+0x218>)
 8003b94:	270a      	movs	r7, #10
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	e01b      	b.n	8003bd2 <_printf_i+0xda>
 8003b9a:	6805      	ldr	r5, [r0, #0]
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	0649      	lsls	r1, r1, #25
 8003ba0:	d5f1      	bpl.n	8003b86 <_printf_i+0x8e>
 8003ba2:	b22d      	sxth	r5, r5
 8003ba4:	e7ef      	b.n	8003b86 <_printf_i+0x8e>
 8003ba6:	680d      	ldr	r5, [r1, #0]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	1d08      	adds	r0, r1, #4
 8003bac:	6018      	str	r0, [r3, #0]
 8003bae:	062e      	lsls	r6, r5, #24
 8003bb0:	d501      	bpl.n	8003bb6 <_printf_i+0xbe>
 8003bb2:	680d      	ldr	r5, [r1, #0]
 8003bb4:	e003      	b.n	8003bbe <_printf_i+0xc6>
 8003bb6:	066d      	lsls	r5, r5, #25
 8003bb8:	d5fb      	bpl.n	8003bb2 <_printf_i+0xba>
 8003bba:	680d      	ldr	r5, [r1, #0]
 8003bbc:	b2ad      	uxth	r5, r5
 8003bbe:	4b54      	ldr	r3, [pc, #336]	; (8003d10 <_printf_i+0x218>)
 8003bc0:	2708      	movs	r7, #8
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	2a6f      	cmp	r2, #111	; 0x6f
 8003bc6:	d000      	beq.n	8003bca <_printf_i+0xd2>
 8003bc8:	3702      	adds	r7, #2
 8003bca:	0023      	movs	r3, r4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	3343      	adds	r3, #67	; 0x43
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	6863      	ldr	r3, [r4, #4]
 8003bd4:	60a3      	str	r3, [r4, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	db03      	blt.n	8003be2 <_printf_i+0xea>
 8003bda:	2104      	movs	r1, #4
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	438a      	bics	r2, r1
 8003be0:	6022      	str	r2, [r4, #0]
 8003be2:	2d00      	cmp	r5, #0
 8003be4:	d102      	bne.n	8003bec <_printf_i+0xf4>
 8003be6:	9e04      	ldr	r6, [sp, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <_printf_i+0x10e>
 8003bec:	9e04      	ldr	r6, [sp, #16]
 8003bee:	0028      	movs	r0, r5
 8003bf0:	0039      	movs	r1, r7
 8003bf2:	f7fc fb2d 	bl	8000250 <__aeabi_uidivmod>
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	3e01      	subs	r6, #1
 8003bfa:	5c5b      	ldrb	r3, [r3, r1]
 8003bfc:	7033      	strb	r3, [r6, #0]
 8003bfe:	002b      	movs	r3, r5
 8003c00:	0005      	movs	r5, r0
 8003c02:	429f      	cmp	r7, r3
 8003c04:	d9f3      	bls.n	8003bee <_printf_i+0xf6>
 8003c06:	2f08      	cmp	r7, #8
 8003c08:	d109      	bne.n	8003c1e <_printf_i+0x126>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	07db      	lsls	r3, r3, #31
 8003c0e:	d506      	bpl.n	8003c1e <_printf_i+0x126>
 8003c10:	6862      	ldr	r2, [r4, #4]
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	dc02      	bgt.n	8003c1e <_printf_i+0x126>
 8003c18:	2330      	movs	r3, #48	; 0x30
 8003c1a:	3e01      	subs	r6, #1
 8003c1c:	7033      	strb	r3, [r6, #0]
 8003c1e:	9b04      	ldr	r3, [sp, #16]
 8003c20:	1b9b      	subs	r3, r3, r6
 8003c22:	6123      	str	r3, [r4, #16]
 8003c24:	9b07      	ldr	r3, [sp, #28]
 8003c26:	0021      	movs	r1, r4
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	9805      	ldr	r0, [sp, #20]
 8003c2c:	9b06      	ldr	r3, [sp, #24]
 8003c2e:	aa09      	add	r2, sp, #36	; 0x24
 8003c30:	f7ff fef2 	bl	8003a18 <_printf_common>
 8003c34:	3001      	adds	r0, #1
 8003c36:	d147      	bne.n	8003cc8 <_printf_i+0x1d0>
 8003c38:	2001      	movs	r0, #1
 8003c3a:	4240      	negs	r0, r0
 8003c3c:	b00b      	add	sp, #44	; 0x2c
 8003c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c40:	2220      	movs	r2, #32
 8003c42:	6809      	ldr	r1, [r1, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	6022      	str	r2, [r4, #0]
 8003c48:	2278      	movs	r2, #120	; 0x78
 8003c4a:	4932      	ldr	r1, [pc, #200]	; (8003d14 <_printf_i+0x21c>)
 8003c4c:	9103      	str	r1, [sp, #12]
 8003c4e:	0021      	movs	r1, r4
 8003c50:	3145      	adds	r1, #69	; 0x45
 8003c52:	700a      	strb	r2, [r1, #0]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	c920      	ldmia	r1!, {r5}
 8003c5a:	0610      	lsls	r0, r2, #24
 8003c5c:	d402      	bmi.n	8003c64 <_printf_i+0x16c>
 8003c5e:	0650      	lsls	r0, r2, #25
 8003c60:	d500      	bpl.n	8003c64 <_printf_i+0x16c>
 8003c62:	b2ad      	uxth	r5, r5
 8003c64:	6019      	str	r1, [r3, #0]
 8003c66:	07d3      	lsls	r3, r2, #31
 8003c68:	d502      	bpl.n	8003c70 <_printf_i+0x178>
 8003c6a:	2320      	movs	r3, #32
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	2710      	movs	r7, #16
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	d1a9      	bne.n	8003bca <_printf_i+0xd2>
 8003c76:	2220      	movs	r2, #32
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	e7a4      	b.n	8003bca <_printf_i+0xd2>
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	680d      	ldr	r5, [r1, #0]
 8003c84:	1d10      	adds	r0, r2, #4
 8003c86:	6949      	ldr	r1, [r1, #20]
 8003c88:	6018      	str	r0, [r3, #0]
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	062e      	lsls	r6, r5, #24
 8003c8e:	d501      	bpl.n	8003c94 <_printf_i+0x19c>
 8003c90:	6019      	str	r1, [r3, #0]
 8003c92:	e002      	b.n	8003c9a <_printf_i+0x1a2>
 8003c94:	066d      	lsls	r5, r5, #25
 8003c96:	d5fb      	bpl.n	8003c90 <_printf_i+0x198>
 8003c98:	8019      	strh	r1, [r3, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9e04      	ldr	r6, [sp, #16]
 8003c9e:	6123      	str	r3, [r4, #16]
 8003ca0:	e7c0      	b.n	8003c24 <_printf_i+0x12c>
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	1d11      	adds	r1, r2, #4
 8003ca6:	6019      	str	r1, [r3, #0]
 8003ca8:	6816      	ldr	r6, [r2, #0]
 8003caa:	2100      	movs	r1, #0
 8003cac:	0030      	movs	r0, r6
 8003cae:	6862      	ldr	r2, [r4, #4]
 8003cb0:	f000 f9a8 	bl	8004004 <memchr>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	d001      	beq.n	8003cbc <_printf_i+0x1c4>
 8003cb8:	1b80      	subs	r0, r0, r6
 8003cba:	6060      	str	r0, [r4, #4]
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9a04      	ldr	r2, [sp, #16]
 8003cc4:	7013      	strb	r3, [r2, #0]
 8003cc6:	e7ad      	b.n	8003c24 <_printf_i+0x12c>
 8003cc8:	0032      	movs	r2, r6
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	9906      	ldr	r1, [sp, #24]
 8003cce:	9805      	ldr	r0, [sp, #20]
 8003cd0:	9d07      	ldr	r5, [sp, #28]
 8003cd2:	47a8      	blx	r5
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d0af      	beq.n	8003c38 <_printf_i+0x140>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	079b      	lsls	r3, r3, #30
 8003cdc:	d415      	bmi.n	8003d0a <_printf_i+0x212>
 8003cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce0:	68e0      	ldr	r0, [r4, #12]
 8003ce2:	4298      	cmp	r0, r3
 8003ce4:	daaa      	bge.n	8003c3c <_printf_i+0x144>
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	e7a8      	b.n	8003c3c <_printf_i+0x144>
 8003cea:	0022      	movs	r2, r4
 8003cec:	2301      	movs	r3, #1
 8003cee:	9906      	ldr	r1, [sp, #24]
 8003cf0:	9805      	ldr	r0, [sp, #20]
 8003cf2:	9e07      	ldr	r6, [sp, #28]
 8003cf4:	3219      	adds	r2, #25
 8003cf6:	47b0      	blx	r6
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d09d      	beq.n	8003c38 <_printf_i+0x140>
 8003cfc:	3501      	adds	r5, #1
 8003cfe:	68e3      	ldr	r3, [r4, #12]
 8003d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	42ab      	cmp	r3, r5
 8003d06:	dcf0      	bgt.n	8003cea <_printf_i+0x1f2>
 8003d08:	e7e9      	b.n	8003cde <_printf_i+0x1e6>
 8003d0a:	2500      	movs	r5, #0
 8003d0c:	e7f7      	b.n	8003cfe <_printf_i+0x206>
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	0800451d 	.word	0x0800451d
 8003d14:	0800452e 	.word	0x0800452e

08003d18 <__sflush_r>:
 8003d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d1a:	898b      	ldrh	r3, [r1, #12]
 8003d1c:	0005      	movs	r5, r0
 8003d1e:	000c      	movs	r4, r1
 8003d20:	071a      	lsls	r2, r3, #28
 8003d22:	d45c      	bmi.n	8003dde <__sflush_r+0xc6>
 8003d24:	684a      	ldr	r2, [r1, #4]
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	dc04      	bgt.n	8003d34 <__sflush_r+0x1c>
 8003d2a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	dc01      	bgt.n	8003d34 <__sflush_r+0x1c>
 8003d30:	2000      	movs	r0, #0
 8003d32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d36:	2f00      	cmp	r7, #0
 8003d38:	d0fa      	beq.n	8003d30 <__sflush_r+0x18>
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2080      	movs	r0, #128	; 0x80
 8003d3e:	682e      	ldr	r6, [r5, #0]
 8003d40:	602a      	str	r2, [r5, #0]
 8003d42:	001a      	movs	r2, r3
 8003d44:	0140      	lsls	r0, r0, #5
 8003d46:	6a21      	ldr	r1, [r4, #32]
 8003d48:	4002      	ands	r2, r0
 8003d4a:	4203      	tst	r3, r0
 8003d4c:	d034      	beq.n	8003db8 <__sflush_r+0xa0>
 8003d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	075b      	lsls	r3, r3, #29
 8003d54:	d506      	bpl.n	8003d64 <__sflush_r+0x4c>
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	1ac0      	subs	r0, r0, r3
 8003d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <__sflush_r+0x4c>
 8003d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d62:	1ac0      	subs	r0, r0, r3
 8003d64:	0002      	movs	r2, r0
 8003d66:	2300      	movs	r3, #0
 8003d68:	0028      	movs	r0, r5
 8003d6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003d6c:	6a21      	ldr	r1, [r4, #32]
 8003d6e:	47b8      	blx	r7
 8003d70:	89a2      	ldrh	r2, [r4, #12]
 8003d72:	1c43      	adds	r3, r0, #1
 8003d74:	d106      	bne.n	8003d84 <__sflush_r+0x6c>
 8003d76:	6829      	ldr	r1, [r5, #0]
 8003d78:	291d      	cmp	r1, #29
 8003d7a:	d82c      	bhi.n	8003dd6 <__sflush_r+0xbe>
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <__sflush_r+0x110>)
 8003d7e:	410b      	asrs	r3, r1
 8003d80:	07db      	lsls	r3, r3, #31
 8003d82:	d428      	bmi.n	8003dd6 <__sflush_r+0xbe>
 8003d84:	2300      	movs	r3, #0
 8003d86:	6063      	str	r3, [r4, #4]
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	04d2      	lsls	r2, r2, #19
 8003d8e:	d505      	bpl.n	8003d9c <__sflush_r+0x84>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d102      	bne.n	8003d9a <__sflush_r+0x82>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d100      	bne.n	8003d9c <__sflush_r+0x84>
 8003d9a:	6560      	str	r0, [r4, #84]	; 0x54
 8003d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d9e:	602e      	str	r6, [r5, #0]
 8003da0:	2900      	cmp	r1, #0
 8003da2:	d0c5      	beq.n	8003d30 <__sflush_r+0x18>
 8003da4:	0023      	movs	r3, r4
 8003da6:	3344      	adds	r3, #68	; 0x44
 8003da8:	4299      	cmp	r1, r3
 8003daa:	d002      	beq.n	8003db2 <__sflush_r+0x9a>
 8003dac:	0028      	movs	r0, r5
 8003dae:	f7ff fbc9 	bl	8003544 <_free_r>
 8003db2:	2000      	movs	r0, #0
 8003db4:	6360      	str	r0, [r4, #52]	; 0x34
 8003db6:	e7bc      	b.n	8003d32 <__sflush_r+0x1a>
 8003db8:	2301      	movs	r3, #1
 8003dba:	0028      	movs	r0, r5
 8003dbc:	47b8      	blx	r7
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d1c6      	bne.n	8003d50 <__sflush_r+0x38>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0c3      	beq.n	8003d50 <__sflush_r+0x38>
 8003dc8:	2b1d      	cmp	r3, #29
 8003dca:	d001      	beq.n	8003dd0 <__sflush_r+0xb8>
 8003dcc:	2b16      	cmp	r3, #22
 8003dce:	d101      	bne.n	8003dd4 <__sflush_r+0xbc>
 8003dd0:	602e      	str	r6, [r5, #0]
 8003dd2:	e7ad      	b.n	8003d30 <__sflush_r+0x18>
 8003dd4:	89a2      	ldrh	r2, [r4, #12]
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	e7a9      	b.n	8003d32 <__sflush_r+0x1a>
 8003dde:	690e      	ldr	r6, [r1, #16]
 8003de0:	2e00      	cmp	r6, #0
 8003de2:	d0a5      	beq.n	8003d30 <__sflush_r+0x18>
 8003de4:	680f      	ldr	r7, [r1, #0]
 8003de6:	600e      	str	r6, [r1, #0]
 8003de8:	1bba      	subs	r2, r7, r6
 8003dea:	9201      	str	r2, [sp, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	079b      	lsls	r3, r3, #30
 8003df0:	d100      	bne.n	8003df4 <__sflush_r+0xdc>
 8003df2:	694a      	ldr	r2, [r1, #20]
 8003df4:	60a2      	str	r2, [r4, #8]
 8003df6:	9b01      	ldr	r3, [sp, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	dd99      	ble.n	8003d30 <__sflush_r+0x18>
 8003dfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dfe:	0032      	movs	r2, r6
 8003e00:	001f      	movs	r7, r3
 8003e02:	0028      	movs	r0, r5
 8003e04:	9b01      	ldr	r3, [sp, #4]
 8003e06:	6a21      	ldr	r1, [r4, #32]
 8003e08:	47b8      	blx	r7
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	dc06      	bgt.n	8003e1c <__sflush_r+0x104>
 8003e0e:	2340      	movs	r3, #64	; 0x40
 8003e10:	2001      	movs	r0, #1
 8003e12:	89a2      	ldrh	r2, [r4, #12]
 8003e14:	4240      	negs	r0, r0
 8003e16:	4313      	orrs	r3, r2
 8003e18:	81a3      	strh	r3, [r4, #12]
 8003e1a:	e78a      	b.n	8003d32 <__sflush_r+0x1a>
 8003e1c:	9b01      	ldr	r3, [sp, #4]
 8003e1e:	1836      	adds	r6, r6, r0
 8003e20:	1a1b      	subs	r3, r3, r0
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	e7e7      	b.n	8003df6 <__sflush_r+0xde>
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	dfbffffe 	.word	0xdfbffffe

08003e2c <_fflush_r>:
 8003e2c:	690b      	ldr	r3, [r1, #16]
 8003e2e:	b570      	push	{r4, r5, r6, lr}
 8003e30:	0005      	movs	r5, r0
 8003e32:	000c      	movs	r4, r1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <_fflush_r+0x12>
 8003e38:	2500      	movs	r5, #0
 8003e3a:	0028      	movs	r0, r5
 8003e3c:	bd70      	pop	{r4, r5, r6, pc}
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d004      	beq.n	8003e4c <_fflush_r+0x20>
 8003e42:	6a03      	ldr	r3, [r0, #32]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <_fflush_r+0x20>
 8003e48:	f7ff f92c 	bl	80030a4 <__sinit>
 8003e4c:	220c      	movs	r2, #12
 8003e4e:	5ea3      	ldrsh	r3, [r4, r2]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f1      	beq.n	8003e38 <_fflush_r+0xc>
 8003e54:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e56:	07d2      	lsls	r2, r2, #31
 8003e58:	d404      	bmi.n	8003e64 <_fflush_r+0x38>
 8003e5a:	059b      	lsls	r3, r3, #22
 8003e5c:	d402      	bmi.n	8003e64 <_fflush_r+0x38>
 8003e5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e60:	f7ff fb47 	bl	80034f2 <__retarget_lock_acquire_recursive>
 8003e64:	0028      	movs	r0, r5
 8003e66:	0021      	movs	r1, r4
 8003e68:	f7ff ff56 	bl	8003d18 <__sflush_r>
 8003e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e6e:	0005      	movs	r5, r0
 8003e70:	07db      	lsls	r3, r3, #31
 8003e72:	d4e2      	bmi.n	8003e3a <_fflush_r+0xe>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	059b      	lsls	r3, r3, #22
 8003e78:	d4df      	bmi.n	8003e3a <_fflush_r+0xe>
 8003e7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7c:	f7ff fb3a 	bl	80034f4 <__retarget_lock_release_recursive>
 8003e80:	e7db      	b.n	8003e3a <_fflush_r+0xe>
	...

08003e84 <fiprintf>:
 8003e84:	b40e      	push	{r1, r2, r3}
 8003e86:	b517      	push	{r0, r1, r2, r4, lr}
 8003e88:	4c05      	ldr	r4, [pc, #20]	; (8003ea0 <fiprintf+0x1c>)
 8003e8a:	ab05      	add	r3, sp, #20
 8003e8c:	cb04      	ldmia	r3!, {r2}
 8003e8e:	0001      	movs	r1, r0
 8003e90:	6820      	ldr	r0, [r4, #0]
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	f000 f91e 	bl	80040d4 <_vfiprintf_r>
 8003e98:	bc1e      	pop	{r1, r2, r3, r4}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	b003      	add	sp, #12
 8003e9e:	4718      	bx	r3
 8003ea0:	20000064 	.word	0x20000064

08003ea4 <__swhatbuf_r>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	000e      	movs	r6, r1
 8003ea8:	001d      	movs	r5, r3
 8003eaa:	230e      	movs	r3, #14
 8003eac:	5ec9      	ldrsh	r1, [r1, r3]
 8003eae:	0014      	movs	r4, r2
 8003eb0:	b096      	sub	sp, #88	; 0x58
 8003eb2:	2900      	cmp	r1, #0
 8003eb4:	da0c      	bge.n	8003ed0 <__swhatbuf_r+0x2c>
 8003eb6:	89b2      	ldrh	r2, [r6, #12]
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	0011      	movs	r1, r2
 8003ebc:	4019      	ands	r1, r3
 8003ebe:	421a      	tst	r2, r3
 8003ec0:	d013      	beq.n	8003eea <__swhatbuf_r+0x46>
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	3b40      	subs	r3, #64	; 0x40
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	6029      	str	r1, [r5, #0]
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	b016      	add	sp, #88	; 0x58
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	466a      	mov	r2, sp
 8003ed2:	f000 f861 	bl	8003f98 <_fstat_r>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	dbed      	blt.n	8003eb6 <__swhatbuf_r+0x12>
 8003eda:	23f0      	movs	r3, #240	; 0xf0
 8003edc:	9901      	ldr	r1, [sp, #4]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	4019      	ands	r1, r3
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <__swhatbuf_r+0x4c>)
 8003ee4:	18c9      	adds	r1, r1, r3
 8003ee6:	424b      	negs	r3, r1
 8003ee8:	4159      	adcs	r1, r3
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	e7ea      	b.n	8003ec6 <__swhatbuf_r+0x22>
 8003ef0:	ffffe000 	.word	0xffffe000

08003ef4 <__smakebuf_r>:
 8003ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ef6:	2602      	movs	r6, #2
 8003ef8:	898b      	ldrh	r3, [r1, #12]
 8003efa:	0005      	movs	r5, r0
 8003efc:	000c      	movs	r4, r1
 8003efe:	4233      	tst	r3, r6
 8003f00:	d006      	beq.n	8003f10 <__smakebuf_r+0x1c>
 8003f02:	0023      	movs	r3, r4
 8003f04:	3347      	adds	r3, #71	; 0x47
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	6163      	str	r3, [r4, #20]
 8003f0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003f10:	466a      	mov	r2, sp
 8003f12:	ab01      	add	r3, sp, #4
 8003f14:	f7ff ffc6 	bl	8003ea4 <__swhatbuf_r>
 8003f18:	9900      	ldr	r1, [sp, #0]
 8003f1a:	0007      	movs	r7, r0
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	f7ff fb87 	bl	8003630 <_malloc_r>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d108      	bne.n	8003f38 <__smakebuf_r+0x44>
 8003f26:	220c      	movs	r2, #12
 8003f28:	5ea3      	ldrsh	r3, [r4, r2]
 8003f2a:	059a      	lsls	r2, r3, #22
 8003f2c:	d4ef      	bmi.n	8003f0e <__smakebuf_r+0x1a>
 8003f2e:	2203      	movs	r2, #3
 8003f30:	4393      	bics	r3, r2
 8003f32:	431e      	orrs	r6, r3
 8003f34:	81a6      	strh	r6, [r4, #12]
 8003f36:	e7e4      	b.n	8003f02 <__smakebuf_r+0xe>
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	89a2      	ldrh	r2, [r4, #12]
 8003f3c:	6020      	str	r0, [r4, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	9b00      	ldr	r3, [sp, #0]
 8003f44:	6120      	str	r0, [r4, #16]
 8003f46:	6163      	str	r3, [r4, #20]
 8003f48:	9b01      	ldr	r3, [sp, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <__smakebuf_r+0x74>
 8003f4e:	0028      	movs	r0, r5
 8003f50:	230e      	movs	r3, #14
 8003f52:	5ee1      	ldrsh	r1, [r4, r3]
 8003f54:	f000 f832 	bl	8003fbc <_isatty_r>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d005      	beq.n	8003f68 <__smakebuf_r+0x74>
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	89a2      	ldrh	r2, [r4, #12]
 8003f60:	439a      	bics	r2, r3
 8003f62:	3b02      	subs	r3, #2
 8003f64:	4313      	orrs	r3, r2
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	433b      	orrs	r3, r7
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	e7ce      	b.n	8003f0e <__smakebuf_r+0x1a>

08003f70 <memmove>:
 8003f70:	b510      	push	{r4, lr}
 8003f72:	4288      	cmp	r0, r1
 8003f74:	d902      	bls.n	8003f7c <memmove+0xc>
 8003f76:	188b      	adds	r3, r1, r2
 8003f78:	4298      	cmp	r0, r3
 8003f7a:	d303      	bcc.n	8003f84 <memmove+0x14>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e007      	b.n	8003f90 <memmove+0x20>
 8003f80:	5c8b      	ldrb	r3, [r1, r2]
 8003f82:	5483      	strb	r3, [r0, r2]
 8003f84:	3a01      	subs	r2, #1
 8003f86:	d2fb      	bcs.n	8003f80 <memmove+0x10>
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	5ccc      	ldrb	r4, [r1, r3]
 8003f8c:	54c4      	strb	r4, [r0, r3]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1fa      	bne.n	8003f8a <memmove+0x1a>
 8003f94:	e7f8      	b.n	8003f88 <memmove+0x18>
	...

08003f98 <_fstat_r>:
 8003f98:	2300      	movs	r3, #0
 8003f9a:	b570      	push	{r4, r5, r6, lr}
 8003f9c:	4d06      	ldr	r5, [pc, #24]	; (8003fb8 <_fstat_r+0x20>)
 8003f9e:	0004      	movs	r4, r0
 8003fa0:	0008      	movs	r0, r1
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	f7fd f926 	bl	80011f6 <_fstat>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	d103      	bne.n	8003fb6 <_fstat_r+0x1e>
 8003fae:	682b      	ldr	r3, [r5, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d000      	beq.n	8003fb6 <_fstat_r+0x1e>
 8003fb4:	6023      	str	r3, [r4, #0]
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	2000034c 	.word	0x2000034c

08003fbc <_isatty_r>:
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	b570      	push	{r4, r5, r6, lr}
 8003fc0:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_isatty_r+0x20>)
 8003fc2:	0004      	movs	r4, r0
 8003fc4:	0008      	movs	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fd f91a 	bl	8001200 <_isatty>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d103      	bne.n	8003fd8 <_isatty_r+0x1c>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d000      	beq.n	8003fd8 <_isatty_r+0x1c>
 8003fd6:	6023      	str	r3, [r4, #0]
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	2000034c 	.word	0x2000034c

08003fe0 <_sbrk_r>:
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	b570      	push	{r4, r5, r6, lr}
 8003fe4:	4d06      	ldr	r5, [pc, #24]	; (8004000 <_sbrk_r+0x20>)
 8003fe6:	0004      	movs	r4, r0
 8003fe8:	0008      	movs	r0, r1
 8003fea:	602b      	str	r3, [r5, #0]
 8003fec:	f7fd f90c 	bl	8001208 <_sbrk>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d103      	bne.n	8003ffc <_sbrk_r+0x1c>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d000      	beq.n	8003ffc <_sbrk_r+0x1c>
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	2000034c 	.word	0x2000034c

08004004 <memchr>:
 8004004:	b2c9      	uxtb	r1, r1
 8004006:	1882      	adds	r2, r0, r2
 8004008:	4290      	cmp	r0, r2
 800400a:	d101      	bne.n	8004010 <memchr+0xc>
 800400c:	2000      	movs	r0, #0
 800400e:	4770      	bx	lr
 8004010:	7803      	ldrb	r3, [r0, #0]
 8004012:	428b      	cmp	r3, r1
 8004014:	d0fb      	beq.n	800400e <memchr+0xa>
 8004016:	3001      	adds	r0, #1
 8004018:	e7f6      	b.n	8004008 <memchr+0x4>

0800401a <abort>:
 800401a:	2006      	movs	r0, #6
 800401c:	b510      	push	{r4, lr}
 800401e:	f000 f99f 	bl	8004360 <raise>
 8004022:	2001      	movs	r0, #1
 8004024:	f7fd f8c4 	bl	80011b0 <_exit>

08004028 <_realloc_r>:
 8004028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800402a:	0007      	movs	r7, r0
 800402c:	000e      	movs	r6, r1
 800402e:	0014      	movs	r4, r2
 8004030:	2900      	cmp	r1, #0
 8004032:	d105      	bne.n	8004040 <_realloc_r+0x18>
 8004034:	0011      	movs	r1, r2
 8004036:	f7ff fafb 	bl	8003630 <_malloc_r>
 800403a:	0005      	movs	r5, r0
 800403c:	0028      	movs	r0, r5
 800403e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004040:	2a00      	cmp	r2, #0
 8004042:	d103      	bne.n	800404c <_realloc_r+0x24>
 8004044:	f7ff fa7e 	bl	8003544 <_free_r>
 8004048:	0025      	movs	r5, r4
 800404a:	e7f7      	b.n	800403c <_realloc_r+0x14>
 800404c:	f000 f9a8 	bl	80043a0 <_malloc_usable_size_r>
 8004050:	9001      	str	r0, [sp, #4]
 8004052:	4284      	cmp	r4, r0
 8004054:	d803      	bhi.n	800405e <_realloc_r+0x36>
 8004056:	0035      	movs	r5, r6
 8004058:	0843      	lsrs	r3, r0, #1
 800405a:	42a3      	cmp	r3, r4
 800405c:	d3ee      	bcc.n	800403c <_realloc_r+0x14>
 800405e:	0021      	movs	r1, r4
 8004060:	0038      	movs	r0, r7
 8004062:	f7ff fae5 	bl	8003630 <_malloc_r>
 8004066:	1e05      	subs	r5, r0, #0
 8004068:	d0e8      	beq.n	800403c <_realloc_r+0x14>
 800406a:	9b01      	ldr	r3, [sp, #4]
 800406c:	0022      	movs	r2, r4
 800406e:	429c      	cmp	r4, r3
 8004070:	d900      	bls.n	8004074 <_realloc_r+0x4c>
 8004072:	001a      	movs	r2, r3
 8004074:	0031      	movs	r1, r6
 8004076:	0028      	movs	r0, r5
 8004078:	f7ff fa3d 	bl	80034f6 <memcpy>
 800407c:	0031      	movs	r1, r6
 800407e:	0038      	movs	r0, r7
 8004080:	f7ff fa60 	bl	8003544 <_free_r>
 8004084:	e7da      	b.n	800403c <_realloc_r+0x14>

08004086 <__sfputc_r>:
 8004086:	6893      	ldr	r3, [r2, #8]
 8004088:	b510      	push	{r4, lr}
 800408a:	3b01      	subs	r3, #1
 800408c:	6093      	str	r3, [r2, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da04      	bge.n	800409c <__sfputc_r+0x16>
 8004092:	6994      	ldr	r4, [r2, #24]
 8004094:	42a3      	cmp	r3, r4
 8004096:	db07      	blt.n	80040a8 <__sfputc_r+0x22>
 8004098:	290a      	cmp	r1, #10
 800409a:	d005      	beq.n	80040a8 <__sfputc_r+0x22>
 800409c:	6813      	ldr	r3, [r2, #0]
 800409e:	1c58      	adds	r0, r3, #1
 80040a0:	6010      	str	r0, [r2, #0]
 80040a2:	7019      	strb	r1, [r3, #0]
 80040a4:	0008      	movs	r0, r1
 80040a6:	bd10      	pop	{r4, pc}
 80040a8:	f7ff f8fc 	bl	80032a4 <__swbuf_r>
 80040ac:	0001      	movs	r1, r0
 80040ae:	e7f9      	b.n	80040a4 <__sfputc_r+0x1e>

080040b0 <__sfputs_r>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	0006      	movs	r6, r0
 80040b4:	000f      	movs	r7, r1
 80040b6:	0014      	movs	r4, r2
 80040b8:	18d5      	adds	r5, r2, r3
 80040ba:	42ac      	cmp	r4, r5
 80040bc:	d101      	bne.n	80040c2 <__sfputs_r+0x12>
 80040be:	2000      	movs	r0, #0
 80040c0:	e007      	b.n	80040d2 <__sfputs_r+0x22>
 80040c2:	7821      	ldrb	r1, [r4, #0]
 80040c4:	003a      	movs	r2, r7
 80040c6:	0030      	movs	r0, r6
 80040c8:	f7ff ffdd 	bl	8004086 <__sfputc_r>
 80040cc:	3401      	adds	r4, #1
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	d1f3      	bne.n	80040ba <__sfputs_r+0xa>
 80040d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040d4 <_vfiprintf_r>:
 80040d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d6:	b0a1      	sub	sp, #132	; 0x84
 80040d8:	000f      	movs	r7, r1
 80040da:	0015      	movs	r5, r2
 80040dc:	001e      	movs	r6, r3
 80040de:	9003      	str	r0, [sp, #12]
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d004      	beq.n	80040ee <_vfiprintf_r+0x1a>
 80040e4:	6a03      	ldr	r3, [r0, #32]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <_vfiprintf_r+0x1a>
 80040ea:	f7fe ffdb 	bl	80030a4 <__sinit>
 80040ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f0:	07db      	lsls	r3, r3, #31
 80040f2:	d405      	bmi.n	8004100 <_vfiprintf_r+0x2c>
 80040f4:	89bb      	ldrh	r3, [r7, #12]
 80040f6:	059b      	lsls	r3, r3, #22
 80040f8:	d402      	bmi.n	8004100 <_vfiprintf_r+0x2c>
 80040fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80040fc:	f7ff f9f9 	bl	80034f2 <__retarget_lock_acquire_recursive>
 8004100:	89bb      	ldrh	r3, [r7, #12]
 8004102:	071b      	lsls	r3, r3, #28
 8004104:	d502      	bpl.n	800410c <_vfiprintf_r+0x38>
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d113      	bne.n	8004134 <_vfiprintf_r+0x60>
 800410c:	0039      	movs	r1, r7
 800410e:	9803      	ldr	r0, [sp, #12]
 8004110:	f7ff f90a 	bl	8003328 <__swsetup_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	d00d      	beq.n	8004134 <_vfiprintf_r+0x60>
 8004118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800411a:	07db      	lsls	r3, r3, #31
 800411c:	d503      	bpl.n	8004126 <_vfiprintf_r+0x52>
 800411e:	2001      	movs	r0, #1
 8004120:	4240      	negs	r0, r0
 8004122:	b021      	add	sp, #132	; 0x84
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004126:	89bb      	ldrh	r3, [r7, #12]
 8004128:	059b      	lsls	r3, r3, #22
 800412a:	d4f8      	bmi.n	800411e <_vfiprintf_r+0x4a>
 800412c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800412e:	f7ff f9e1 	bl	80034f4 <__retarget_lock_release_recursive>
 8004132:	e7f4      	b.n	800411e <_vfiprintf_r+0x4a>
 8004134:	2300      	movs	r3, #0
 8004136:	ac08      	add	r4, sp, #32
 8004138:	6163      	str	r3, [r4, #20]
 800413a:	3320      	adds	r3, #32
 800413c:	7663      	strb	r3, [r4, #25]
 800413e:	3310      	adds	r3, #16
 8004140:	76a3      	strb	r3, [r4, #26]
 8004142:	9607      	str	r6, [sp, #28]
 8004144:	002e      	movs	r6, r5
 8004146:	7833      	ldrb	r3, [r6, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <_vfiprintf_r+0x7c>
 800414c:	2b25      	cmp	r3, #37	; 0x25
 800414e:	d148      	bne.n	80041e2 <_vfiprintf_r+0x10e>
 8004150:	1b73      	subs	r3, r6, r5
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	42ae      	cmp	r6, r5
 8004156:	d00b      	beq.n	8004170 <_vfiprintf_r+0x9c>
 8004158:	002a      	movs	r2, r5
 800415a:	0039      	movs	r1, r7
 800415c:	9803      	ldr	r0, [sp, #12]
 800415e:	f7ff ffa7 	bl	80040b0 <__sfputs_r>
 8004162:	3001      	adds	r0, #1
 8004164:	d100      	bne.n	8004168 <_vfiprintf_r+0x94>
 8004166:	e0af      	b.n	80042c8 <_vfiprintf_r+0x1f4>
 8004168:	6963      	ldr	r3, [r4, #20]
 800416a:	9a05      	ldr	r2, [sp, #20]
 800416c:	189b      	adds	r3, r3, r2
 800416e:	6163      	str	r3, [r4, #20]
 8004170:	7833      	ldrb	r3, [r6, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d100      	bne.n	8004178 <_vfiprintf_r+0xa4>
 8004176:	e0a7      	b.n	80042c8 <_vfiprintf_r+0x1f4>
 8004178:	2201      	movs	r2, #1
 800417a:	2300      	movs	r3, #0
 800417c:	4252      	negs	r2, r2
 800417e:	6062      	str	r2, [r4, #4]
 8004180:	a904      	add	r1, sp, #16
 8004182:	3254      	adds	r2, #84	; 0x54
 8004184:	1852      	adds	r2, r2, r1
 8004186:	1c75      	adds	r5, r6, #1
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	60e3      	str	r3, [r4, #12]
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	7013      	strb	r3, [r2, #0]
 8004190:	65a3      	str	r3, [r4, #88]	; 0x58
 8004192:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <_vfiprintf_r+0x224>)
 8004194:	2205      	movs	r2, #5
 8004196:	0018      	movs	r0, r3
 8004198:	7829      	ldrb	r1, [r5, #0]
 800419a:	9305      	str	r3, [sp, #20]
 800419c:	f7ff ff32 	bl	8004004 <memchr>
 80041a0:	1c6e      	adds	r6, r5, #1
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d11f      	bne.n	80041e6 <_vfiprintf_r+0x112>
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	06d3      	lsls	r3, r2, #27
 80041aa:	d504      	bpl.n	80041b6 <_vfiprintf_r+0xe2>
 80041ac:	2353      	movs	r3, #83	; 0x53
 80041ae:	a904      	add	r1, sp, #16
 80041b0:	185b      	adds	r3, r3, r1
 80041b2:	2120      	movs	r1, #32
 80041b4:	7019      	strb	r1, [r3, #0]
 80041b6:	0713      	lsls	r3, r2, #28
 80041b8:	d504      	bpl.n	80041c4 <_vfiprintf_r+0xf0>
 80041ba:	2353      	movs	r3, #83	; 0x53
 80041bc:	a904      	add	r1, sp, #16
 80041be:	185b      	adds	r3, r3, r1
 80041c0:	212b      	movs	r1, #43	; 0x2b
 80041c2:	7019      	strb	r1, [r3, #0]
 80041c4:	782b      	ldrb	r3, [r5, #0]
 80041c6:	2b2a      	cmp	r3, #42	; 0x2a
 80041c8:	d016      	beq.n	80041f8 <_vfiprintf_r+0x124>
 80041ca:	002e      	movs	r6, r5
 80041cc:	2100      	movs	r1, #0
 80041ce:	200a      	movs	r0, #10
 80041d0:	68e3      	ldr	r3, [r4, #12]
 80041d2:	7832      	ldrb	r2, [r6, #0]
 80041d4:	1c75      	adds	r5, r6, #1
 80041d6:	3a30      	subs	r2, #48	; 0x30
 80041d8:	2a09      	cmp	r2, #9
 80041da:	d94e      	bls.n	800427a <_vfiprintf_r+0x1a6>
 80041dc:	2900      	cmp	r1, #0
 80041de:	d111      	bne.n	8004204 <_vfiprintf_r+0x130>
 80041e0:	e017      	b.n	8004212 <_vfiprintf_r+0x13e>
 80041e2:	3601      	adds	r6, #1
 80041e4:	e7af      	b.n	8004146 <_vfiprintf_r+0x72>
 80041e6:	9b05      	ldr	r3, [sp, #20]
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	1ac0      	subs	r0, r0, r3
 80041ec:	2301      	movs	r3, #1
 80041ee:	4083      	lsls	r3, r0
 80041f0:	4313      	orrs	r3, r2
 80041f2:	0035      	movs	r5, r6
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	e7cc      	b.n	8004192 <_vfiprintf_r+0xbe>
 80041f8:	9b07      	ldr	r3, [sp, #28]
 80041fa:	1d19      	adds	r1, r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	9107      	str	r1, [sp, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	db01      	blt.n	8004208 <_vfiprintf_r+0x134>
 8004204:	930b      	str	r3, [sp, #44]	; 0x2c
 8004206:	e004      	b.n	8004212 <_vfiprintf_r+0x13e>
 8004208:	425b      	negs	r3, r3
 800420a:	60e3      	str	r3, [r4, #12]
 800420c:	2302      	movs	r3, #2
 800420e:	4313      	orrs	r3, r2
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	7833      	ldrb	r3, [r6, #0]
 8004214:	2b2e      	cmp	r3, #46	; 0x2e
 8004216:	d10a      	bne.n	800422e <_vfiprintf_r+0x15a>
 8004218:	7873      	ldrb	r3, [r6, #1]
 800421a:	2b2a      	cmp	r3, #42	; 0x2a
 800421c:	d135      	bne.n	800428a <_vfiprintf_r+0x1b6>
 800421e:	9b07      	ldr	r3, [sp, #28]
 8004220:	3602      	adds	r6, #2
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	9207      	str	r2, [sp, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	db2b      	blt.n	8004284 <_vfiprintf_r+0x1b0>
 800422c:	9309      	str	r3, [sp, #36]	; 0x24
 800422e:	4d33      	ldr	r5, [pc, #204]	; (80042fc <_vfiprintf_r+0x228>)
 8004230:	2203      	movs	r2, #3
 8004232:	0028      	movs	r0, r5
 8004234:	7831      	ldrb	r1, [r6, #0]
 8004236:	f7ff fee5 	bl	8004004 <memchr>
 800423a:	2800      	cmp	r0, #0
 800423c:	d006      	beq.n	800424c <_vfiprintf_r+0x178>
 800423e:	2340      	movs	r3, #64	; 0x40
 8004240:	1b40      	subs	r0, r0, r5
 8004242:	4083      	lsls	r3, r0
 8004244:	6822      	ldr	r2, [r4, #0]
 8004246:	3601      	adds	r6, #1
 8004248:	4313      	orrs	r3, r2
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	7831      	ldrb	r1, [r6, #0]
 800424e:	2206      	movs	r2, #6
 8004250:	482b      	ldr	r0, [pc, #172]	; (8004300 <_vfiprintf_r+0x22c>)
 8004252:	1c75      	adds	r5, r6, #1
 8004254:	7621      	strb	r1, [r4, #24]
 8004256:	f7ff fed5 	bl	8004004 <memchr>
 800425a:	2800      	cmp	r0, #0
 800425c:	d043      	beq.n	80042e6 <_vfiprintf_r+0x212>
 800425e:	4b29      	ldr	r3, [pc, #164]	; (8004304 <_vfiprintf_r+0x230>)
 8004260:	2b00      	cmp	r3, #0
 8004262:	d125      	bne.n	80042b0 <_vfiprintf_r+0x1dc>
 8004264:	2207      	movs	r2, #7
 8004266:	9b07      	ldr	r3, [sp, #28]
 8004268:	3307      	adds	r3, #7
 800426a:	4393      	bics	r3, r2
 800426c:	3308      	adds	r3, #8
 800426e:	9307      	str	r3, [sp, #28]
 8004270:	6963      	ldr	r3, [r4, #20]
 8004272:	9a04      	ldr	r2, [sp, #16]
 8004274:	189b      	adds	r3, r3, r2
 8004276:	6163      	str	r3, [r4, #20]
 8004278:	e764      	b.n	8004144 <_vfiprintf_r+0x70>
 800427a:	4343      	muls	r3, r0
 800427c:	002e      	movs	r6, r5
 800427e:	2101      	movs	r1, #1
 8004280:	189b      	adds	r3, r3, r2
 8004282:	e7a6      	b.n	80041d2 <_vfiprintf_r+0xfe>
 8004284:	2301      	movs	r3, #1
 8004286:	425b      	negs	r3, r3
 8004288:	e7d0      	b.n	800422c <_vfiprintf_r+0x158>
 800428a:	2300      	movs	r3, #0
 800428c:	200a      	movs	r0, #10
 800428e:	001a      	movs	r2, r3
 8004290:	3601      	adds	r6, #1
 8004292:	6063      	str	r3, [r4, #4]
 8004294:	7831      	ldrb	r1, [r6, #0]
 8004296:	1c75      	adds	r5, r6, #1
 8004298:	3930      	subs	r1, #48	; 0x30
 800429a:	2909      	cmp	r1, #9
 800429c:	d903      	bls.n	80042a6 <_vfiprintf_r+0x1d2>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0c5      	beq.n	800422e <_vfiprintf_r+0x15a>
 80042a2:	9209      	str	r2, [sp, #36]	; 0x24
 80042a4:	e7c3      	b.n	800422e <_vfiprintf_r+0x15a>
 80042a6:	4342      	muls	r2, r0
 80042a8:	002e      	movs	r6, r5
 80042aa:	2301      	movs	r3, #1
 80042ac:	1852      	adds	r2, r2, r1
 80042ae:	e7f1      	b.n	8004294 <_vfiprintf_r+0x1c0>
 80042b0:	aa07      	add	r2, sp, #28
 80042b2:	9200      	str	r2, [sp, #0]
 80042b4:	0021      	movs	r1, r4
 80042b6:	003a      	movs	r2, r7
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <_vfiprintf_r+0x234>)
 80042ba:	9803      	ldr	r0, [sp, #12]
 80042bc:	e000      	b.n	80042c0 <_vfiprintf_r+0x1ec>
 80042be:	bf00      	nop
 80042c0:	9004      	str	r0, [sp, #16]
 80042c2:	9b04      	ldr	r3, [sp, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	d1d3      	bne.n	8004270 <_vfiprintf_r+0x19c>
 80042c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ca:	07db      	lsls	r3, r3, #31
 80042cc:	d405      	bmi.n	80042da <_vfiprintf_r+0x206>
 80042ce:	89bb      	ldrh	r3, [r7, #12]
 80042d0:	059b      	lsls	r3, r3, #22
 80042d2:	d402      	bmi.n	80042da <_vfiprintf_r+0x206>
 80042d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80042d6:	f7ff f90d 	bl	80034f4 <__retarget_lock_release_recursive>
 80042da:	89bb      	ldrh	r3, [r7, #12]
 80042dc:	065b      	lsls	r3, r3, #25
 80042de:	d500      	bpl.n	80042e2 <_vfiprintf_r+0x20e>
 80042e0:	e71d      	b.n	800411e <_vfiprintf_r+0x4a>
 80042e2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042e4:	e71d      	b.n	8004122 <_vfiprintf_r+0x4e>
 80042e6:	aa07      	add	r2, sp, #28
 80042e8:	9200      	str	r2, [sp, #0]
 80042ea:	0021      	movs	r1, r4
 80042ec:	003a      	movs	r2, r7
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <_vfiprintf_r+0x234>)
 80042f0:	9803      	ldr	r0, [sp, #12]
 80042f2:	f7ff fc01 	bl	8003af8 <_printf_i>
 80042f6:	e7e3      	b.n	80042c0 <_vfiprintf_r+0x1ec>
 80042f8:	0800450c 	.word	0x0800450c
 80042fc:	08004512 	.word	0x08004512
 8004300:	08004516 	.word	0x08004516
 8004304:	00000000 	.word	0x00000000
 8004308:	080040b1 	.word	0x080040b1

0800430c <_raise_r>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	0004      	movs	r4, r0
 8004310:	000d      	movs	r5, r1
 8004312:	291f      	cmp	r1, #31
 8004314:	d904      	bls.n	8004320 <_raise_r+0x14>
 8004316:	2316      	movs	r3, #22
 8004318:	6003      	str	r3, [r0, #0]
 800431a:	2001      	movs	r0, #1
 800431c:	4240      	negs	r0, r0
 800431e:	bd70      	pop	{r4, r5, r6, pc}
 8004320:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d004      	beq.n	8004330 <_raise_r+0x24>
 8004326:	008a      	lsls	r2, r1, #2
 8004328:	189b      	adds	r3, r3, r2
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2a00      	cmp	r2, #0
 800432e:	d108      	bne.n	8004342 <_raise_r+0x36>
 8004330:	0020      	movs	r0, r4
 8004332:	f000 f831 	bl	8004398 <_getpid_r>
 8004336:	002a      	movs	r2, r5
 8004338:	0001      	movs	r1, r0
 800433a:	0020      	movs	r0, r4
 800433c:	f000 f81a 	bl	8004374 <_kill_r>
 8004340:	e7ed      	b.n	800431e <_raise_r+0x12>
 8004342:	2000      	movs	r0, #0
 8004344:	2a01      	cmp	r2, #1
 8004346:	d0ea      	beq.n	800431e <_raise_r+0x12>
 8004348:	1c51      	adds	r1, r2, #1
 800434a:	d103      	bne.n	8004354 <_raise_r+0x48>
 800434c:	2316      	movs	r3, #22
 800434e:	3001      	adds	r0, #1
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	e7e4      	b.n	800431e <_raise_r+0x12>
 8004354:	2400      	movs	r4, #0
 8004356:	0028      	movs	r0, r5
 8004358:	601c      	str	r4, [r3, #0]
 800435a:	4790      	blx	r2
 800435c:	0020      	movs	r0, r4
 800435e:	e7de      	b.n	800431e <_raise_r+0x12>

08004360 <raise>:
 8004360:	b510      	push	{r4, lr}
 8004362:	4b03      	ldr	r3, [pc, #12]	; (8004370 <raise+0x10>)
 8004364:	0001      	movs	r1, r0
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	f7ff ffd0 	bl	800430c <_raise_r>
 800436c:	bd10      	pop	{r4, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	20000064 	.word	0x20000064

08004374 <_kill_r>:
 8004374:	2300      	movs	r3, #0
 8004376:	b570      	push	{r4, r5, r6, lr}
 8004378:	4d06      	ldr	r5, [pc, #24]	; (8004394 <_kill_r+0x20>)
 800437a:	0004      	movs	r4, r0
 800437c:	0008      	movs	r0, r1
 800437e:	0011      	movs	r1, r2
 8004380:	602b      	str	r3, [r5, #0]
 8004382:	f7fc ff0d 	bl	80011a0 <_kill>
 8004386:	1c43      	adds	r3, r0, #1
 8004388:	d103      	bne.n	8004392 <_kill_r+0x1e>
 800438a:	682b      	ldr	r3, [r5, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d000      	beq.n	8004392 <_kill_r+0x1e>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	2000034c 	.word	0x2000034c

08004398 <_getpid_r>:
 8004398:	b510      	push	{r4, lr}
 800439a:	f7fc feff 	bl	800119c <_getpid>
 800439e:	bd10      	pop	{r4, pc}

080043a0 <_malloc_usable_size_r>:
 80043a0:	1f0b      	subs	r3, r1, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	1f18      	subs	r0, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	da01      	bge.n	80043ae <_malloc_usable_size_r+0xe>
 80043aa:	580b      	ldr	r3, [r1, r0]
 80043ac:	18c0      	adds	r0, r0, r3
 80043ae:	4770      	bx	lr

080043b0 <_init>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b6:	bc08      	pop	{r3}
 80043b8:	469e      	mov	lr, r3
 80043ba:	4770      	bx	lr

080043bc <_fini>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr
