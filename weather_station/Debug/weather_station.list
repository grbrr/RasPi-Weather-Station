
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006194  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800642c  0800642c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800642c  0800642c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800642c  0800642c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006430  08006430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000068  0800649c  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800649c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c0e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038b6  00000000  00000000  00039ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000ba40  00000000  00000000  0003d597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e80  00000000  00000000  00048fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f3a  00000000  00000000  00049e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012dbf  00000000  00000000  0004ad92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001db52  00000000  00000000  0005db51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0006b37f  00000000  00000000  0007b6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003af4  00000000  00000000  000e6a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000ea518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800623c 	.word	0x0800623c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800623c 	.word	0x0800623c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f8f0 	bl	800042c <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__divsi3>:
 8000258:	4603      	mov	r3, r0
 800025a:	430b      	orrs	r3, r1
 800025c:	d47f      	bmi.n	800035e <__divsi3+0x106>
 800025e:	2200      	movs	r2, #0
 8000260:	0843      	lsrs	r3, r0, #1
 8000262:	428b      	cmp	r3, r1
 8000264:	d374      	bcc.n	8000350 <__divsi3+0xf8>
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d35f      	bcc.n	800032c <__divsi3+0xd4>
 800026c:	0a03      	lsrs	r3, r0, #8
 800026e:	428b      	cmp	r3, r1
 8000270:	d344      	bcc.n	80002fc <__divsi3+0xa4>
 8000272:	0b03      	lsrs	r3, r0, #12
 8000274:	428b      	cmp	r3, r1
 8000276:	d328      	bcc.n	80002ca <__divsi3+0x72>
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d30d      	bcc.n	800029a <__divsi3+0x42>
 800027e:	22ff      	movs	r2, #255	; 0xff
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	ba12      	rev	r2, r2
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__divsi3+0x38>
 800028a:	1212      	asrs	r2, r2, #8
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	d065      	beq.n	800035c <__divsi3+0x104>
 8000290:	0b03      	lsrs	r3, r0, #12
 8000292:	428b      	cmp	r3, r1
 8000294:	d319      	bcc.n	80002ca <__divsi3+0x72>
 8000296:	e000      	b.n	800029a <__divsi3+0x42>
 8000298:	0a09      	lsrs	r1, r1, #8
 800029a:	0bc3      	lsrs	r3, r0, #15
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x4c>
 80002a0:	03cb      	lsls	r3, r1, #15
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b83      	lsrs	r3, r0, #14
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x58>
 80002ac:	038b      	lsls	r3, r1, #14
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b43      	lsrs	r3, r0, #13
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x64>
 80002b8:	034b      	lsls	r3, r1, #13
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x70>
 80002c4:	030b      	lsls	r3, r1, #12
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0ac3      	lsrs	r3, r0, #11
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x7c>
 80002d0:	02cb      	lsls	r3, r1, #11
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a83      	lsrs	r3, r0, #10
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x88>
 80002dc:	028b      	lsls	r3, r1, #10
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a43      	lsrs	r3, r0, #9
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x94>
 80002e8:	024b      	lsls	r3, r1, #9
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a03      	lsrs	r3, r0, #8
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0xa0>
 80002f4:	020b      	lsls	r3, r1, #8
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	d2cd      	bcs.n	8000298 <__divsi3+0x40>
 80002fc:	09c3      	lsrs	r3, r0, #7
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xae>
 8000302:	01cb      	lsls	r3, r1, #7
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0983      	lsrs	r3, r0, #6
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xba>
 800030e:	018b      	lsls	r3, r1, #6
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0943      	lsrs	r3, r0, #5
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xc6>
 800031a:	014b      	lsls	r3, r1, #5
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0903      	lsrs	r3, r0, #4
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xd2>
 8000326:	010b      	lsls	r3, r1, #4
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	08c3      	lsrs	r3, r0, #3
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xde>
 8000332:	00cb      	lsls	r3, r1, #3
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0883      	lsrs	r3, r0, #2
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xea>
 800033e:	008b      	lsls	r3, r1, #2
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0843      	lsrs	r3, r0, #1
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xf6>
 800034a:	004b      	lsls	r3, r1, #1
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	1a41      	subs	r1, r0, r1
 8000352:	d200      	bcs.n	8000356 <__divsi3+0xfe>
 8000354:	4601      	mov	r1, r0
 8000356:	4152      	adcs	r2, r2
 8000358:	4610      	mov	r0, r2
 800035a:	4770      	bx	lr
 800035c:	e05d      	b.n	800041a <__divsi3+0x1c2>
 800035e:	0fca      	lsrs	r2, r1, #31
 8000360:	d000      	beq.n	8000364 <__divsi3+0x10c>
 8000362:	4249      	negs	r1, r1
 8000364:	1003      	asrs	r3, r0, #32
 8000366:	d300      	bcc.n	800036a <__divsi3+0x112>
 8000368:	4240      	negs	r0, r0
 800036a:	4053      	eors	r3, r2
 800036c:	2200      	movs	r2, #0
 800036e:	469c      	mov	ip, r3
 8000370:	0903      	lsrs	r3, r0, #4
 8000372:	428b      	cmp	r3, r1
 8000374:	d32d      	bcc.n	80003d2 <__divsi3+0x17a>
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d312      	bcc.n	80003a2 <__divsi3+0x14a>
 800037c:	22fc      	movs	r2, #252	; 0xfc
 800037e:	0189      	lsls	r1, r1, #6
 8000380:	ba12      	rev	r2, r2
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d30c      	bcc.n	80003a2 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d308      	bcc.n	80003a2 <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d304      	bcc.n	80003a2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	d03a      	beq.n	8000412 <__divsi3+0x1ba>
 800039c:	1192      	asrs	r2, r2, #6
 800039e:	e000      	b.n	80003a2 <__divsi3+0x14a>
 80003a0:	0989      	lsrs	r1, r1, #6
 80003a2:	09c3      	lsrs	r3, r0, #7
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x154>
 80003a8:	01cb      	lsls	r3, r1, #7
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0983      	lsrs	r3, r0, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x160>
 80003b4:	018b      	lsls	r3, r1, #6
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0943      	lsrs	r3, r0, #5
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x16c>
 80003c0:	014b      	lsls	r3, r1, #5
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0903      	lsrs	r3, r0, #4
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x178>
 80003cc:	010b      	lsls	r3, r1, #4
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	08c3      	lsrs	r3, r0, #3
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x184>
 80003d8:	00cb      	lsls	r3, r1, #3
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0883      	lsrs	r3, r0, #2
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x190>
 80003e4:	008b      	lsls	r3, r1, #2
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	d2d9      	bcs.n	80003a0 <__divsi3+0x148>
 80003ec:	0843      	lsrs	r3, r0, #1
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d301      	bcc.n	80003f6 <__divsi3+0x19e>
 80003f2:	004b      	lsls	r3, r1, #1
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	4152      	adcs	r2, r2
 80003f8:	1a41      	subs	r1, r0, r1
 80003fa:	d200      	bcs.n	80003fe <__divsi3+0x1a6>
 80003fc:	4601      	mov	r1, r0
 80003fe:	4663      	mov	r3, ip
 8000400:	4152      	adcs	r2, r2
 8000402:	105b      	asrs	r3, r3, #1
 8000404:	4610      	mov	r0, r2
 8000406:	d301      	bcc.n	800040c <__divsi3+0x1b4>
 8000408:	4240      	negs	r0, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d500      	bpl.n	8000410 <__divsi3+0x1b8>
 800040e:	4249      	negs	r1, r1
 8000410:	4770      	bx	lr
 8000412:	4663      	mov	r3, ip
 8000414:	105b      	asrs	r3, r3, #1
 8000416:	d300      	bcc.n	800041a <__divsi3+0x1c2>
 8000418:	4240      	negs	r0, r0
 800041a:	b501      	push	{r0, lr}
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f805 	bl	800042c <__aeabi_idiv0>
 8000422:	bd02      	pop	{r1, pc}

08000424 <__aeabi_idivmod>:
 8000424:	2900      	cmp	r1, #0
 8000426:	d0f8      	beq.n	800041a <__divsi3+0x1c2>
 8000428:	e716      	b.n	8000258 <__divsi3>
 800042a:	4770      	bx	lr

0800042c <__aeabi_idiv0>:
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdrcmple>:
 8000430:	4684      	mov	ip, r0
 8000432:	0010      	movs	r0, r2
 8000434:	4662      	mov	r2, ip
 8000436:	468c      	mov	ip, r1
 8000438:	0019      	movs	r1, r3
 800043a:	4663      	mov	r3, ip
 800043c:	e000      	b.n	8000440 <__aeabi_cdcmpeq>
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdcmpeq>:
 8000440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000442:	f000 ff57 	bl	80012f4 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	d401      	bmi.n	800044e <__aeabi_cdcmpeq+0xe>
 800044a:	2100      	movs	r1, #0
 800044c:	42c8      	cmn	r0, r1
 800044e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000450 <__aeabi_dcmpeq>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fea7 	bl	80011a4 <__eqdf2>
 8000456:	4240      	negs	r0, r0
 8000458:	3001      	adds	r0, #1
 800045a:	bd10      	pop	{r4, pc}

0800045c <__aeabi_dcmplt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff49 	bl	80012f4 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	db01      	blt.n	800046a <__aeabi_dcmplt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmple>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ff3f 	bl	80012f4 <__ledf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dd01      	ble.n	800047e <__aeabi_dcmple+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpgt>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fecf 	bl	8001228 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	dc01      	bgt.n	8000492 <__aeabi_dcmpgt+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_dcmpge>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f000 fec5 	bl	8001228 <__gedf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	da01      	bge.n	80004a6 <__aeabi_dcmpge+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_lmul>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	46ce      	mov	lr, r9
 80004b0:	4699      	mov	r9, r3
 80004b2:	0c03      	lsrs	r3, r0, #16
 80004b4:	469c      	mov	ip, r3
 80004b6:	0413      	lsls	r3, r2, #16
 80004b8:	4647      	mov	r7, r8
 80004ba:	0c1b      	lsrs	r3, r3, #16
 80004bc:	001d      	movs	r5, r3
 80004be:	000e      	movs	r6, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	0404      	lsls	r4, r0, #16
 80004c4:	0c24      	lsrs	r4, r4, #16
 80004c6:	b580      	push	{r7, lr}
 80004c8:	0007      	movs	r7, r0
 80004ca:	0c10      	lsrs	r0, r2, #16
 80004cc:	434b      	muls	r3, r1
 80004ce:	4365      	muls	r5, r4
 80004d0:	4341      	muls	r1, r0
 80004d2:	4360      	muls	r0, r4
 80004d4:	0c2c      	lsrs	r4, r5, #16
 80004d6:	18c0      	adds	r0, r0, r3
 80004d8:	1820      	adds	r0, r4, r0
 80004da:	468c      	mov	ip, r1
 80004dc:	4283      	cmp	r3, r0
 80004de:	d903      	bls.n	80004e8 <__aeabi_lmul+0x3c>
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	025b      	lsls	r3, r3, #9
 80004e4:	4698      	mov	r8, r3
 80004e6:	44c4      	add	ip, r8
 80004e8:	4649      	mov	r1, r9
 80004ea:	4379      	muls	r1, r7
 80004ec:	4356      	muls	r6, r2
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	042d      	lsls	r5, r5, #16
 80004f2:	0c2d      	lsrs	r5, r5, #16
 80004f4:	1989      	adds	r1, r1, r6
 80004f6:	4463      	add	r3, ip
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	1940      	adds	r0, r0, r5
 80004fc:	18c9      	adds	r1, r1, r3
 80004fe:	bcc0      	pop	{r6, r7}
 8000500:	46b9      	mov	r9, r7
 8000502:	46b0      	mov	r8, r6
 8000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_dadd>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	464f      	mov	r7, r9
 800050c:	4646      	mov	r6, r8
 800050e:	46d6      	mov	lr, sl
 8000510:	0004      	movs	r4, r0
 8000512:	b5c0      	push	{r6, r7, lr}
 8000514:	001f      	movs	r7, r3
 8000516:	030b      	lsls	r3, r1, #12
 8000518:	0010      	movs	r0, r2
 800051a:	004e      	lsls	r6, r1, #1
 800051c:	0a5b      	lsrs	r3, r3, #9
 800051e:	0fcd      	lsrs	r5, r1, #31
 8000520:	0f61      	lsrs	r1, r4, #29
 8000522:	007a      	lsls	r2, r7, #1
 8000524:	4319      	orrs	r1, r3
 8000526:	00e3      	lsls	r3, r4, #3
 8000528:	033c      	lsls	r4, r7, #12
 800052a:	0fff      	lsrs	r7, r7, #31
 800052c:	46bc      	mov	ip, r7
 800052e:	0a64      	lsrs	r4, r4, #9
 8000530:	0f47      	lsrs	r7, r0, #29
 8000532:	4327      	orrs	r7, r4
 8000534:	0d76      	lsrs	r6, r6, #21
 8000536:	0d52      	lsrs	r2, r2, #21
 8000538:	00c0      	lsls	r0, r0, #3
 800053a:	46b9      	mov	r9, r7
 800053c:	4680      	mov	r8, r0
 800053e:	1ab7      	subs	r7, r6, r2
 8000540:	4565      	cmp	r5, ip
 8000542:	d100      	bne.n	8000546 <__aeabi_dadd+0x3e>
 8000544:	e09b      	b.n	800067e <__aeabi_dadd+0x176>
 8000546:	2f00      	cmp	r7, #0
 8000548:	dc00      	bgt.n	800054c <__aeabi_dadd+0x44>
 800054a:	e084      	b.n	8000656 <__aeabi_dadd+0x14e>
 800054c:	2a00      	cmp	r2, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0x4a>
 8000550:	e0be      	b.n	80006d0 <__aeabi_dadd+0x1c8>
 8000552:	4ac8      	ldr	r2, [pc, #800]	; (8000874 <__aeabi_dadd+0x36c>)
 8000554:	4296      	cmp	r6, r2
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0x52>
 8000558:	e124      	b.n	80007a4 <__aeabi_dadd+0x29c>
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	464c      	mov	r4, r9
 800055e:	0412      	lsls	r2, r2, #16
 8000560:	4314      	orrs	r4, r2
 8000562:	46a1      	mov	r9, r4
 8000564:	2f38      	cmp	r7, #56	; 0x38
 8000566:	dd00      	ble.n	800056a <__aeabi_dadd+0x62>
 8000568:	e167      	b.n	800083a <__aeabi_dadd+0x332>
 800056a:	2f1f      	cmp	r7, #31
 800056c:	dd00      	ble.n	8000570 <__aeabi_dadd+0x68>
 800056e:	e1d6      	b.n	800091e <__aeabi_dadd+0x416>
 8000570:	2220      	movs	r2, #32
 8000572:	464c      	mov	r4, r9
 8000574:	1bd2      	subs	r2, r2, r7
 8000576:	4094      	lsls	r4, r2
 8000578:	46a2      	mov	sl, r4
 800057a:	4644      	mov	r4, r8
 800057c:	40fc      	lsrs	r4, r7
 800057e:	0020      	movs	r0, r4
 8000580:	4654      	mov	r4, sl
 8000582:	4304      	orrs	r4, r0
 8000584:	4640      	mov	r0, r8
 8000586:	4090      	lsls	r0, r2
 8000588:	1e42      	subs	r2, r0, #1
 800058a:	4190      	sbcs	r0, r2
 800058c:	464a      	mov	r2, r9
 800058e:	40fa      	lsrs	r2, r7
 8000590:	4304      	orrs	r4, r0
 8000592:	1a89      	subs	r1, r1, r2
 8000594:	1b1c      	subs	r4, r3, r4
 8000596:	42a3      	cmp	r3, r4
 8000598:	4192      	sbcs	r2, r2
 800059a:	4252      	negs	r2, r2
 800059c:	1a8b      	subs	r3, r1, r2
 800059e:	469a      	mov	sl, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	d400      	bmi.n	80005a8 <__aeabi_dadd+0xa0>
 80005a6:	e0d4      	b.n	8000752 <__aeabi_dadd+0x24a>
 80005a8:	4653      	mov	r3, sl
 80005aa:	025a      	lsls	r2, r3, #9
 80005ac:	0a53      	lsrs	r3, r2, #9
 80005ae:	469a      	mov	sl, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0xb0>
 80005b6:	e104      	b.n	80007c2 <__aeabi_dadd+0x2ba>
 80005b8:	4650      	mov	r0, sl
 80005ba:	f001 fdcf 	bl	800215c <__clzsi2>
 80005be:	0003      	movs	r3, r0
 80005c0:	3b08      	subs	r3, #8
 80005c2:	2220      	movs	r2, #32
 80005c4:	0020      	movs	r0, r4
 80005c6:	1ad2      	subs	r2, r2, r3
 80005c8:	4651      	mov	r1, sl
 80005ca:	40d0      	lsrs	r0, r2
 80005cc:	4099      	lsls	r1, r3
 80005ce:	0002      	movs	r2, r0
 80005d0:	409c      	lsls	r4, r3
 80005d2:	430a      	orrs	r2, r1
 80005d4:	42b3      	cmp	r3, r6
 80005d6:	da00      	bge.n	80005da <__aeabi_dadd+0xd2>
 80005d8:	e102      	b.n	80007e0 <__aeabi_dadd+0x2d8>
 80005da:	1b9b      	subs	r3, r3, r6
 80005dc:	1c59      	adds	r1, r3, #1
 80005de:	291f      	cmp	r1, #31
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_dadd+0xdc>
 80005e2:	e0a7      	b.n	8000734 <__aeabi_dadd+0x22c>
 80005e4:	2320      	movs	r3, #32
 80005e6:	0010      	movs	r0, r2
 80005e8:	0026      	movs	r6, r4
 80005ea:	1a5b      	subs	r3, r3, r1
 80005ec:	409c      	lsls	r4, r3
 80005ee:	4098      	lsls	r0, r3
 80005f0:	40ce      	lsrs	r6, r1
 80005f2:	40ca      	lsrs	r2, r1
 80005f4:	1e63      	subs	r3, r4, #1
 80005f6:	419c      	sbcs	r4, r3
 80005f8:	4330      	orrs	r0, r6
 80005fa:	4692      	mov	sl, r2
 80005fc:	2600      	movs	r6, #0
 80005fe:	4304      	orrs	r4, r0
 8000600:	0763      	lsls	r3, r4, #29
 8000602:	d009      	beq.n	8000618 <__aeabi_dadd+0x110>
 8000604:	230f      	movs	r3, #15
 8000606:	4023      	ands	r3, r4
 8000608:	2b04      	cmp	r3, #4
 800060a:	d005      	beq.n	8000618 <__aeabi_dadd+0x110>
 800060c:	1d23      	adds	r3, r4, #4
 800060e:	42a3      	cmp	r3, r4
 8000610:	41a4      	sbcs	r4, r4
 8000612:	4264      	negs	r4, r4
 8000614:	44a2      	add	sl, r4
 8000616:	001c      	movs	r4, r3
 8000618:	4653      	mov	r3, sl
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	d400      	bmi.n	8000620 <__aeabi_dadd+0x118>
 800061e:	e09b      	b.n	8000758 <__aeabi_dadd+0x250>
 8000620:	4b94      	ldr	r3, [pc, #592]	; (8000874 <__aeabi_dadd+0x36c>)
 8000622:	3601      	adds	r6, #1
 8000624:	429e      	cmp	r6, r3
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x122>
 8000628:	e0b8      	b.n	800079c <__aeabi_dadd+0x294>
 800062a:	4653      	mov	r3, sl
 800062c:	4992      	ldr	r1, [pc, #584]	; (8000878 <__aeabi_dadd+0x370>)
 800062e:	08e4      	lsrs	r4, r4, #3
 8000630:	400b      	ands	r3, r1
 8000632:	0019      	movs	r1, r3
 8000634:	075b      	lsls	r3, r3, #29
 8000636:	4323      	orrs	r3, r4
 8000638:	0572      	lsls	r2, r6, #21
 800063a:	024c      	lsls	r4, r1, #9
 800063c:	0b24      	lsrs	r4, r4, #12
 800063e:	0d52      	lsrs	r2, r2, #21
 8000640:	0512      	lsls	r2, r2, #20
 8000642:	07ed      	lsls	r5, r5, #31
 8000644:	4322      	orrs	r2, r4
 8000646:	432a      	orrs	r2, r5
 8000648:	0018      	movs	r0, r3
 800064a:	0011      	movs	r1, r2
 800064c:	bce0      	pop	{r5, r6, r7}
 800064e:	46ba      	mov	sl, r7
 8000650:	46b1      	mov	r9, r6
 8000652:	46a8      	mov	r8, r5
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000656:	2f00      	cmp	r7, #0
 8000658:	d048      	beq.n	80006ec <__aeabi_dadd+0x1e4>
 800065a:	1b97      	subs	r7, r2, r6
 800065c:	2e00      	cmp	r6, #0
 800065e:	d000      	beq.n	8000662 <__aeabi_dadd+0x15a>
 8000660:	e10e      	b.n	8000880 <__aeabi_dadd+0x378>
 8000662:	000c      	movs	r4, r1
 8000664:	431c      	orrs	r4, r3
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x162>
 8000668:	e1b7      	b.n	80009da <__aeabi_dadd+0x4d2>
 800066a:	1e7c      	subs	r4, r7, #1
 800066c:	2f01      	cmp	r7, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x16a>
 8000670:	e226      	b.n	8000ac0 <__aeabi_dadd+0x5b8>
 8000672:	4d80      	ldr	r5, [pc, #512]	; (8000874 <__aeabi_dadd+0x36c>)
 8000674:	42af      	cmp	r7, r5
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x172>
 8000678:	e1d5      	b.n	8000a26 <__aeabi_dadd+0x51e>
 800067a:	0027      	movs	r7, r4
 800067c:	e107      	b.n	800088e <__aeabi_dadd+0x386>
 800067e:	2f00      	cmp	r7, #0
 8000680:	dc00      	bgt.n	8000684 <__aeabi_dadd+0x17c>
 8000682:	e0b2      	b.n	80007ea <__aeabi_dadd+0x2e2>
 8000684:	2a00      	cmp	r2, #0
 8000686:	d047      	beq.n	8000718 <__aeabi_dadd+0x210>
 8000688:	4a7a      	ldr	r2, [pc, #488]	; (8000874 <__aeabi_dadd+0x36c>)
 800068a:	4296      	cmp	r6, r2
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x188>
 800068e:	e089      	b.n	80007a4 <__aeabi_dadd+0x29c>
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	464c      	mov	r4, r9
 8000694:	0412      	lsls	r2, r2, #16
 8000696:	4314      	orrs	r4, r2
 8000698:	46a1      	mov	r9, r4
 800069a:	2f38      	cmp	r7, #56	; 0x38
 800069c:	dc6b      	bgt.n	8000776 <__aeabi_dadd+0x26e>
 800069e:	2f1f      	cmp	r7, #31
 80006a0:	dc00      	bgt.n	80006a4 <__aeabi_dadd+0x19c>
 80006a2:	e16e      	b.n	8000982 <__aeabi_dadd+0x47a>
 80006a4:	003a      	movs	r2, r7
 80006a6:	4648      	mov	r0, r9
 80006a8:	3a20      	subs	r2, #32
 80006aa:	40d0      	lsrs	r0, r2
 80006ac:	4684      	mov	ip, r0
 80006ae:	2f20      	cmp	r7, #32
 80006b0:	d007      	beq.n	80006c2 <__aeabi_dadd+0x1ba>
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	4648      	mov	r0, r9
 80006b6:	1bd2      	subs	r2, r2, r7
 80006b8:	4090      	lsls	r0, r2
 80006ba:	0002      	movs	r2, r0
 80006bc:	4640      	mov	r0, r8
 80006be:	4310      	orrs	r0, r2
 80006c0:	4680      	mov	r8, r0
 80006c2:	4640      	mov	r0, r8
 80006c4:	1e42      	subs	r2, r0, #1
 80006c6:	4190      	sbcs	r0, r2
 80006c8:	4662      	mov	r2, ip
 80006ca:	0004      	movs	r4, r0
 80006cc:	4314      	orrs	r4, r2
 80006ce:	e057      	b.n	8000780 <__aeabi_dadd+0x278>
 80006d0:	464a      	mov	r2, r9
 80006d2:	4302      	orrs	r2, r0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x1d0>
 80006d6:	e103      	b.n	80008e0 <__aeabi_dadd+0x3d8>
 80006d8:	1e7a      	subs	r2, r7, #1
 80006da:	2f01      	cmp	r7, #1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x1d8>
 80006de:	e193      	b.n	8000a08 <__aeabi_dadd+0x500>
 80006e0:	4c64      	ldr	r4, [pc, #400]	; (8000874 <__aeabi_dadd+0x36c>)
 80006e2:	42a7      	cmp	r7, r4
 80006e4:	d100      	bne.n	80006e8 <__aeabi_dadd+0x1e0>
 80006e6:	e18a      	b.n	80009fe <__aeabi_dadd+0x4f6>
 80006e8:	0017      	movs	r7, r2
 80006ea:	e73b      	b.n	8000564 <__aeabi_dadd+0x5c>
 80006ec:	4c63      	ldr	r4, [pc, #396]	; (800087c <__aeabi_dadd+0x374>)
 80006ee:	1c72      	adds	r2, r6, #1
 80006f0:	4222      	tst	r2, r4
 80006f2:	d000      	beq.n	80006f6 <__aeabi_dadd+0x1ee>
 80006f4:	e0e0      	b.n	80008b8 <__aeabi_dadd+0x3b0>
 80006f6:	000a      	movs	r2, r1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d000      	beq.n	8000700 <__aeabi_dadd+0x1f8>
 80006fe:	e174      	b.n	80009ea <__aeabi_dadd+0x4e2>
 8000700:	2a00      	cmp	r2, #0
 8000702:	d100      	bne.n	8000706 <__aeabi_dadd+0x1fe>
 8000704:	e1d0      	b.n	8000aa8 <__aeabi_dadd+0x5a0>
 8000706:	464a      	mov	r2, r9
 8000708:	4302      	orrs	r2, r0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x206>
 800070c:	e1e3      	b.n	8000ad6 <__aeabi_dadd+0x5ce>
 800070e:	074a      	lsls	r2, r1, #29
 8000710:	08db      	lsrs	r3, r3, #3
 8000712:	4313      	orrs	r3, r2
 8000714:	08c9      	lsrs	r1, r1, #3
 8000716:	e029      	b.n	800076c <__aeabi_dadd+0x264>
 8000718:	464a      	mov	r2, r9
 800071a:	4302      	orrs	r2, r0
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x218>
 800071e:	e17d      	b.n	8000a1c <__aeabi_dadd+0x514>
 8000720:	1e7a      	subs	r2, r7, #1
 8000722:	2f01      	cmp	r7, #1
 8000724:	d100      	bne.n	8000728 <__aeabi_dadd+0x220>
 8000726:	e0e0      	b.n	80008ea <__aeabi_dadd+0x3e2>
 8000728:	4c52      	ldr	r4, [pc, #328]	; (8000874 <__aeabi_dadd+0x36c>)
 800072a:	42a7      	cmp	r7, r4
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0x228>
 800072e:	e166      	b.n	80009fe <__aeabi_dadd+0x4f6>
 8000730:	0017      	movs	r7, r2
 8000732:	e7b2      	b.n	800069a <__aeabi_dadd+0x192>
 8000734:	0010      	movs	r0, r2
 8000736:	3b1f      	subs	r3, #31
 8000738:	40d8      	lsrs	r0, r3
 800073a:	2920      	cmp	r1, #32
 800073c:	d003      	beq.n	8000746 <__aeabi_dadd+0x23e>
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	1a5b      	subs	r3, r3, r1
 8000742:	409a      	lsls	r2, r3
 8000744:	4314      	orrs	r4, r2
 8000746:	1e63      	subs	r3, r4, #1
 8000748:	419c      	sbcs	r4, r3
 800074a:	2300      	movs	r3, #0
 800074c:	2600      	movs	r6, #0
 800074e:	469a      	mov	sl, r3
 8000750:	4304      	orrs	r4, r0
 8000752:	0763      	lsls	r3, r4, #29
 8000754:	d000      	beq.n	8000758 <__aeabi_dadd+0x250>
 8000756:	e755      	b.n	8000604 <__aeabi_dadd+0xfc>
 8000758:	4652      	mov	r2, sl
 800075a:	08e3      	lsrs	r3, r4, #3
 800075c:	0752      	lsls	r2, r2, #29
 800075e:	4313      	orrs	r3, r2
 8000760:	4652      	mov	r2, sl
 8000762:	0037      	movs	r7, r6
 8000764:	08d1      	lsrs	r1, r2, #3
 8000766:	4a43      	ldr	r2, [pc, #268]	; (8000874 <__aeabi_dadd+0x36c>)
 8000768:	4297      	cmp	r7, r2
 800076a:	d01f      	beq.n	80007ac <__aeabi_dadd+0x2a4>
 800076c:	0309      	lsls	r1, r1, #12
 800076e:	057a      	lsls	r2, r7, #21
 8000770:	0b0c      	lsrs	r4, r1, #12
 8000772:	0d52      	lsrs	r2, r2, #21
 8000774:	e764      	b.n	8000640 <__aeabi_dadd+0x138>
 8000776:	4642      	mov	r2, r8
 8000778:	464c      	mov	r4, r9
 800077a:	4314      	orrs	r4, r2
 800077c:	1e62      	subs	r2, r4, #1
 800077e:	4194      	sbcs	r4, r2
 8000780:	18e4      	adds	r4, r4, r3
 8000782:	429c      	cmp	r4, r3
 8000784:	4192      	sbcs	r2, r2
 8000786:	4252      	negs	r2, r2
 8000788:	4692      	mov	sl, r2
 800078a:	448a      	add	sl, r1
 800078c:	4653      	mov	r3, sl
 800078e:	021b      	lsls	r3, r3, #8
 8000790:	d5df      	bpl.n	8000752 <__aeabi_dadd+0x24a>
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <__aeabi_dadd+0x36c>)
 8000794:	3601      	adds	r6, #1
 8000796:	429e      	cmp	r6, r3
 8000798:	d000      	beq.n	800079c <__aeabi_dadd+0x294>
 800079a:	e0b3      	b.n	8000904 <__aeabi_dadd+0x3fc>
 800079c:	0032      	movs	r2, r6
 800079e:	2400      	movs	r4, #0
 80007a0:	2300      	movs	r3, #0
 80007a2:	e74d      	b.n	8000640 <__aeabi_dadd+0x138>
 80007a4:	074a      	lsls	r2, r1, #29
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	08c9      	lsrs	r1, r1, #3
 80007ac:	001a      	movs	r2, r3
 80007ae:	430a      	orrs	r2, r1
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x2ac>
 80007b2:	e200      	b.n	8000bb6 <__aeabi_dadd+0x6ae>
 80007b4:	2480      	movs	r4, #128	; 0x80
 80007b6:	0324      	lsls	r4, r4, #12
 80007b8:	430c      	orrs	r4, r1
 80007ba:	0324      	lsls	r4, r4, #12
 80007bc:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <__aeabi_dadd+0x36c>)
 80007be:	0b24      	lsrs	r4, r4, #12
 80007c0:	e73e      	b.n	8000640 <__aeabi_dadd+0x138>
 80007c2:	0020      	movs	r0, r4
 80007c4:	f001 fcca 	bl	800215c <__clzsi2>
 80007c8:	0003      	movs	r3, r0
 80007ca:	3318      	adds	r3, #24
 80007cc:	2b1f      	cmp	r3, #31
 80007ce:	dc00      	bgt.n	80007d2 <__aeabi_dadd+0x2ca>
 80007d0:	e6f7      	b.n	80005c2 <__aeabi_dadd+0xba>
 80007d2:	0022      	movs	r2, r4
 80007d4:	3808      	subs	r0, #8
 80007d6:	4082      	lsls	r2, r0
 80007d8:	2400      	movs	r4, #0
 80007da:	42b3      	cmp	r3, r6
 80007dc:	db00      	blt.n	80007e0 <__aeabi_dadd+0x2d8>
 80007de:	e6fc      	b.n	80005da <__aeabi_dadd+0xd2>
 80007e0:	1af6      	subs	r6, r6, r3
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <__aeabi_dadd+0x370>)
 80007e4:	401a      	ands	r2, r3
 80007e6:	4692      	mov	sl, r2
 80007e8:	e70a      	b.n	8000600 <__aeabi_dadd+0xf8>
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d02b      	beq.n	8000846 <__aeabi_dadd+0x33e>
 80007ee:	1b97      	subs	r7, r2, r6
 80007f0:	2e00      	cmp	r6, #0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x2ee>
 80007f4:	e0b8      	b.n	8000968 <__aeabi_dadd+0x460>
 80007f6:	4c1f      	ldr	r4, [pc, #124]	; (8000874 <__aeabi_dadd+0x36c>)
 80007f8:	42a2      	cmp	r2, r4
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x2f6>
 80007fc:	e11c      	b.n	8000a38 <__aeabi_dadd+0x530>
 80007fe:	2480      	movs	r4, #128	; 0x80
 8000800:	0424      	lsls	r4, r4, #16
 8000802:	4321      	orrs	r1, r4
 8000804:	2f38      	cmp	r7, #56	; 0x38
 8000806:	dd00      	ble.n	800080a <__aeabi_dadd+0x302>
 8000808:	e11e      	b.n	8000a48 <__aeabi_dadd+0x540>
 800080a:	2f1f      	cmp	r7, #31
 800080c:	dd00      	ble.n	8000810 <__aeabi_dadd+0x308>
 800080e:	e19e      	b.n	8000b4e <__aeabi_dadd+0x646>
 8000810:	2620      	movs	r6, #32
 8000812:	000c      	movs	r4, r1
 8000814:	1bf6      	subs	r6, r6, r7
 8000816:	0018      	movs	r0, r3
 8000818:	40b3      	lsls	r3, r6
 800081a:	40b4      	lsls	r4, r6
 800081c:	40f8      	lsrs	r0, r7
 800081e:	1e5e      	subs	r6, r3, #1
 8000820:	41b3      	sbcs	r3, r6
 8000822:	40f9      	lsrs	r1, r7
 8000824:	4304      	orrs	r4, r0
 8000826:	431c      	orrs	r4, r3
 8000828:	4489      	add	r9, r1
 800082a:	4444      	add	r4, r8
 800082c:	4544      	cmp	r4, r8
 800082e:	419b      	sbcs	r3, r3
 8000830:	425b      	negs	r3, r3
 8000832:	444b      	add	r3, r9
 8000834:	469a      	mov	sl, r3
 8000836:	0016      	movs	r6, r2
 8000838:	e7a8      	b.n	800078c <__aeabi_dadd+0x284>
 800083a:	4642      	mov	r2, r8
 800083c:	464c      	mov	r4, r9
 800083e:	4314      	orrs	r4, r2
 8000840:	1e62      	subs	r2, r4, #1
 8000842:	4194      	sbcs	r4, r2
 8000844:	e6a6      	b.n	8000594 <__aeabi_dadd+0x8c>
 8000846:	4c0d      	ldr	r4, [pc, #52]	; (800087c <__aeabi_dadd+0x374>)
 8000848:	1c72      	adds	r2, r6, #1
 800084a:	4222      	tst	r2, r4
 800084c:	d000      	beq.n	8000850 <__aeabi_dadd+0x348>
 800084e:	e0a8      	b.n	80009a2 <__aeabi_dadd+0x49a>
 8000850:	000a      	movs	r2, r1
 8000852:	431a      	orrs	r2, r3
 8000854:	2e00      	cmp	r6, #0
 8000856:	d000      	beq.n	800085a <__aeabi_dadd+0x352>
 8000858:	e10a      	b.n	8000a70 <__aeabi_dadd+0x568>
 800085a:	2a00      	cmp	r2, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x358>
 800085e:	e15e      	b.n	8000b1e <__aeabi_dadd+0x616>
 8000860:	464a      	mov	r2, r9
 8000862:	4302      	orrs	r2, r0
 8000864:	d000      	beq.n	8000868 <__aeabi_dadd+0x360>
 8000866:	e161      	b.n	8000b2c <__aeabi_dadd+0x624>
 8000868:	074a      	lsls	r2, r1, #29
 800086a:	08db      	lsrs	r3, r3, #3
 800086c:	4313      	orrs	r3, r2
 800086e:	08c9      	lsrs	r1, r1, #3
 8000870:	e77c      	b.n	800076c <__aeabi_dadd+0x264>
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	000007ff 	.word	0x000007ff
 8000878:	ff7fffff 	.word	0xff7fffff
 800087c:	000007fe 	.word	0x000007fe
 8000880:	4ccf      	ldr	r4, [pc, #828]	; (8000bc0 <__aeabi_dadd+0x6b8>)
 8000882:	42a2      	cmp	r2, r4
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x380>
 8000886:	e0ce      	b.n	8000a26 <__aeabi_dadd+0x51e>
 8000888:	2480      	movs	r4, #128	; 0x80
 800088a:	0424      	lsls	r4, r4, #16
 800088c:	4321      	orrs	r1, r4
 800088e:	2f38      	cmp	r7, #56	; 0x38
 8000890:	dc5b      	bgt.n	800094a <__aeabi_dadd+0x442>
 8000892:	2f1f      	cmp	r7, #31
 8000894:	dd00      	ble.n	8000898 <__aeabi_dadd+0x390>
 8000896:	e0dc      	b.n	8000a52 <__aeabi_dadd+0x54a>
 8000898:	2520      	movs	r5, #32
 800089a:	000c      	movs	r4, r1
 800089c:	1bed      	subs	r5, r5, r7
 800089e:	001e      	movs	r6, r3
 80008a0:	40ab      	lsls	r3, r5
 80008a2:	40ac      	lsls	r4, r5
 80008a4:	40fe      	lsrs	r6, r7
 80008a6:	1e5d      	subs	r5, r3, #1
 80008a8:	41ab      	sbcs	r3, r5
 80008aa:	4334      	orrs	r4, r6
 80008ac:	40f9      	lsrs	r1, r7
 80008ae:	431c      	orrs	r4, r3
 80008b0:	464b      	mov	r3, r9
 80008b2:	1a5b      	subs	r3, r3, r1
 80008b4:	4699      	mov	r9, r3
 80008b6:	e04c      	b.n	8000952 <__aeabi_dadd+0x44a>
 80008b8:	464a      	mov	r2, r9
 80008ba:	1a1c      	subs	r4, r3, r0
 80008bc:	1a88      	subs	r0, r1, r2
 80008be:	42a3      	cmp	r3, r4
 80008c0:	4192      	sbcs	r2, r2
 80008c2:	4252      	negs	r2, r2
 80008c4:	4692      	mov	sl, r2
 80008c6:	0002      	movs	r2, r0
 80008c8:	4650      	mov	r0, sl
 80008ca:	1a12      	subs	r2, r2, r0
 80008cc:	4692      	mov	sl, r2
 80008ce:	0212      	lsls	r2, r2, #8
 80008d0:	d478      	bmi.n	80009c4 <__aeabi_dadd+0x4bc>
 80008d2:	4653      	mov	r3, sl
 80008d4:	4323      	orrs	r3, r4
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x3d2>
 80008d8:	e66a      	b.n	80005b0 <__aeabi_dadd+0xa8>
 80008da:	2100      	movs	r1, #0
 80008dc:	2500      	movs	r5, #0
 80008de:	e745      	b.n	800076c <__aeabi_dadd+0x264>
 80008e0:	074a      	lsls	r2, r1, #29
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	08c9      	lsrs	r1, r1, #3
 80008e8:	e73d      	b.n	8000766 <__aeabi_dadd+0x25e>
 80008ea:	181c      	adds	r4, r3, r0
 80008ec:	429c      	cmp	r4, r3
 80008ee:	419b      	sbcs	r3, r3
 80008f0:	4449      	add	r1, r9
 80008f2:	468a      	mov	sl, r1
 80008f4:	425b      	negs	r3, r3
 80008f6:	449a      	add	sl, r3
 80008f8:	4653      	mov	r3, sl
 80008fa:	2601      	movs	r6, #1
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	d400      	bmi.n	8000902 <__aeabi_dadd+0x3fa>
 8000900:	e727      	b.n	8000752 <__aeabi_dadd+0x24a>
 8000902:	2602      	movs	r6, #2
 8000904:	4652      	mov	r2, sl
 8000906:	4baf      	ldr	r3, [pc, #700]	; (8000bc4 <__aeabi_dadd+0x6bc>)
 8000908:	2101      	movs	r1, #1
 800090a:	401a      	ands	r2, r3
 800090c:	0013      	movs	r3, r2
 800090e:	4021      	ands	r1, r4
 8000910:	0862      	lsrs	r2, r4, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	07dc      	lsls	r4, r3, #31
 8000916:	085b      	lsrs	r3, r3, #1
 8000918:	469a      	mov	sl, r3
 800091a:	4314      	orrs	r4, r2
 800091c:	e670      	b.n	8000600 <__aeabi_dadd+0xf8>
 800091e:	003a      	movs	r2, r7
 8000920:	464c      	mov	r4, r9
 8000922:	3a20      	subs	r2, #32
 8000924:	40d4      	lsrs	r4, r2
 8000926:	46a4      	mov	ip, r4
 8000928:	2f20      	cmp	r7, #32
 800092a:	d007      	beq.n	800093c <__aeabi_dadd+0x434>
 800092c:	2240      	movs	r2, #64	; 0x40
 800092e:	4648      	mov	r0, r9
 8000930:	1bd2      	subs	r2, r2, r7
 8000932:	4090      	lsls	r0, r2
 8000934:	0002      	movs	r2, r0
 8000936:	4640      	mov	r0, r8
 8000938:	4310      	orrs	r0, r2
 800093a:	4680      	mov	r8, r0
 800093c:	4640      	mov	r0, r8
 800093e:	1e42      	subs	r2, r0, #1
 8000940:	4190      	sbcs	r0, r2
 8000942:	4662      	mov	r2, ip
 8000944:	0004      	movs	r4, r0
 8000946:	4314      	orrs	r4, r2
 8000948:	e624      	b.n	8000594 <__aeabi_dadd+0x8c>
 800094a:	4319      	orrs	r1, r3
 800094c:	000c      	movs	r4, r1
 800094e:	1e63      	subs	r3, r4, #1
 8000950:	419c      	sbcs	r4, r3
 8000952:	4643      	mov	r3, r8
 8000954:	1b1c      	subs	r4, r3, r4
 8000956:	45a0      	cmp	r8, r4
 8000958:	419b      	sbcs	r3, r3
 800095a:	4649      	mov	r1, r9
 800095c:	425b      	negs	r3, r3
 800095e:	1acb      	subs	r3, r1, r3
 8000960:	469a      	mov	sl, r3
 8000962:	4665      	mov	r5, ip
 8000964:	0016      	movs	r6, r2
 8000966:	e61b      	b.n	80005a0 <__aeabi_dadd+0x98>
 8000968:	000c      	movs	r4, r1
 800096a:	431c      	orrs	r4, r3
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x468>
 800096e:	e0c7      	b.n	8000b00 <__aeabi_dadd+0x5f8>
 8000970:	1e7c      	subs	r4, r7, #1
 8000972:	2f01      	cmp	r7, #1
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x470>
 8000976:	e0f9      	b.n	8000b6c <__aeabi_dadd+0x664>
 8000978:	4e91      	ldr	r6, [pc, #580]	; (8000bc0 <__aeabi_dadd+0x6b8>)
 800097a:	42b7      	cmp	r7, r6
 800097c:	d05c      	beq.n	8000a38 <__aeabi_dadd+0x530>
 800097e:	0027      	movs	r7, r4
 8000980:	e740      	b.n	8000804 <__aeabi_dadd+0x2fc>
 8000982:	2220      	movs	r2, #32
 8000984:	464c      	mov	r4, r9
 8000986:	4640      	mov	r0, r8
 8000988:	1bd2      	subs	r2, r2, r7
 800098a:	4094      	lsls	r4, r2
 800098c:	40f8      	lsrs	r0, r7
 800098e:	4304      	orrs	r4, r0
 8000990:	4640      	mov	r0, r8
 8000992:	4090      	lsls	r0, r2
 8000994:	1e42      	subs	r2, r0, #1
 8000996:	4190      	sbcs	r0, r2
 8000998:	464a      	mov	r2, r9
 800099a:	40fa      	lsrs	r2, r7
 800099c:	4304      	orrs	r4, r0
 800099e:	1889      	adds	r1, r1, r2
 80009a0:	e6ee      	b.n	8000780 <__aeabi_dadd+0x278>
 80009a2:	4c87      	ldr	r4, [pc, #540]	; (8000bc0 <__aeabi_dadd+0x6b8>)
 80009a4:	42a2      	cmp	r2, r4
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x4a2>
 80009a8:	e6f9      	b.n	800079e <__aeabi_dadd+0x296>
 80009aa:	1818      	adds	r0, r3, r0
 80009ac:	4298      	cmp	r0, r3
 80009ae:	419b      	sbcs	r3, r3
 80009b0:	4449      	add	r1, r9
 80009b2:	425b      	negs	r3, r3
 80009b4:	18cb      	adds	r3, r1, r3
 80009b6:	07dc      	lsls	r4, r3, #31
 80009b8:	0840      	lsrs	r0, r0, #1
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	469a      	mov	sl, r3
 80009be:	0016      	movs	r6, r2
 80009c0:	4304      	orrs	r4, r0
 80009c2:	e6c6      	b.n	8000752 <__aeabi_dadd+0x24a>
 80009c4:	4642      	mov	r2, r8
 80009c6:	1ad4      	subs	r4, r2, r3
 80009c8:	45a0      	cmp	r8, r4
 80009ca:	4180      	sbcs	r0, r0
 80009cc:	464b      	mov	r3, r9
 80009ce:	4240      	negs	r0, r0
 80009d0:	1a59      	subs	r1, r3, r1
 80009d2:	1a0b      	subs	r3, r1, r0
 80009d4:	469a      	mov	sl, r3
 80009d6:	4665      	mov	r5, ip
 80009d8:	e5ea      	b.n	80005b0 <__aeabi_dadd+0xa8>
 80009da:	464b      	mov	r3, r9
 80009dc:	464a      	mov	r2, r9
 80009de:	08c0      	lsrs	r0, r0, #3
 80009e0:	075b      	lsls	r3, r3, #29
 80009e2:	4665      	mov	r5, ip
 80009e4:	4303      	orrs	r3, r0
 80009e6:	08d1      	lsrs	r1, r2, #3
 80009e8:	e6bd      	b.n	8000766 <__aeabi_dadd+0x25e>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x4e8>
 80009ee:	e08e      	b.n	8000b0e <__aeabi_dadd+0x606>
 80009f0:	464b      	mov	r3, r9
 80009f2:	4303      	orrs	r3, r0
 80009f4:	d117      	bne.n	8000a26 <__aeabi_dadd+0x51e>
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	2500      	movs	r5, #0
 80009fa:	0309      	lsls	r1, r1, #12
 80009fc:	e6da      	b.n	80007b4 <__aeabi_dadd+0x2ac>
 80009fe:	074a      	lsls	r2, r1, #29
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	08c9      	lsrs	r1, r1, #3
 8000a06:	e6d1      	b.n	80007ac <__aeabi_dadd+0x2a4>
 8000a08:	1a1c      	subs	r4, r3, r0
 8000a0a:	464a      	mov	r2, r9
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	419b      	sbcs	r3, r3
 8000a10:	1a89      	subs	r1, r1, r2
 8000a12:	425b      	negs	r3, r3
 8000a14:	1acb      	subs	r3, r1, r3
 8000a16:	469a      	mov	sl, r3
 8000a18:	2601      	movs	r6, #1
 8000a1a:	e5c1      	b.n	80005a0 <__aeabi_dadd+0x98>
 8000a1c:	074a      	lsls	r2, r1, #29
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	e69f      	b.n	8000766 <__aeabi_dadd+0x25e>
 8000a26:	4643      	mov	r3, r8
 8000a28:	08d8      	lsrs	r0, r3, #3
 8000a2a:	464b      	mov	r3, r9
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	075b      	lsls	r3, r3, #29
 8000a30:	4665      	mov	r5, ip
 8000a32:	4303      	orrs	r3, r0
 8000a34:	08d1      	lsrs	r1, r2, #3
 8000a36:	e6b9      	b.n	80007ac <__aeabi_dadd+0x2a4>
 8000a38:	4643      	mov	r3, r8
 8000a3a:	08d8      	lsrs	r0, r3, #3
 8000a3c:	464b      	mov	r3, r9
 8000a3e:	464a      	mov	r2, r9
 8000a40:	075b      	lsls	r3, r3, #29
 8000a42:	4303      	orrs	r3, r0
 8000a44:	08d1      	lsrs	r1, r2, #3
 8000a46:	e6b1      	b.n	80007ac <__aeabi_dadd+0x2a4>
 8000a48:	4319      	orrs	r1, r3
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	1e63      	subs	r3, r4, #1
 8000a4e:	419c      	sbcs	r4, r3
 8000a50:	e6eb      	b.n	800082a <__aeabi_dadd+0x322>
 8000a52:	003c      	movs	r4, r7
 8000a54:	000d      	movs	r5, r1
 8000a56:	3c20      	subs	r4, #32
 8000a58:	40e5      	lsrs	r5, r4
 8000a5a:	2f20      	cmp	r7, #32
 8000a5c:	d003      	beq.n	8000a66 <__aeabi_dadd+0x55e>
 8000a5e:	2440      	movs	r4, #64	; 0x40
 8000a60:	1be4      	subs	r4, r4, r7
 8000a62:	40a1      	lsls	r1, r4
 8000a64:	430b      	orrs	r3, r1
 8000a66:	001c      	movs	r4, r3
 8000a68:	1e63      	subs	r3, r4, #1
 8000a6a:	419c      	sbcs	r4, r3
 8000a6c:	432c      	orrs	r4, r5
 8000a6e:	e770      	b.n	8000952 <__aeabi_dadd+0x44a>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	d0e1      	beq.n	8000a38 <__aeabi_dadd+0x530>
 8000a74:	464a      	mov	r2, r9
 8000a76:	4302      	orrs	r2, r0
 8000a78:	d0c1      	beq.n	80009fe <__aeabi_dadd+0x4f6>
 8000a7a:	074a      	lsls	r2, r1, #29
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	08c9      	lsrs	r1, r1, #3
 8000a84:	0312      	lsls	r2, r2, #12
 8000a86:	4211      	tst	r1, r2
 8000a88:	d008      	beq.n	8000a9c <__aeabi_dadd+0x594>
 8000a8a:	4648      	mov	r0, r9
 8000a8c:	08c4      	lsrs	r4, r0, #3
 8000a8e:	4214      	tst	r4, r2
 8000a90:	d104      	bne.n	8000a9c <__aeabi_dadd+0x594>
 8000a92:	4643      	mov	r3, r8
 8000a94:	0021      	movs	r1, r4
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	0742      	lsls	r2, r0, #29
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	0f5a      	lsrs	r2, r3, #29
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	0752      	lsls	r2, r2, #29
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	e681      	b.n	80007ac <__aeabi_dadd+0x2a4>
 8000aa8:	464b      	mov	r3, r9
 8000aaa:	4303      	orrs	r3, r0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x5a8>
 8000aae:	e714      	b.n	80008da <__aeabi_dadd+0x3d2>
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	464a      	mov	r2, r9
 8000ab4:	08c0      	lsrs	r0, r0, #3
 8000ab6:	075b      	lsls	r3, r3, #29
 8000ab8:	4665      	mov	r5, ip
 8000aba:	4303      	orrs	r3, r0
 8000abc:	08d1      	lsrs	r1, r2, #3
 8000abe:	e655      	b.n	800076c <__aeabi_dadd+0x264>
 8000ac0:	1ac4      	subs	r4, r0, r3
 8000ac2:	45a0      	cmp	r8, r4
 8000ac4:	4180      	sbcs	r0, r0
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	4240      	negs	r0, r0
 8000aca:	1a59      	subs	r1, r3, r1
 8000acc:	1a0b      	subs	r3, r1, r0
 8000ace:	469a      	mov	sl, r3
 8000ad0:	4665      	mov	r5, ip
 8000ad2:	2601      	movs	r6, #1
 8000ad4:	e564      	b.n	80005a0 <__aeabi_dadd+0x98>
 8000ad6:	1a1c      	subs	r4, r3, r0
 8000ad8:	464a      	mov	r2, r9
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	4180      	sbcs	r0, r0
 8000ade:	1a8a      	subs	r2, r1, r2
 8000ae0:	4240      	negs	r0, r0
 8000ae2:	1a12      	subs	r2, r2, r0
 8000ae4:	4692      	mov	sl, r2
 8000ae6:	0212      	lsls	r2, r2, #8
 8000ae8:	d549      	bpl.n	8000b7e <__aeabi_dadd+0x676>
 8000aea:	4642      	mov	r2, r8
 8000aec:	1ad4      	subs	r4, r2, r3
 8000aee:	45a0      	cmp	r8, r4
 8000af0:	4180      	sbcs	r0, r0
 8000af2:	464b      	mov	r3, r9
 8000af4:	4240      	negs	r0, r0
 8000af6:	1a59      	subs	r1, r3, r1
 8000af8:	1a0b      	subs	r3, r1, r0
 8000afa:	469a      	mov	sl, r3
 8000afc:	4665      	mov	r5, ip
 8000afe:	e57f      	b.n	8000600 <__aeabi_dadd+0xf8>
 8000b00:	464b      	mov	r3, r9
 8000b02:	464a      	mov	r2, r9
 8000b04:	08c0      	lsrs	r0, r0, #3
 8000b06:	075b      	lsls	r3, r3, #29
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	08d1      	lsrs	r1, r2, #3
 8000b0c:	e62b      	b.n	8000766 <__aeabi_dadd+0x25e>
 8000b0e:	464a      	mov	r2, r9
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d138      	bne.n	8000b88 <__aeabi_dadd+0x680>
 8000b16:	074a      	lsls	r2, r1, #29
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	08c9      	lsrs	r1, r1, #3
 8000b1c:	e646      	b.n	80007ac <__aeabi_dadd+0x2a4>
 8000b1e:	464b      	mov	r3, r9
 8000b20:	464a      	mov	r2, r9
 8000b22:	08c0      	lsrs	r0, r0, #3
 8000b24:	075b      	lsls	r3, r3, #29
 8000b26:	4303      	orrs	r3, r0
 8000b28:	08d1      	lsrs	r1, r2, #3
 8000b2a:	e61f      	b.n	800076c <__aeabi_dadd+0x264>
 8000b2c:	181c      	adds	r4, r3, r0
 8000b2e:	429c      	cmp	r4, r3
 8000b30:	419b      	sbcs	r3, r3
 8000b32:	4449      	add	r1, r9
 8000b34:	468a      	mov	sl, r1
 8000b36:	425b      	negs	r3, r3
 8000b38:	449a      	add	sl, r3
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	d400      	bmi.n	8000b42 <__aeabi_dadd+0x63a>
 8000b40:	e607      	b.n	8000752 <__aeabi_dadd+0x24a>
 8000b42:	4652      	mov	r2, sl
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <__aeabi_dadd+0x6bc>)
 8000b46:	2601      	movs	r6, #1
 8000b48:	401a      	ands	r2, r3
 8000b4a:	4692      	mov	sl, r2
 8000b4c:	e601      	b.n	8000752 <__aeabi_dadd+0x24a>
 8000b4e:	003c      	movs	r4, r7
 8000b50:	000e      	movs	r6, r1
 8000b52:	3c20      	subs	r4, #32
 8000b54:	40e6      	lsrs	r6, r4
 8000b56:	2f20      	cmp	r7, #32
 8000b58:	d003      	beq.n	8000b62 <__aeabi_dadd+0x65a>
 8000b5a:	2440      	movs	r4, #64	; 0x40
 8000b5c:	1be4      	subs	r4, r4, r7
 8000b5e:	40a1      	lsls	r1, r4
 8000b60:	430b      	orrs	r3, r1
 8000b62:	001c      	movs	r4, r3
 8000b64:	1e63      	subs	r3, r4, #1
 8000b66:	419c      	sbcs	r4, r3
 8000b68:	4334      	orrs	r4, r6
 8000b6a:	e65e      	b.n	800082a <__aeabi_dadd+0x322>
 8000b6c:	4443      	add	r3, r8
 8000b6e:	4283      	cmp	r3, r0
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	4449      	add	r1, r9
 8000b74:	468a      	mov	sl, r1
 8000b76:	4240      	negs	r0, r0
 8000b78:	001c      	movs	r4, r3
 8000b7a:	4482      	add	sl, r0
 8000b7c:	e6bc      	b.n	80008f8 <__aeabi_dadd+0x3f0>
 8000b7e:	4653      	mov	r3, sl
 8000b80:	4323      	orrs	r3, r4
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x67e>
 8000b84:	e6a9      	b.n	80008da <__aeabi_dadd+0x3d2>
 8000b86:	e5e4      	b.n	8000752 <__aeabi_dadd+0x24a>
 8000b88:	074a      	lsls	r2, r1, #29
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	08c9      	lsrs	r1, r1, #3
 8000b90:	0312      	lsls	r2, r2, #12
 8000b92:	4211      	tst	r1, r2
 8000b94:	d009      	beq.n	8000baa <__aeabi_dadd+0x6a2>
 8000b96:	4648      	mov	r0, r9
 8000b98:	08c4      	lsrs	r4, r0, #3
 8000b9a:	4214      	tst	r4, r2
 8000b9c:	d105      	bne.n	8000baa <__aeabi_dadd+0x6a2>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	4665      	mov	r5, ip
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	08db      	lsrs	r3, r3, #3
 8000ba6:	0742      	lsls	r2, r0, #29
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	0f5a      	lsrs	r2, r3, #29
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	08db      	lsrs	r3, r3, #3
 8000bb0:	0752      	lsls	r2, r2, #29
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	e5fa      	b.n	80007ac <__aeabi_dadd+0x2a4>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	4a01      	ldr	r2, [pc, #4]	; (8000bc0 <__aeabi_dadd+0x6b8>)
 8000bba:	001c      	movs	r4, r3
 8000bbc:	e540      	b.n	8000640 <__aeabi_dadd+0x138>
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	000007ff 	.word	0x000007ff
 8000bc4:	ff7fffff 	.word	0xff7fffff

08000bc8 <__aeabi_ddiv>:
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	4657      	mov	r7, sl
 8000bcc:	464e      	mov	r6, r9
 8000bce:	4645      	mov	r5, r8
 8000bd0:	46de      	mov	lr, fp
 8000bd2:	b5e0      	push	{r5, r6, r7, lr}
 8000bd4:	030c      	lsls	r4, r1, #12
 8000bd6:	001f      	movs	r7, r3
 8000bd8:	004b      	lsls	r3, r1, #1
 8000bda:	4681      	mov	r9, r0
 8000bdc:	4692      	mov	sl, r2
 8000bde:	0005      	movs	r5, r0
 8000be0:	b085      	sub	sp, #20
 8000be2:	0b24      	lsrs	r4, r4, #12
 8000be4:	0d5b      	lsrs	r3, r3, #21
 8000be6:	0fce      	lsrs	r6, r1, #31
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_ddiv+0x26>
 8000bec:	e152      	b.n	8000e94 <__aeabi_ddiv+0x2cc>
 8000bee:	4ad2      	ldr	r2, [pc, #840]	; (8000f38 <__aeabi_ddiv+0x370>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_ddiv+0x2e>
 8000bf4:	e16e      	b.n	8000ed4 <__aeabi_ddiv+0x30c>
 8000bf6:	0f42      	lsrs	r2, r0, #29
 8000bf8:	00e4      	lsls	r4, r4, #3
 8000bfa:	4314      	orrs	r4, r2
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	0412      	lsls	r2, r2, #16
 8000c00:	4322      	orrs	r2, r4
 8000c02:	4690      	mov	r8, r2
 8000c04:	4acd      	ldr	r2, [pc, #820]	; (8000f3c <__aeabi_ddiv+0x374>)
 8000c06:	00c5      	lsls	r5, r0, #3
 8000c08:	4693      	mov	fp, r2
 8000c0a:	449b      	add	fp, r3
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4699      	mov	r9, r3
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	033c      	lsls	r4, r7, #12
 8000c14:	007b      	lsls	r3, r7, #1
 8000c16:	4650      	mov	r0, sl
 8000c18:	0b24      	lsrs	r4, r4, #12
 8000c1a:	0d5b      	lsrs	r3, r3, #21
 8000c1c:	0fff      	lsrs	r7, r7, #31
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_ddiv+0x5c>
 8000c22:	e11a      	b.n	8000e5a <__aeabi_ddiv+0x292>
 8000c24:	4ac4      	ldr	r2, [pc, #784]	; (8000f38 <__aeabi_ddiv+0x370>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d100      	bne.n	8000c2c <__aeabi_ddiv+0x64>
 8000c2a:	e15e      	b.n	8000eea <__aeabi_ddiv+0x322>
 8000c2c:	0f42      	lsrs	r2, r0, #29
 8000c2e:	00e4      	lsls	r4, r4, #3
 8000c30:	4322      	orrs	r2, r4
 8000c32:	2480      	movs	r4, #128	; 0x80
 8000c34:	0424      	lsls	r4, r4, #16
 8000c36:	4314      	orrs	r4, r2
 8000c38:	4ac0      	ldr	r2, [pc, #768]	; (8000f3c <__aeabi_ddiv+0x374>)
 8000c3a:	00c1      	lsls	r1, r0, #3
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	465a      	mov	r2, fp
 8000c40:	4463      	add	r3, ip
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	469b      	mov	fp, r3
 8000c46:	2000      	movs	r0, #0
 8000c48:	0033      	movs	r3, r6
 8000c4a:	407b      	eors	r3, r7
 8000c4c:	469a      	mov	sl, r3
 8000c4e:	464b      	mov	r3, r9
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d827      	bhi.n	8000ca4 <__aeabi_ddiv+0xdc>
 8000c54:	4aba      	ldr	r2, [pc, #744]	; (8000f40 <__aeabi_ddiv+0x378>)
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	58d3      	ldr	r3, [r2, r3]
 8000c5a:	469f      	mov	pc, r3
 8000c5c:	46b2      	mov	sl, r6
 8000c5e:	9b00      	ldr	r3, [sp, #0]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d016      	beq.n	8000c92 <__aeabi_ddiv+0xca>
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d100      	bne.n	8000c6a <__aeabi_ddiv+0xa2>
 8000c68:	e287      	b.n	800117a <__aeabi_ddiv+0x5b2>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d000      	beq.n	8000c70 <__aeabi_ddiv+0xa8>
 8000c6e:	e0d5      	b.n	8000e1c <__aeabi_ddiv+0x254>
 8000c70:	2300      	movs	r3, #0
 8000c72:	2200      	movs	r2, #0
 8000c74:	2500      	movs	r5, #0
 8000c76:	051b      	lsls	r3, r3, #20
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	4652      	mov	r2, sl
 8000c7c:	07d2      	lsls	r2, r2, #31
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	0028      	movs	r0, r5
 8000c82:	0019      	movs	r1, r3
 8000c84:	b005      	add	sp, #20
 8000c86:	bcf0      	pop	{r4, r5, r6, r7}
 8000c88:	46bb      	mov	fp, r7
 8000c8a:	46b2      	mov	sl, r6
 8000c8c:	46a9      	mov	r9, r5
 8000c8e:	46a0      	mov	r8, r4
 8000c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c92:	2200      	movs	r2, #0
 8000c94:	2500      	movs	r5, #0
 8000c96:	4ba8      	ldr	r3, [pc, #672]	; (8000f38 <__aeabi_ddiv+0x370>)
 8000c98:	e7ed      	b.n	8000c76 <__aeabi_ddiv+0xae>
 8000c9a:	46ba      	mov	sl, r7
 8000c9c:	46a0      	mov	r8, r4
 8000c9e:	000d      	movs	r5, r1
 8000ca0:	9000      	str	r0, [sp, #0]
 8000ca2:	e7dc      	b.n	8000c5e <__aeabi_ddiv+0x96>
 8000ca4:	4544      	cmp	r4, r8
 8000ca6:	d200      	bcs.n	8000caa <__aeabi_ddiv+0xe2>
 8000ca8:	e1c4      	b.n	8001034 <__aeabi_ddiv+0x46c>
 8000caa:	d100      	bne.n	8000cae <__aeabi_ddiv+0xe6>
 8000cac:	e1bf      	b.n	800102e <__aeabi_ddiv+0x466>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	469c      	mov	ip, r3
 8000cb4:	002e      	movs	r6, r5
 8000cb6:	4640      	mov	r0, r8
 8000cb8:	2500      	movs	r5, #0
 8000cba:	44e3      	add	fp, ip
 8000cbc:	0223      	lsls	r3, r4, #8
 8000cbe:	0e0c      	lsrs	r4, r1, #24
 8000cc0:	431c      	orrs	r4, r3
 8000cc2:	0c1b      	lsrs	r3, r3, #16
 8000cc4:	4699      	mov	r9, r3
 8000cc6:	0423      	lsls	r3, r4, #16
 8000cc8:	020a      	lsls	r2, r1, #8
 8000cca:	0c1f      	lsrs	r7, r3, #16
 8000ccc:	4649      	mov	r1, r9
 8000cce:	9200      	str	r2, [sp, #0]
 8000cd0:	9701      	str	r7, [sp, #4]
 8000cd2:	f7ff fabd 	bl	8000250 <__aeabi_uidivmod>
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	437a      	muls	r2, r7
 8000cda:	040b      	lsls	r3, r1, #16
 8000cdc:	0c31      	lsrs	r1, r6, #16
 8000cde:	4680      	mov	r8, r0
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	d907      	bls.n	8000cf6 <__aeabi_ddiv+0x12e>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	469c      	mov	ip, r3
 8000cec:	1909      	adds	r1, r1, r4
 8000cee:	44e0      	add	r8, ip
 8000cf0:	428c      	cmp	r4, r1
 8000cf2:	d800      	bhi.n	8000cf6 <__aeabi_ddiv+0x12e>
 8000cf4:	e201      	b.n	80010fa <__aeabi_ddiv+0x532>
 8000cf6:	1a88      	subs	r0, r1, r2
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	f7ff faa9 	bl	8000250 <__aeabi_uidivmod>
 8000cfe:	9a01      	ldr	r2, [sp, #4]
 8000d00:	0436      	lsls	r6, r6, #16
 8000d02:	4342      	muls	r2, r0
 8000d04:	0409      	lsls	r1, r1, #16
 8000d06:	0c36      	lsrs	r6, r6, #16
 8000d08:	0003      	movs	r3, r0
 8000d0a:	430e      	orrs	r6, r1
 8000d0c:	42b2      	cmp	r2, r6
 8000d0e:	d904      	bls.n	8000d1a <__aeabi_ddiv+0x152>
 8000d10:	1936      	adds	r6, r6, r4
 8000d12:	3b01      	subs	r3, #1
 8000d14:	42b4      	cmp	r4, r6
 8000d16:	d800      	bhi.n	8000d1a <__aeabi_ddiv+0x152>
 8000d18:	e1e9      	b.n	80010ee <__aeabi_ddiv+0x526>
 8000d1a:	1ab0      	subs	r0, r6, r2
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	9e00      	ldr	r6, [sp, #0]
 8000d20:	0412      	lsls	r2, r2, #16
 8000d22:	431a      	orrs	r2, r3
 8000d24:	0c33      	lsrs	r3, r6, #16
 8000d26:	001f      	movs	r7, r3
 8000d28:	0c11      	lsrs	r1, r2, #16
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	0413      	lsls	r3, r2, #16
 8000d30:	0432      	lsls	r2, r6, #16
 8000d32:	0c16      	lsrs	r6, r2, #16
 8000d34:	0032      	movs	r2, r6
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	435a      	muls	r2, r3
 8000d3a:	9603      	str	r6, [sp, #12]
 8000d3c:	437b      	muls	r3, r7
 8000d3e:	434e      	muls	r6, r1
 8000d40:	4379      	muls	r1, r7
 8000d42:	0c17      	lsrs	r7, r2, #16
 8000d44:	46bc      	mov	ip, r7
 8000d46:	199b      	adds	r3, r3, r6
 8000d48:	4463      	add	r3, ip
 8000d4a:	429e      	cmp	r6, r3
 8000d4c:	d903      	bls.n	8000d56 <__aeabi_ddiv+0x18e>
 8000d4e:	2680      	movs	r6, #128	; 0x80
 8000d50:	0276      	lsls	r6, r6, #9
 8000d52:	46b4      	mov	ip, r6
 8000d54:	4461      	add	r1, ip
 8000d56:	0c1e      	lsrs	r6, r3, #16
 8000d58:	1871      	adds	r1, r6, r1
 8000d5a:	0416      	lsls	r6, r2, #16
 8000d5c:	041b      	lsls	r3, r3, #16
 8000d5e:	0c36      	lsrs	r6, r6, #16
 8000d60:	199e      	adds	r6, r3, r6
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d302      	bcc.n	8000d6c <__aeabi_ddiv+0x1a4>
 8000d66:	d112      	bne.n	8000d8e <__aeabi_ddiv+0x1c6>
 8000d68:	42b5      	cmp	r5, r6
 8000d6a:	d210      	bcs.n	8000d8e <__aeabi_ddiv+0x1c6>
 8000d6c:	4643      	mov	r3, r8
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	9b00      	ldr	r3, [sp, #0]
 8000d72:	469c      	mov	ip, r3
 8000d74:	4465      	add	r5, ip
 8000d76:	001f      	movs	r7, r3
 8000d78:	429d      	cmp	r5, r3
 8000d7a:	419b      	sbcs	r3, r3
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	191b      	adds	r3, r3, r4
 8000d80:	18c0      	adds	r0, r0, r3
 8000d82:	4284      	cmp	r4, r0
 8000d84:	d200      	bcs.n	8000d88 <__aeabi_ddiv+0x1c0>
 8000d86:	e19e      	b.n	80010c6 <__aeabi_ddiv+0x4fe>
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x1c4>
 8000d8a:	e199      	b.n	80010c0 <__aeabi_ddiv+0x4f8>
 8000d8c:	4690      	mov	r8, r2
 8000d8e:	1bae      	subs	r6, r5, r6
 8000d90:	42b5      	cmp	r5, r6
 8000d92:	41ad      	sbcs	r5, r5
 8000d94:	1a40      	subs	r0, r0, r1
 8000d96:	426d      	negs	r5, r5
 8000d98:	1b40      	subs	r0, r0, r5
 8000d9a:	4284      	cmp	r4, r0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_ddiv+0x1d8>
 8000d9e:	e1d2      	b.n	8001146 <__aeabi_ddiv+0x57e>
 8000da0:	4649      	mov	r1, r9
 8000da2:	f7ff fa55 	bl	8000250 <__aeabi_uidivmod>
 8000da6:	9a01      	ldr	r2, [sp, #4]
 8000da8:	040b      	lsls	r3, r1, #16
 8000daa:	4342      	muls	r2, r0
 8000dac:	0c31      	lsrs	r1, r6, #16
 8000dae:	0005      	movs	r5, r0
 8000db0:	4319      	orrs	r1, r3
 8000db2:	428a      	cmp	r2, r1
 8000db4:	d900      	bls.n	8000db8 <__aeabi_ddiv+0x1f0>
 8000db6:	e16c      	b.n	8001092 <__aeabi_ddiv+0x4ca>
 8000db8:	1a88      	subs	r0, r1, r2
 8000dba:	4649      	mov	r1, r9
 8000dbc:	f7ff fa48 	bl	8000250 <__aeabi_uidivmod>
 8000dc0:	9a01      	ldr	r2, [sp, #4]
 8000dc2:	0436      	lsls	r6, r6, #16
 8000dc4:	4342      	muls	r2, r0
 8000dc6:	0409      	lsls	r1, r1, #16
 8000dc8:	0c36      	lsrs	r6, r6, #16
 8000dca:	0003      	movs	r3, r0
 8000dcc:	430e      	orrs	r6, r1
 8000dce:	42b2      	cmp	r2, r6
 8000dd0:	d900      	bls.n	8000dd4 <__aeabi_ddiv+0x20c>
 8000dd2:	e153      	b.n	800107c <__aeabi_ddiv+0x4b4>
 8000dd4:	9803      	ldr	r0, [sp, #12]
 8000dd6:	1ab6      	subs	r6, r6, r2
 8000dd8:	0002      	movs	r2, r0
 8000dda:	042d      	lsls	r5, r5, #16
 8000ddc:	431d      	orrs	r5, r3
 8000dde:	9f02      	ldr	r7, [sp, #8]
 8000de0:	042b      	lsls	r3, r5, #16
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	435a      	muls	r2, r3
 8000de6:	437b      	muls	r3, r7
 8000de8:	469c      	mov	ip, r3
 8000dea:	0c29      	lsrs	r1, r5, #16
 8000dec:	4348      	muls	r0, r1
 8000dee:	0c13      	lsrs	r3, r2, #16
 8000df0:	4484      	add	ip, r0
 8000df2:	4463      	add	r3, ip
 8000df4:	4379      	muls	r1, r7
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d903      	bls.n	8000e02 <__aeabi_ddiv+0x23a>
 8000dfa:	2080      	movs	r0, #128	; 0x80
 8000dfc:	0240      	lsls	r0, r0, #9
 8000dfe:	4684      	mov	ip, r0
 8000e00:	4461      	add	r1, ip
 8000e02:	0c18      	lsrs	r0, r3, #16
 8000e04:	0412      	lsls	r2, r2, #16
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	0c12      	lsrs	r2, r2, #16
 8000e0a:	1840      	adds	r0, r0, r1
 8000e0c:	189b      	adds	r3, r3, r2
 8000e0e:	4286      	cmp	r6, r0
 8000e10:	d200      	bcs.n	8000e14 <__aeabi_ddiv+0x24c>
 8000e12:	e100      	b.n	8001016 <__aeabi_ddiv+0x44e>
 8000e14:	d100      	bne.n	8000e18 <__aeabi_ddiv+0x250>
 8000e16:	e0fb      	b.n	8001010 <__aeabi_ddiv+0x448>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	431d      	orrs	r5, r3
 8000e1c:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <__aeabi_ddiv+0x37c>)
 8000e1e:	445b      	add	r3, fp
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_ddiv+0x25e>
 8000e24:	e0aa      	b.n	8000f7c <__aeabi_ddiv+0x3b4>
 8000e26:	076a      	lsls	r2, r5, #29
 8000e28:	d000      	beq.n	8000e2c <__aeabi_ddiv+0x264>
 8000e2a:	e13d      	b.n	80010a8 <__aeabi_ddiv+0x4e0>
 8000e2c:	08e9      	lsrs	r1, r5, #3
 8000e2e:	4642      	mov	r2, r8
 8000e30:	01d2      	lsls	r2, r2, #7
 8000e32:	d506      	bpl.n	8000e42 <__aeabi_ddiv+0x27a>
 8000e34:	4642      	mov	r2, r8
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <__aeabi_ddiv+0x380>)
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	445b      	add	r3, fp
 8000e42:	4a42      	ldr	r2, [pc, #264]	; (8000f4c <__aeabi_ddiv+0x384>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	dd00      	ble.n	8000e4a <__aeabi_ddiv+0x282>
 8000e48:	e723      	b.n	8000c92 <__aeabi_ddiv+0xca>
 8000e4a:	4642      	mov	r2, r8
 8000e4c:	055b      	lsls	r3, r3, #21
 8000e4e:	0755      	lsls	r5, r2, #29
 8000e50:	0252      	lsls	r2, r2, #9
 8000e52:	430d      	orrs	r5, r1
 8000e54:	0b12      	lsrs	r2, r2, #12
 8000e56:	0d5b      	lsrs	r3, r3, #21
 8000e58:	e70d      	b.n	8000c76 <__aeabi_ddiv+0xae>
 8000e5a:	4651      	mov	r1, sl
 8000e5c:	4321      	orrs	r1, r4
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_ddiv+0x29a>
 8000e60:	e07c      	b.n	8000f5c <__aeabi_ddiv+0x394>
 8000e62:	2c00      	cmp	r4, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_ddiv+0x2a0>
 8000e66:	e0fb      	b.n	8001060 <__aeabi_ddiv+0x498>
 8000e68:	0020      	movs	r0, r4
 8000e6a:	f001 f977 	bl	800215c <__clzsi2>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	3a0b      	subs	r2, #11
 8000e72:	231d      	movs	r3, #29
 8000e74:	1a9b      	subs	r3, r3, r2
 8000e76:	4652      	mov	r2, sl
 8000e78:	0001      	movs	r1, r0
 8000e7a:	40da      	lsrs	r2, r3
 8000e7c:	4653      	mov	r3, sl
 8000e7e:	3908      	subs	r1, #8
 8000e80:	408b      	lsls	r3, r1
 8000e82:	408c      	lsls	r4, r1
 8000e84:	0019      	movs	r1, r3
 8000e86:	4314      	orrs	r4, r2
 8000e88:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <__aeabi_ddiv+0x388>)
 8000e8a:	4458      	add	r0, fp
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	4483      	add	fp, r0
 8000e90:	2000      	movs	r0, #0
 8000e92:	e6d9      	b.n	8000c48 <__aeabi_ddiv+0x80>
 8000e94:	0003      	movs	r3, r0
 8000e96:	4323      	orrs	r3, r4
 8000e98:	4698      	mov	r8, r3
 8000e9a:	d044      	beq.n	8000f26 <__aeabi_ddiv+0x35e>
 8000e9c:	2c00      	cmp	r4, #0
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x2da>
 8000ea0:	e0cf      	b.n	8001042 <__aeabi_ddiv+0x47a>
 8000ea2:	0020      	movs	r0, r4
 8000ea4:	f001 f95a 	bl	800215c <__clzsi2>
 8000ea8:	0001      	movs	r1, r0
 8000eaa:	0002      	movs	r2, r0
 8000eac:	390b      	subs	r1, #11
 8000eae:	231d      	movs	r3, #29
 8000eb0:	1a5b      	subs	r3, r3, r1
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	40d9      	lsrs	r1, r3
 8000eb8:	3808      	subs	r0, #8
 8000eba:	4084      	lsls	r4, r0
 8000ebc:	000b      	movs	r3, r1
 8000ebe:	464d      	mov	r5, r9
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	4698      	mov	r8, r3
 8000ec4:	4085      	lsls	r5, r0
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <__aeabi_ddiv+0x38c>)
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	469b      	mov	fp, r3
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4699      	mov	r9, r3
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	e69e      	b.n	8000c12 <__aeabi_ddiv+0x4a>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	4322      	orrs	r2, r4
 8000ed8:	4690      	mov	r8, r2
 8000eda:	d11d      	bne.n	8000f18 <__aeabi_ddiv+0x350>
 8000edc:	2208      	movs	r2, #8
 8000ede:	469b      	mov	fp, r3
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	2500      	movs	r5, #0
 8000ee4:	4691      	mov	r9, r2
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	e693      	b.n	8000c12 <__aeabi_ddiv+0x4a>
 8000eea:	4651      	mov	r1, sl
 8000eec:	4321      	orrs	r1, r4
 8000eee:	d109      	bne.n	8000f04 <__aeabi_ddiv+0x33c>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	464a      	mov	r2, r9
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <__aeabi_ddiv+0x390>)
 8000ef8:	4691      	mov	r9, r2
 8000efa:	469c      	mov	ip, r3
 8000efc:	2400      	movs	r4, #0
 8000efe:	2002      	movs	r0, #2
 8000f00:	44e3      	add	fp, ip
 8000f02:	e6a1      	b.n	8000c48 <__aeabi_ddiv+0x80>
 8000f04:	2303      	movs	r3, #3
 8000f06:	464a      	mov	r2, r9
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <__aeabi_ddiv+0x390>)
 8000f0c:	4691      	mov	r9, r2
 8000f0e:	469c      	mov	ip, r3
 8000f10:	4651      	mov	r1, sl
 8000f12:	2003      	movs	r0, #3
 8000f14:	44e3      	add	fp, ip
 8000f16:	e697      	b.n	8000c48 <__aeabi_ddiv+0x80>
 8000f18:	220c      	movs	r2, #12
 8000f1a:	469b      	mov	fp, r3
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	46a0      	mov	r8, r4
 8000f20:	4691      	mov	r9, r2
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	e675      	b.n	8000c12 <__aeabi_ddiv+0x4a>
 8000f26:	2304      	movs	r3, #4
 8000f28:	4699      	mov	r9, r3
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	469b      	mov	fp, r3
 8000f2e:	3301      	adds	r3, #1
 8000f30:	2500      	movs	r5, #0
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	e66d      	b.n	8000c12 <__aeabi_ddiv+0x4a>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	fffffc01 	.word	0xfffffc01
 8000f40:	08006254 	.word	0x08006254
 8000f44:	000003ff 	.word	0x000003ff
 8000f48:	feffffff 	.word	0xfeffffff
 8000f4c:	000007fe 	.word	0x000007fe
 8000f50:	000003f3 	.word	0x000003f3
 8000f54:	fffffc0d 	.word	0xfffffc0d
 8000f58:	fffff801 	.word	0xfffff801
 8000f5c:	464a      	mov	r2, r9
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	4691      	mov	r9, r2
 8000f64:	2400      	movs	r4, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	e66e      	b.n	8000c48 <__aeabi_ddiv+0x80>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	469a      	mov	sl, r3
 8000f70:	2500      	movs	r5, #0
 8000f72:	4b88      	ldr	r3, [pc, #544]	; (8001194 <__aeabi_ddiv+0x5cc>)
 8000f74:	0312      	lsls	r2, r2, #12
 8000f76:	e67e      	b.n	8000c76 <__aeabi_ddiv+0xae>
 8000f78:	2501      	movs	r5, #1
 8000f7a:	426d      	negs	r5, r5
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	1ad2      	subs	r2, r2, r3
 8000f80:	2a38      	cmp	r2, #56	; 0x38
 8000f82:	dd00      	ble.n	8000f86 <__aeabi_ddiv+0x3be>
 8000f84:	e674      	b.n	8000c70 <__aeabi_ddiv+0xa8>
 8000f86:	2a1f      	cmp	r2, #31
 8000f88:	dc00      	bgt.n	8000f8c <__aeabi_ddiv+0x3c4>
 8000f8a:	e0bd      	b.n	8001108 <__aeabi_ddiv+0x540>
 8000f8c:	211f      	movs	r1, #31
 8000f8e:	4249      	negs	r1, r1
 8000f90:	1acb      	subs	r3, r1, r3
 8000f92:	4641      	mov	r1, r8
 8000f94:	40d9      	lsrs	r1, r3
 8000f96:	000b      	movs	r3, r1
 8000f98:	2a20      	cmp	r2, #32
 8000f9a:	d004      	beq.n	8000fa6 <__aeabi_ddiv+0x3de>
 8000f9c:	4641      	mov	r1, r8
 8000f9e:	4a7e      	ldr	r2, [pc, #504]	; (8001198 <__aeabi_ddiv+0x5d0>)
 8000fa0:	445a      	add	r2, fp
 8000fa2:	4091      	lsls	r1, r2
 8000fa4:	430d      	orrs	r5, r1
 8000fa6:	0029      	movs	r1, r5
 8000fa8:	1e4a      	subs	r2, r1, #1
 8000faa:	4191      	sbcs	r1, r2
 8000fac:	4319      	orrs	r1, r3
 8000fae:	2307      	movs	r3, #7
 8000fb0:	001d      	movs	r5, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	400d      	ands	r5, r1
 8000fb6:	420b      	tst	r3, r1
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x3f4>
 8000fba:	e0d0      	b.n	800115e <__aeabi_ddiv+0x596>
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	2a04      	cmp	r2, #4
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_ddiv+0x400>
 8000fc6:	e0c7      	b.n	8001158 <__aeabi_ddiv+0x590>
 8000fc8:	1d0a      	adds	r2, r1, #4
 8000fca:	428a      	cmp	r2, r1
 8000fcc:	4189      	sbcs	r1, r1
 8000fce:	4249      	negs	r1, r1
 8000fd0:	185b      	adds	r3, r3, r1
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	021a      	lsls	r2, r3, #8
 8000fd6:	d400      	bmi.n	8000fda <__aeabi_ddiv+0x412>
 8000fd8:	e0be      	b.n	8001158 <__aeabi_ddiv+0x590>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2500      	movs	r5, #0
 8000fe0:	e649      	b.n	8000c76 <__aeabi_ddiv+0xae>
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	0312      	lsls	r2, r2, #12
 8000fe8:	4213      	tst	r3, r2
 8000fea:	d008      	beq.n	8000ffe <__aeabi_ddiv+0x436>
 8000fec:	4214      	tst	r4, r2
 8000fee:	d106      	bne.n	8000ffe <__aeabi_ddiv+0x436>
 8000ff0:	4322      	orrs	r2, r4
 8000ff2:	0312      	lsls	r2, r2, #12
 8000ff4:	46ba      	mov	sl, r7
 8000ff6:	000d      	movs	r5, r1
 8000ff8:	4b66      	ldr	r3, [pc, #408]	; (8001194 <__aeabi_ddiv+0x5cc>)
 8000ffa:	0b12      	lsrs	r2, r2, #12
 8000ffc:	e63b      	b.n	8000c76 <__aeabi_ddiv+0xae>
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	4643      	mov	r3, r8
 8001002:	0312      	lsls	r2, r2, #12
 8001004:	431a      	orrs	r2, r3
 8001006:	0312      	lsls	r2, r2, #12
 8001008:	46b2      	mov	sl, r6
 800100a:	4b62      	ldr	r3, [pc, #392]	; (8001194 <__aeabi_ddiv+0x5cc>)
 800100c:	0b12      	lsrs	r2, r2, #12
 800100e:	e632      	b.n	8000c76 <__aeabi_ddiv+0xae>
 8001010:	2b00      	cmp	r3, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x44e>
 8001014:	e702      	b.n	8000e1c <__aeabi_ddiv+0x254>
 8001016:	19a6      	adds	r6, r4, r6
 8001018:	1e6a      	subs	r2, r5, #1
 800101a:	42a6      	cmp	r6, r4
 800101c:	d200      	bcs.n	8001020 <__aeabi_ddiv+0x458>
 800101e:	e089      	b.n	8001134 <__aeabi_ddiv+0x56c>
 8001020:	4286      	cmp	r6, r0
 8001022:	d200      	bcs.n	8001026 <__aeabi_ddiv+0x45e>
 8001024:	e09f      	b.n	8001166 <__aeabi_ddiv+0x59e>
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x462>
 8001028:	e0af      	b.n	800118a <__aeabi_ddiv+0x5c2>
 800102a:	0015      	movs	r5, r2
 800102c:	e6f4      	b.n	8000e18 <__aeabi_ddiv+0x250>
 800102e:	42a9      	cmp	r1, r5
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x46c>
 8001032:	e63c      	b.n	8000cae <__aeabi_ddiv+0xe6>
 8001034:	4643      	mov	r3, r8
 8001036:	07de      	lsls	r6, r3, #31
 8001038:	0858      	lsrs	r0, r3, #1
 800103a:	086b      	lsrs	r3, r5, #1
 800103c:	431e      	orrs	r6, r3
 800103e:	07ed      	lsls	r5, r5, #31
 8001040:	e63c      	b.n	8000cbc <__aeabi_ddiv+0xf4>
 8001042:	f001 f88b 	bl	800215c <__clzsi2>
 8001046:	0001      	movs	r1, r0
 8001048:	0002      	movs	r2, r0
 800104a:	3115      	adds	r1, #21
 800104c:	3220      	adds	r2, #32
 800104e:	291c      	cmp	r1, #28
 8001050:	dc00      	bgt.n	8001054 <__aeabi_ddiv+0x48c>
 8001052:	e72c      	b.n	8000eae <__aeabi_ddiv+0x2e6>
 8001054:	464b      	mov	r3, r9
 8001056:	3808      	subs	r0, #8
 8001058:	4083      	lsls	r3, r0
 800105a:	2500      	movs	r5, #0
 800105c:	4698      	mov	r8, r3
 800105e:	e732      	b.n	8000ec6 <__aeabi_ddiv+0x2fe>
 8001060:	f001 f87c 	bl	800215c <__clzsi2>
 8001064:	0003      	movs	r3, r0
 8001066:	001a      	movs	r2, r3
 8001068:	3215      	adds	r2, #21
 800106a:	3020      	adds	r0, #32
 800106c:	2a1c      	cmp	r2, #28
 800106e:	dc00      	bgt.n	8001072 <__aeabi_ddiv+0x4aa>
 8001070:	e6ff      	b.n	8000e72 <__aeabi_ddiv+0x2aa>
 8001072:	4654      	mov	r4, sl
 8001074:	3b08      	subs	r3, #8
 8001076:	2100      	movs	r1, #0
 8001078:	409c      	lsls	r4, r3
 800107a:	e705      	b.n	8000e88 <__aeabi_ddiv+0x2c0>
 800107c:	1936      	adds	r6, r6, r4
 800107e:	3b01      	subs	r3, #1
 8001080:	42b4      	cmp	r4, r6
 8001082:	d900      	bls.n	8001086 <__aeabi_ddiv+0x4be>
 8001084:	e6a6      	b.n	8000dd4 <__aeabi_ddiv+0x20c>
 8001086:	42b2      	cmp	r2, r6
 8001088:	d800      	bhi.n	800108c <__aeabi_ddiv+0x4c4>
 800108a:	e6a3      	b.n	8000dd4 <__aeabi_ddiv+0x20c>
 800108c:	1e83      	subs	r3, r0, #2
 800108e:	1936      	adds	r6, r6, r4
 8001090:	e6a0      	b.n	8000dd4 <__aeabi_ddiv+0x20c>
 8001092:	1909      	adds	r1, r1, r4
 8001094:	3d01      	subs	r5, #1
 8001096:	428c      	cmp	r4, r1
 8001098:	d900      	bls.n	800109c <__aeabi_ddiv+0x4d4>
 800109a:	e68d      	b.n	8000db8 <__aeabi_ddiv+0x1f0>
 800109c:	428a      	cmp	r2, r1
 800109e:	d800      	bhi.n	80010a2 <__aeabi_ddiv+0x4da>
 80010a0:	e68a      	b.n	8000db8 <__aeabi_ddiv+0x1f0>
 80010a2:	1e85      	subs	r5, r0, #2
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	e687      	b.n	8000db8 <__aeabi_ddiv+0x1f0>
 80010a8:	220f      	movs	r2, #15
 80010aa:	402a      	ands	r2, r5
 80010ac:	2a04      	cmp	r2, #4
 80010ae:	d100      	bne.n	80010b2 <__aeabi_ddiv+0x4ea>
 80010b0:	e6bc      	b.n	8000e2c <__aeabi_ddiv+0x264>
 80010b2:	1d29      	adds	r1, r5, #4
 80010b4:	42a9      	cmp	r1, r5
 80010b6:	41ad      	sbcs	r5, r5
 80010b8:	426d      	negs	r5, r5
 80010ba:	08c9      	lsrs	r1, r1, #3
 80010bc:	44a8      	add	r8, r5
 80010be:	e6b6      	b.n	8000e2e <__aeabi_ddiv+0x266>
 80010c0:	42af      	cmp	r7, r5
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x4fe>
 80010c4:	e662      	b.n	8000d8c <__aeabi_ddiv+0x1c4>
 80010c6:	4281      	cmp	r1, r0
 80010c8:	d804      	bhi.n	80010d4 <__aeabi_ddiv+0x50c>
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x506>
 80010cc:	e65e      	b.n	8000d8c <__aeabi_ddiv+0x1c4>
 80010ce:	42ae      	cmp	r6, r5
 80010d0:	d800      	bhi.n	80010d4 <__aeabi_ddiv+0x50c>
 80010d2:	e65b      	b.n	8000d8c <__aeabi_ddiv+0x1c4>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c0      	adds	r0, r0, r3
 80010ec:	e64f      	b.n	8000d8e <__aeabi_ddiv+0x1c6>
 80010ee:	42b2      	cmp	r2, r6
 80010f0:	d800      	bhi.n	80010f4 <__aeabi_ddiv+0x52c>
 80010f2:	e612      	b.n	8000d1a <__aeabi_ddiv+0x152>
 80010f4:	1e83      	subs	r3, r0, #2
 80010f6:	1936      	adds	r6, r6, r4
 80010f8:	e60f      	b.n	8000d1a <__aeabi_ddiv+0x152>
 80010fa:	428a      	cmp	r2, r1
 80010fc:	d800      	bhi.n	8001100 <__aeabi_ddiv+0x538>
 80010fe:	e5fa      	b.n	8000cf6 <__aeabi_ddiv+0x12e>
 8001100:	1e83      	subs	r3, r0, #2
 8001102:	4698      	mov	r8, r3
 8001104:	1909      	adds	r1, r1, r4
 8001106:	e5f6      	b.n	8000cf6 <__aeabi_ddiv+0x12e>
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <__aeabi_ddiv+0x5d4>)
 800110a:	0028      	movs	r0, r5
 800110c:	445b      	add	r3, fp
 800110e:	4641      	mov	r1, r8
 8001110:	409d      	lsls	r5, r3
 8001112:	4099      	lsls	r1, r3
 8001114:	40d0      	lsrs	r0, r2
 8001116:	1e6b      	subs	r3, r5, #1
 8001118:	419d      	sbcs	r5, r3
 800111a:	4643      	mov	r3, r8
 800111c:	4301      	orrs	r1, r0
 800111e:	4329      	orrs	r1, r5
 8001120:	40d3      	lsrs	r3, r2
 8001122:	074a      	lsls	r2, r1, #29
 8001124:	d100      	bne.n	8001128 <__aeabi_ddiv+0x560>
 8001126:	e755      	b.n	8000fd4 <__aeabi_ddiv+0x40c>
 8001128:	220f      	movs	r2, #15
 800112a:	400a      	ands	r2, r1
 800112c:	2a04      	cmp	r2, #4
 800112e:	d000      	beq.n	8001132 <__aeabi_ddiv+0x56a>
 8001130:	e74a      	b.n	8000fc8 <__aeabi_ddiv+0x400>
 8001132:	e74f      	b.n	8000fd4 <__aeabi_ddiv+0x40c>
 8001134:	0015      	movs	r5, r2
 8001136:	4286      	cmp	r6, r0
 8001138:	d000      	beq.n	800113c <__aeabi_ddiv+0x574>
 800113a:	e66d      	b.n	8000e18 <__aeabi_ddiv+0x250>
 800113c:	9a00      	ldr	r2, [sp, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d000      	beq.n	8001144 <__aeabi_ddiv+0x57c>
 8001142:	e669      	b.n	8000e18 <__aeabi_ddiv+0x250>
 8001144:	e66a      	b.n	8000e1c <__aeabi_ddiv+0x254>
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <__aeabi_ddiv+0x5d8>)
 8001148:	445b      	add	r3, fp
 800114a:	2b00      	cmp	r3, #0
 800114c:	dc00      	bgt.n	8001150 <__aeabi_ddiv+0x588>
 800114e:	e713      	b.n	8000f78 <__aeabi_ddiv+0x3b0>
 8001150:	2501      	movs	r5, #1
 8001152:	2100      	movs	r1, #0
 8001154:	44a8      	add	r8, r5
 8001156:	e66a      	b.n	8000e2e <__aeabi_ddiv+0x266>
 8001158:	075d      	lsls	r5, r3, #29
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	0b1a      	lsrs	r2, r3, #12
 800115e:	08c9      	lsrs	r1, r1, #3
 8001160:	2300      	movs	r3, #0
 8001162:	430d      	orrs	r5, r1
 8001164:	e587      	b.n	8000c76 <__aeabi_ddiv+0xae>
 8001166:	9900      	ldr	r1, [sp, #0]
 8001168:	3d02      	subs	r5, #2
 800116a:	004a      	lsls	r2, r1, #1
 800116c:	428a      	cmp	r2, r1
 800116e:	41bf      	sbcs	r7, r7
 8001170:	427f      	negs	r7, r7
 8001172:	193f      	adds	r7, r7, r4
 8001174:	19f6      	adds	r6, r6, r7
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	e7dd      	b.n	8001136 <__aeabi_ddiv+0x56e>
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	4643      	mov	r3, r8
 800117e:	0312      	lsls	r2, r2, #12
 8001180:	431a      	orrs	r2, r3
 8001182:	0312      	lsls	r2, r2, #12
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <__aeabi_ddiv+0x5cc>)
 8001186:	0b12      	lsrs	r2, r2, #12
 8001188:	e575      	b.n	8000c76 <__aeabi_ddiv+0xae>
 800118a:	9900      	ldr	r1, [sp, #0]
 800118c:	4299      	cmp	r1, r3
 800118e:	d3ea      	bcc.n	8001166 <__aeabi_ddiv+0x59e>
 8001190:	0015      	movs	r5, r2
 8001192:	e7d3      	b.n	800113c <__aeabi_ddiv+0x574>
 8001194:	000007ff 	.word	0x000007ff
 8001198:	0000043e 	.word	0x0000043e
 800119c:	0000041e 	.word	0x0000041e
 80011a0:	000003ff 	.word	0x000003ff

080011a4 <__eqdf2>:
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	464e      	mov	r6, r9
 80011a8:	4645      	mov	r5, r8
 80011aa:	46de      	mov	lr, fp
 80011ac:	4657      	mov	r7, sl
 80011ae:	4690      	mov	r8, r2
 80011b0:	b5e0      	push	{r5, r6, r7, lr}
 80011b2:	0017      	movs	r7, r2
 80011b4:	031a      	lsls	r2, r3, #12
 80011b6:	0b12      	lsrs	r2, r2, #12
 80011b8:	0005      	movs	r5, r0
 80011ba:	4684      	mov	ip, r0
 80011bc:	4819      	ldr	r0, [pc, #100]	; (8001224 <__eqdf2+0x80>)
 80011be:	030e      	lsls	r6, r1, #12
 80011c0:	004c      	lsls	r4, r1, #1
 80011c2:	4691      	mov	r9, r2
 80011c4:	005a      	lsls	r2, r3, #1
 80011c6:	0fdb      	lsrs	r3, r3, #31
 80011c8:	469b      	mov	fp, r3
 80011ca:	0b36      	lsrs	r6, r6, #12
 80011cc:	0d64      	lsrs	r4, r4, #21
 80011ce:	0fc9      	lsrs	r1, r1, #31
 80011d0:	0d52      	lsrs	r2, r2, #21
 80011d2:	4284      	cmp	r4, r0
 80011d4:	d019      	beq.n	800120a <__eqdf2+0x66>
 80011d6:	4282      	cmp	r2, r0
 80011d8:	d010      	beq.n	80011fc <__eqdf2+0x58>
 80011da:	2001      	movs	r0, #1
 80011dc:	4294      	cmp	r4, r2
 80011de:	d10e      	bne.n	80011fe <__eqdf2+0x5a>
 80011e0:	454e      	cmp	r6, r9
 80011e2:	d10c      	bne.n	80011fe <__eqdf2+0x5a>
 80011e4:	2001      	movs	r0, #1
 80011e6:	45c4      	cmp	ip, r8
 80011e8:	d109      	bne.n	80011fe <__eqdf2+0x5a>
 80011ea:	4559      	cmp	r1, fp
 80011ec:	d017      	beq.n	800121e <__eqdf2+0x7a>
 80011ee:	2c00      	cmp	r4, #0
 80011f0:	d105      	bne.n	80011fe <__eqdf2+0x5a>
 80011f2:	0030      	movs	r0, r6
 80011f4:	4328      	orrs	r0, r5
 80011f6:	1e43      	subs	r3, r0, #1
 80011f8:	4198      	sbcs	r0, r3
 80011fa:	e000      	b.n	80011fe <__eqdf2+0x5a>
 80011fc:	2001      	movs	r0, #1
 80011fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001200:	46bb      	mov	fp, r7
 8001202:	46b2      	mov	sl, r6
 8001204:	46a9      	mov	r9, r5
 8001206:	46a0      	mov	r8, r4
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120a:	0033      	movs	r3, r6
 800120c:	2001      	movs	r0, #1
 800120e:	432b      	orrs	r3, r5
 8001210:	d1f5      	bne.n	80011fe <__eqdf2+0x5a>
 8001212:	42a2      	cmp	r2, r4
 8001214:	d1f3      	bne.n	80011fe <__eqdf2+0x5a>
 8001216:	464b      	mov	r3, r9
 8001218:	433b      	orrs	r3, r7
 800121a:	d1f0      	bne.n	80011fe <__eqdf2+0x5a>
 800121c:	e7e2      	b.n	80011e4 <__eqdf2+0x40>
 800121e:	2000      	movs	r0, #0
 8001220:	e7ed      	b.n	80011fe <__eqdf2+0x5a>
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	000007ff 	.word	0x000007ff

08001228 <__gedf2>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	4647      	mov	r7, r8
 800122c:	46ce      	mov	lr, r9
 800122e:	0004      	movs	r4, r0
 8001230:	0018      	movs	r0, r3
 8001232:	0016      	movs	r6, r2
 8001234:	031b      	lsls	r3, r3, #12
 8001236:	0b1b      	lsrs	r3, r3, #12
 8001238:	4d2d      	ldr	r5, [pc, #180]	; (80012f0 <__gedf2+0xc8>)
 800123a:	004a      	lsls	r2, r1, #1
 800123c:	4699      	mov	r9, r3
 800123e:	b580      	push	{r7, lr}
 8001240:	0043      	lsls	r3, r0, #1
 8001242:	030f      	lsls	r7, r1, #12
 8001244:	46a4      	mov	ip, r4
 8001246:	46b0      	mov	r8, r6
 8001248:	0b3f      	lsrs	r7, r7, #12
 800124a:	0d52      	lsrs	r2, r2, #21
 800124c:	0fc9      	lsrs	r1, r1, #31
 800124e:	0d5b      	lsrs	r3, r3, #21
 8001250:	0fc0      	lsrs	r0, r0, #31
 8001252:	42aa      	cmp	r2, r5
 8001254:	d021      	beq.n	800129a <__gedf2+0x72>
 8001256:	42ab      	cmp	r3, r5
 8001258:	d013      	beq.n	8001282 <__gedf2+0x5a>
 800125a:	2a00      	cmp	r2, #0
 800125c:	d122      	bne.n	80012a4 <__gedf2+0x7c>
 800125e:	433c      	orrs	r4, r7
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <__gedf2+0x42>
 8001264:	464d      	mov	r5, r9
 8001266:	432e      	orrs	r6, r5
 8001268:	d022      	beq.n	80012b0 <__gedf2+0x88>
 800126a:	2c00      	cmp	r4, #0
 800126c:	d010      	beq.n	8001290 <__gedf2+0x68>
 800126e:	4281      	cmp	r1, r0
 8001270:	d022      	beq.n	80012b8 <__gedf2+0x90>
 8001272:	2002      	movs	r0, #2
 8001274:	3901      	subs	r1, #1
 8001276:	4008      	ands	r0, r1
 8001278:	3801      	subs	r0, #1
 800127a:	bcc0      	pop	{r6, r7}
 800127c:	46b9      	mov	r9, r7
 800127e:	46b0      	mov	r8, r6
 8001280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001282:	464d      	mov	r5, r9
 8001284:	432e      	orrs	r6, r5
 8001286:	d129      	bne.n	80012dc <__gedf2+0xb4>
 8001288:	2a00      	cmp	r2, #0
 800128a:	d1f0      	bne.n	800126e <__gedf2+0x46>
 800128c:	433c      	orrs	r4, r7
 800128e:	d1ee      	bne.n	800126e <__gedf2+0x46>
 8001290:	2800      	cmp	r0, #0
 8001292:	d1f2      	bne.n	800127a <__gedf2+0x52>
 8001294:	2001      	movs	r0, #1
 8001296:	4240      	negs	r0, r0
 8001298:	e7ef      	b.n	800127a <__gedf2+0x52>
 800129a:	003d      	movs	r5, r7
 800129c:	4325      	orrs	r5, r4
 800129e:	d11d      	bne.n	80012dc <__gedf2+0xb4>
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d0ee      	beq.n	8001282 <__gedf2+0x5a>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e2      	bne.n	800126e <__gedf2+0x46>
 80012a8:	464c      	mov	r4, r9
 80012aa:	4326      	orrs	r6, r4
 80012ac:	d1df      	bne.n	800126e <__gedf2+0x46>
 80012ae:	e7e0      	b.n	8001272 <__gedf2+0x4a>
 80012b0:	2000      	movs	r0, #0
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	d0e1      	beq.n	800127a <__gedf2+0x52>
 80012b6:	e7dc      	b.n	8001272 <__gedf2+0x4a>
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dc0a      	bgt.n	80012d2 <__gedf2+0xaa>
 80012bc:	dbe8      	blt.n	8001290 <__gedf2+0x68>
 80012be:	454f      	cmp	r7, r9
 80012c0:	d8d7      	bhi.n	8001272 <__gedf2+0x4a>
 80012c2:	d00e      	beq.n	80012e2 <__gedf2+0xba>
 80012c4:	2000      	movs	r0, #0
 80012c6:	454f      	cmp	r7, r9
 80012c8:	d2d7      	bcs.n	800127a <__gedf2+0x52>
 80012ca:	2900      	cmp	r1, #0
 80012cc:	d0e2      	beq.n	8001294 <__gedf2+0x6c>
 80012ce:	0008      	movs	r0, r1
 80012d0:	e7d3      	b.n	800127a <__gedf2+0x52>
 80012d2:	4243      	negs	r3, r0
 80012d4:	4158      	adcs	r0, r3
 80012d6:	0040      	lsls	r0, r0, #1
 80012d8:	3801      	subs	r0, #1
 80012da:	e7ce      	b.n	800127a <__gedf2+0x52>
 80012dc:	2002      	movs	r0, #2
 80012de:	4240      	negs	r0, r0
 80012e0:	e7cb      	b.n	800127a <__gedf2+0x52>
 80012e2:	45c4      	cmp	ip, r8
 80012e4:	d8c5      	bhi.n	8001272 <__gedf2+0x4a>
 80012e6:	2000      	movs	r0, #0
 80012e8:	45c4      	cmp	ip, r8
 80012ea:	d2c6      	bcs.n	800127a <__gedf2+0x52>
 80012ec:	e7ed      	b.n	80012ca <__gedf2+0xa2>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	000007ff 	.word	0x000007ff

080012f4 <__ledf2>:
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0004      	movs	r4, r0
 80012fc:	0018      	movs	r0, r3
 80012fe:	0016      	movs	r6, r2
 8001300:	031b      	lsls	r3, r3, #12
 8001302:	0b1b      	lsrs	r3, r3, #12
 8001304:	4d2c      	ldr	r5, [pc, #176]	; (80013b8 <__ledf2+0xc4>)
 8001306:	004a      	lsls	r2, r1, #1
 8001308:	4699      	mov	r9, r3
 800130a:	b580      	push	{r7, lr}
 800130c:	0043      	lsls	r3, r0, #1
 800130e:	030f      	lsls	r7, r1, #12
 8001310:	46a4      	mov	ip, r4
 8001312:	46b0      	mov	r8, r6
 8001314:	0b3f      	lsrs	r7, r7, #12
 8001316:	0d52      	lsrs	r2, r2, #21
 8001318:	0fc9      	lsrs	r1, r1, #31
 800131a:	0d5b      	lsrs	r3, r3, #21
 800131c:	0fc0      	lsrs	r0, r0, #31
 800131e:	42aa      	cmp	r2, r5
 8001320:	d00d      	beq.n	800133e <__ledf2+0x4a>
 8001322:	42ab      	cmp	r3, r5
 8001324:	d010      	beq.n	8001348 <__ledf2+0x54>
 8001326:	2a00      	cmp	r2, #0
 8001328:	d127      	bne.n	800137a <__ledf2+0x86>
 800132a:	433c      	orrs	r4, r7
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <__ledf2+0x60>
 8001330:	464d      	mov	r5, r9
 8001332:	432e      	orrs	r6, r5
 8001334:	d10e      	bne.n	8001354 <__ledf2+0x60>
 8001336:	2000      	movs	r0, #0
 8001338:	2c00      	cmp	r4, #0
 800133a:	d015      	beq.n	8001368 <__ledf2+0x74>
 800133c:	e00e      	b.n	800135c <__ledf2+0x68>
 800133e:	003d      	movs	r5, r7
 8001340:	4325      	orrs	r5, r4
 8001342:	d110      	bne.n	8001366 <__ledf2+0x72>
 8001344:	4293      	cmp	r3, r2
 8001346:	d118      	bne.n	800137a <__ledf2+0x86>
 8001348:	464d      	mov	r5, r9
 800134a:	432e      	orrs	r6, r5
 800134c:	d10b      	bne.n	8001366 <__ledf2+0x72>
 800134e:	2a00      	cmp	r2, #0
 8001350:	d102      	bne.n	8001358 <__ledf2+0x64>
 8001352:	433c      	orrs	r4, r7
 8001354:	2c00      	cmp	r4, #0
 8001356:	d00b      	beq.n	8001370 <__ledf2+0x7c>
 8001358:	4281      	cmp	r1, r0
 800135a:	d014      	beq.n	8001386 <__ledf2+0x92>
 800135c:	2002      	movs	r0, #2
 800135e:	3901      	subs	r1, #1
 8001360:	4008      	ands	r0, r1
 8001362:	3801      	subs	r0, #1
 8001364:	e000      	b.n	8001368 <__ledf2+0x74>
 8001366:	2002      	movs	r0, #2
 8001368:	bcc0      	pop	{r6, r7}
 800136a:	46b9      	mov	r9, r7
 800136c:	46b0      	mov	r8, r6
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001370:	2800      	cmp	r0, #0
 8001372:	d1f9      	bne.n	8001368 <__ledf2+0x74>
 8001374:	2001      	movs	r0, #1
 8001376:	4240      	negs	r0, r0
 8001378:	e7f6      	b.n	8001368 <__ledf2+0x74>
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1ec      	bne.n	8001358 <__ledf2+0x64>
 800137e:	464c      	mov	r4, r9
 8001380:	4326      	orrs	r6, r4
 8001382:	d1e9      	bne.n	8001358 <__ledf2+0x64>
 8001384:	e7ea      	b.n	800135c <__ledf2+0x68>
 8001386:	429a      	cmp	r2, r3
 8001388:	dd04      	ble.n	8001394 <__ledf2+0xa0>
 800138a:	4243      	negs	r3, r0
 800138c:	4158      	adcs	r0, r3
 800138e:	0040      	lsls	r0, r0, #1
 8001390:	3801      	subs	r0, #1
 8001392:	e7e9      	b.n	8001368 <__ledf2+0x74>
 8001394:	429a      	cmp	r2, r3
 8001396:	dbeb      	blt.n	8001370 <__ledf2+0x7c>
 8001398:	454f      	cmp	r7, r9
 800139a:	d8df      	bhi.n	800135c <__ledf2+0x68>
 800139c:	d006      	beq.n	80013ac <__ledf2+0xb8>
 800139e:	2000      	movs	r0, #0
 80013a0:	454f      	cmp	r7, r9
 80013a2:	d2e1      	bcs.n	8001368 <__ledf2+0x74>
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d0e5      	beq.n	8001374 <__ledf2+0x80>
 80013a8:	0008      	movs	r0, r1
 80013aa:	e7dd      	b.n	8001368 <__ledf2+0x74>
 80013ac:	45c4      	cmp	ip, r8
 80013ae:	d8d5      	bhi.n	800135c <__ledf2+0x68>
 80013b0:	2000      	movs	r0, #0
 80013b2:	45c4      	cmp	ip, r8
 80013b4:	d2d8      	bcs.n	8001368 <__ledf2+0x74>
 80013b6:	e7f5      	b.n	80013a4 <__ledf2+0xb0>
 80013b8:	000007ff 	.word	0x000007ff

080013bc <__aeabi_dmul>:
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	4645      	mov	r5, r8
 80013c0:	46de      	mov	lr, fp
 80013c2:	4657      	mov	r7, sl
 80013c4:	464e      	mov	r6, r9
 80013c6:	b5e0      	push	{r5, r6, r7, lr}
 80013c8:	001f      	movs	r7, r3
 80013ca:	030b      	lsls	r3, r1, #12
 80013cc:	0b1b      	lsrs	r3, r3, #12
 80013ce:	469b      	mov	fp, r3
 80013d0:	004d      	lsls	r5, r1, #1
 80013d2:	0fcb      	lsrs	r3, r1, #31
 80013d4:	0004      	movs	r4, r0
 80013d6:	4691      	mov	r9, r2
 80013d8:	4698      	mov	r8, r3
 80013da:	b087      	sub	sp, #28
 80013dc:	0d6d      	lsrs	r5, r5, #21
 80013de:	d100      	bne.n	80013e2 <__aeabi_dmul+0x26>
 80013e0:	e1cd      	b.n	800177e <__aeabi_dmul+0x3c2>
 80013e2:	4bce      	ldr	r3, [pc, #824]	; (800171c <__aeabi_dmul+0x360>)
 80013e4:	429d      	cmp	r5, r3
 80013e6:	d100      	bne.n	80013ea <__aeabi_dmul+0x2e>
 80013e8:	e1e9      	b.n	80017be <__aeabi_dmul+0x402>
 80013ea:	465a      	mov	r2, fp
 80013ec:	0f43      	lsrs	r3, r0, #29
 80013ee:	00d2      	lsls	r2, r2, #3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	0412      	lsls	r2, r2, #16
 80013f6:	431a      	orrs	r2, r3
 80013f8:	00c3      	lsls	r3, r0, #3
 80013fa:	469a      	mov	sl, r3
 80013fc:	4bc8      	ldr	r3, [pc, #800]	; (8001720 <__aeabi_dmul+0x364>)
 80013fe:	4693      	mov	fp, r2
 8001400:	469c      	mov	ip, r3
 8001402:	2300      	movs	r3, #0
 8001404:	2600      	movs	r6, #0
 8001406:	4465      	add	r5, ip
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	033c      	lsls	r4, r7, #12
 800140c:	007b      	lsls	r3, r7, #1
 800140e:	4648      	mov	r0, r9
 8001410:	0b24      	lsrs	r4, r4, #12
 8001412:	0d5b      	lsrs	r3, r3, #21
 8001414:	0fff      	lsrs	r7, r7, #31
 8001416:	2b00      	cmp	r3, #0
 8001418:	d100      	bne.n	800141c <__aeabi_dmul+0x60>
 800141a:	e189      	b.n	8001730 <__aeabi_dmul+0x374>
 800141c:	4abf      	ldr	r2, [pc, #764]	; (800171c <__aeabi_dmul+0x360>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <__aeabi_dmul+0x9a>
 8001422:	0f42      	lsrs	r2, r0, #29
 8001424:	00e4      	lsls	r4, r4, #3
 8001426:	4322      	orrs	r2, r4
 8001428:	2480      	movs	r4, #128	; 0x80
 800142a:	0424      	lsls	r4, r4, #16
 800142c:	4314      	orrs	r4, r2
 800142e:	4abc      	ldr	r2, [pc, #752]	; (8001720 <__aeabi_dmul+0x364>)
 8001430:	2100      	movs	r1, #0
 8001432:	4694      	mov	ip, r2
 8001434:	4642      	mov	r2, r8
 8001436:	4463      	add	r3, ip
 8001438:	195b      	adds	r3, r3, r5
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	407a      	eors	r2, r7
 8001440:	3301      	adds	r3, #1
 8001442:	00c0      	lsls	r0, r0, #3
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2e0a      	cmp	r6, #10
 800144a:	dd1c      	ble.n	8001486 <__aeabi_dmul+0xca>
 800144c:	003a      	movs	r2, r7
 800144e:	2e0b      	cmp	r6, #11
 8001450:	d05e      	beq.n	8001510 <__aeabi_dmul+0x154>
 8001452:	4647      	mov	r7, r8
 8001454:	e056      	b.n	8001504 <__aeabi_dmul+0x148>
 8001456:	4649      	mov	r1, r9
 8001458:	4bb0      	ldr	r3, [pc, #704]	; (800171c <__aeabi_dmul+0x360>)
 800145a:	4321      	orrs	r1, r4
 800145c:	18eb      	adds	r3, r5, r3
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2900      	cmp	r1, #0
 8001462:	d12a      	bne.n	80014ba <__aeabi_dmul+0xfe>
 8001464:	2080      	movs	r0, #128	; 0x80
 8001466:	2202      	movs	r2, #2
 8001468:	0100      	lsls	r0, r0, #4
 800146a:	002b      	movs	r3, r5
 800146c:	4684      	mov	ip, r0
 800146e:	4316      	orrs	r6, r2
 8001470:	4642      	mov	r2, r8
 8001472:	4463      	add	r3, ip
 8001474:	407a      	eors	r2, r7
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2e0a      	cmp	r6, #10
 800147c:	dd00      	ble.n	8001480 <__aeabi_dmul+0xc4>
 800147e:	e231      	b.n	80018e4 <__aeabi_dmul+0x528>
 8001480:	2000      	movs	r0, #0
 8001482:	2400      	movs	r4, #0
 8001484:	2102      	movs	r1, #2
 8001486:	2e02      	cmp	r6, #2
 8001488:	dc26      	bgt.n	80014d8 <__aeabi_dmul+0x11c>
 800148a:	3e01      	subs	r6, #1
 800148c:	2e01      	cmp	r6, #1
 800148e:	d852      	bhi.n	8001536 <__aeabi_dmul+0x17a>
 8001490:	2902      	cmp	r1, #2
 8001492:	d04c      	beq.n	800152e <__aeabi_dmul+0x172>
 8001494:	2901      	cmp	r1, #1
 8001496:	d000      	beq.n	800149a <__aeabi_dmul+0xde>
 8001498:	e118      	b.n	80016cc <__aeabi_dmul+0x310>
 800149a:	2300      	movs	r3, #0
 800149c:	2400      	movs	r4, #0
 800149e:	2500      	movs	r5, #0
 80014a0:	051b      	lsls	r3, r3, #20
 80014a2:	4323      	orrs	r3, r4
 80014a4:	07d2      	lsls	r2, r2, #31
 80014a6:	4313      	orrs	r3, r2
 80014a8:	0028      	movs	r0, r5
 80014aa:	0019      	movs	r1, r3
 80014ac:	b007      	add	sp, #28
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	2203      	movs	r2, #3
 80014be:	0109      	lsls	r1, r1, #4
 80014c0:	002b      	movs	r3, r5
 80014c2:	468c      	mov	ip, r1
 80014c4:	4316      	orrs	r6, r2
 80014c6:	4642      	mov	r2, r8
 80014c8:	4463      	add	r3, ip
 80014ca:	407a      	eors	r2, r7
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2e0a      	cmp	r6, #10
 80014d2:	dd00      	ble.n	80014d6 <__aeabi_dmul+0x11a>
 80014d4:	e228      	b.n	8001928 <__aeabi_dmul+0x56c>
 80014d6:	2103      	movs	r1, #3
 80014d8:	2501      	movs	r5, #1
 80014da:	40b5      	lsls	r5, r6
 80014dc:	46ac      	mov	ip, r5
 80014de:	26a6      	movs	r6, #166	; 0xa6
 80014e0:	4663      	mov	r3, ip
 80014e2:	00f6      	lsls	r6, r6, #3
 80014e4:	4035      	ands	r5, r6
 80014e6:	4233      	tst	r3, r6
 80014e8:	d10b      	bne.n	8001502 <__aeabi_dmul+0x146>
 80014ea:	2690      	movs	r6, #144	; 0x90
 80014ec:	00b6      	lsls	r6, r6, #2
 80014ee:	4233      	tst	r3, r6
 80014f0:	d118      	bne.n	8001524 <__aeabi_dmul+0x168>
 80014f2:	3eb9      	subs	r6, #185	; 0xb9
 80014f4:	3eff      	subs	r6, #255	; 0xff
 80014f6:	421e      	tst	r6, r3
 80014f8:	d01d      	beq.n	8001536 <__aeabi_dmul+0x17a>
 80014fa:	46a3      	mov	fp, r4
 80014fc:	4682      	mov	sl, r0
 80014fe:	9100      	str	r1, [sp, #0]
 8001500:	e000      	b.n	8001504 <__aeabi_dmul+0x148>
 8001502:	0017      	movs	r7, r2
 8001504:	9900      	ldr	r1, [sp, #0]
 8001506:	003a      	movs	r2, r7
 8001508:	2902      	cmp	r1, #2
 800150a:	d010      	beq.n	800152e <__aeabi_dmul+0x172>
 800150c:	465c      	mov	r4, fp
 800150e:	4650      	mov	r0, sl
 8001510:	2903      	cmp	r1, #3
 8001512:	d1bf      	bne.n	8001494 <__aeabi_dmul+0xd8>
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	031b      	lsls	r3, r3, #12
 8001518:	431c      	orrs	r4, r3
 800151a:	0324      	lsls	r4, r4, #12
 800151c:	0005      	movs	r5, r0
 800151e:	4b7f      	ldr	r3, [pc, #508]	; (800171c <__aeabi_dmul+0x360>)
 8001520:	0b24      	lsrs	r4, r4, #12
 8001522:	e7bd      	b.n	80014a0 <__aeabi_dmul+0xe4>
 8001524:	2480      	movs	r4, #128	; 0x80
 8001526:	2200      	movs	r2, #0
 8001528:	4b7c      	ldr	r3, [pc, #496]	; (800171c <__aeabi_dmul+0x360>)
 800152a:	0324      	lsls	r4, r4, #12
 800152c:	e7b8      	b.n	80014a0 <__aeabi_dmul+0xe4>
 800152e:	2400      	movs	r4, #0
 8001530:	2500      	movs	r5, #0
 8001532:	4b7a      	ldr	r3, [pc, #488]	; (800171c <__aeabi_dmul+0x360>)
 8001534:	e7b4      	b.n	80014a0 <__aeabi_dmul+0xe4>
 8001536:	4653      	mov	r3, sl
 8001538:	041e      	lsls	r6, r3, #16
 800153a:	0c36      	lsrs	r6, r6, #16
 800153c:	0c1f      	lsrs	r7, r3, #16
 800153e:	0033      	movs	r3, r6
 8001540:	0c01      	lsrs	r1, r0, #16
 8001542:	0400      	lsls	r0, r0, #16
 8001544:	0c00      	lsrs	r0, r0, #16
 8001546:	4343      	muls	r3, r0
 8001548:	4698      	mov	r8, r3
 800154a:	0003      	movs	r3, r0
 800154c:	437b      	muls	r3, r7
 800154e:	4699      	mov	r9, r3
 8001550:	0033      	movs	r3, r6
 8001552:	434b      	muls	r3, r1
 8001554:	469c      	mov	ip, r3
 8001556:	4643      	mov	r3, r8
 8001558:	000d      	movs	r5, r1
 800155a:	0c1b      	lsrs	r3, r3, #16
 800155c:	469a      	mov	sl, r3
 800155e:	437d      	muls	r5, r7
 8001560:	44cc      	add	ip, r9
 8001562:	44d4      	add	ip, sl
 8001564:	9500      	str	r5, [sp, #0]
 8001566:	45e1      	cmp	r9, ip
 8001568:	d904      	bls.n	8001574 <__aeabi_dmul+0x1b8>
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	025b      	lsls	r3, r3, #9
 800156e:	4699      	mov	r9, r3
 8001570:	444d      	add	r5, r9
 8001572:	9500      	str	r5, [sp, #0]
 8001574:	4663      	mov	r3, ip
 8001576:	0c1b      	lsrs	r3, r3, #16
 8001578:	001d      	movs	r5, r3
 800157a:	4663      	mov	r3, ip
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	469c      	mov	ip, r3
 8001580:	4643      	mov	r3, r8
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	0c1b      	lsrs	r3, r3, #16
 8001586:	4698      	mov	r8, r3
 8001588:	4663      	mov	r3, ip
 800158a:	4443      	add	r3, r8
 800158c:	9303      	str	r3, [sp, #12]
 800158e:	0c23      	lsrs	r3, r4, #16
 8001590:	4698      	mov	r8, r3
 8001592:	0033      	movs	r3, r6
 8001594:	0424      	lsls	r4, r4, #16
 8001596:	0c24      	lsrs	r4, r4, #16
 8001598:	4363      	muls	r3, r4
 800159a:	469c      	mov	ip, r3
 800159c:	0023      	movs	r3, r4
 800159e:	437b      	muls	r3, r7
 80015a0:	4699      	mov	r9, r3
 80015a2:	4643      	mov	r3, r8
 80015a4:	435e      	muls	r6, r3
 80015a6:	435f      	muls	r7, r3
 80015a8:	444e      	add	r6, r9
 80015aa:	4663      	mov	r3, ip
 80015ac:	46b2      	mov	sl, r6
 80015ae:	0c1e      	lsrs	r6, r3, #16
 80015b0:	4456      	add	r6, sl
 80015b2:	45b1      	cmp	r9, r6
 80015b4:	d903      	bls.n	80015be <__aeabi_dmul+0x202>
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	4699      	mov	r9, r3
 80015bc:	444f      	add	r7, r9
 80015be:	0c33      	lsrs	r3, r6, #16
 80015c0:	4699      	mov	r9, r3
 80015c2:	003b      	movs	r3, r7
 80015c4:	444b      	add	r3, r9
 80015c6:	9305      	str	r3, [sp, #20]
 80015c8:	4663      	mov	r3, ip
 80015ca:	46ac      	mov	ip, r5
 80015cc:	041f      	lsls	r7, r3, #16
 80015ce:	0c3f      	lsrs	r7, r7, #16
 80015d0:	0436      	lsls	r6, r6, #16
 80015d2:	19f6      	adds	r6, r6, r7
 80015d4:	44b4      	add	ip, r6
 80015d6:	4663      	mov	r3, ip
 80015d8:	9304      	str	r3, [sp, #16]
 80015da:	465b      	mov	r3, fp
 80015dc:	0c1b      	lsrs	r3, r3, #16
 80015de:	469c      	mov	ip, r3
 80015e0:	465b      	mov	r3, fp
 80015e2:	041f      	lsls	r7, r3, #16
 80015e4:	0c3f      	lsrs	r7, r7, #16
 80015e6:	003b      	movs	r3, r7
 80015e8:	4343      	muls	r3, r0
 80015ea:	4699      	mov	r9, r3
 80015ec:	4663      	mov	r3, ip
 80015ee:	4343      	muls	r3, r0
 80015f0:	469a      	mov	sl, r3
 80015f2:	464b      	mov	r3, r9
 80015f4:	4660      	mov	r0, ip
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	469b      	mov	fp, r3
 80015fa:	4348      	muls	r0, r1
 80015fc:	4379      	muls	r1, r7
 80015fe:	4451      	add	r1, sl
 8001600:	4459      	add	r1, fp
 8001602:	458a      	cmp	sl, r1
 8001604:	d903      	bls.n	800160e <__aeabi_dmul+0x252>
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	469a      	mov	sl, r3
 800160c:	4450      	add	r0, sl
 800160e:	0c0b      	lsrs	r3, r1, #16
 8001610:	469a      	mov	sl, r3
 8001612:	464b      	mov	r3, r9
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c1b      	lsrs	r3, r3, #16
 8001618:	4699      	mov	r9, r3
 800161a:	003b      	movs	r3, r7
 800161c:	4363      	muls	r3, r4
 800161e:	0409      	lsls	r1, r1, #16
 8001620:	4645      	mov	r5, r8
 8001622:	4449      	add	r1, r9
 8001624:	4699      	mov	r9, r3
 8001626:	4663      	mov	r3, ip
 8001628:	435c      	muls	r4, r3
 800162a:	436b      	muls	r3, r5
 800162c:	469c      	mov	ip, r3
 800162e:	464b      	mov	r3, r9
 8001630:	0c1b      	lsrs	r3, r3, #16
 8001632:	4698      	mov	r8, r3
 8001634:	436f      	muls	r7, r5
 8001636:	193f      	adds	r7, r7, r4
 8001638:	4447      	add	r7, r8
 800163a:	4450      	add	r0, sl
 800163c:	42bc      	cmp	r4, r7
 800163e:	d903      	bls.n	8001648 <__aeabi_dmul+0x28c>
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	4698      	mov	r8, r3
 8001646:	44c4      	add	ip, r8
 8001648:	9b04      	ldr	r3, [sp, #16]
 800164a:	9d00      	ldr	r5, [sp, #0]
 800164c:	4698      	mov	r8, r3
 800164e:	4445      	add	r5, r8
 8001650:	42b5      	cmp	r5, r6
 8001652:	41b6      	sbcs	r6, r6
 8001654:	4273      	negs	r3, r6
 8001656:	4698      	mov	r8, r3
 8001658:	464b      	mov	r3, r9
 800165a:	041e      	lsls	r6, r3, #16
 800165c:	9b05      	ldr	r3, [sp, #20]
 800165e:	043c      	lsls	r4, r7, #16
 8001660:	4699      	mov	r9, r3
 8001662:	0c36      	lsrs	r6, r6, #16
 8001664:	19a4      	adds	r4, r4, r6
 8001666:	444c      	add	r4, r9
 8001668:	46a1      	mov	r9, r4
 800166a:	4683      	mov	fp, r0
 800166c:	186e      	adds	r6, r5, r1
 800166e:	44c1      	add	r9, r8
 8001670:	428e      	cmp	r6, r1
 8001672:	4189      	sbcs	r1, r1
 8001674:	44cb      	add	fp, r9
 8001676:	465d      	mov	r5, fp
 8001678:	4249      	negs	r1, r1
 800167a:	186d      	adds	r5, r5, r1
 800167c:	429c      	cmp	r4, r3
 800167e:	41a4      	sbcs	r4, r4
 8001680:	45c1      	cmp	r9, r8
 8001682:	419b      	sbcs	r3, r3
 8001684:	4583      	cmp	fp, r0
 8001686:	4180      	sbcs	r0, r0
 8001688:	428d      	cmp	r5, r1
 800168a:	4189      	sbcs	r1, r1
 800168c:	425b      	negs	r3, r3
 800168e:	4264      	negs	r4, r4
 8001690:	431c      	orrs	r4, r3
 8001692:	4240      	negs	r0, r0
 8001694:	9b03      	ldr	r3, [sp, #12]
 8001696:	4249      	negs	r1, r1
 8001698:	4301      	orrs	r1, r0
 800169a:	0270      	lsls	r0, r6, #9
 800169c:	0c3f      	lsrs	r7, r7, #16
 800169e:	4318      	orrs	r0, r3
 80016a0:	19e4      	adds	r4, r4, r7
 80016a2:	1e47      	subs	r7, r0, #1
 80016a4:	41b8      	sbcs	r0, r7
 80016a6:	1864      	adds	r4, r4, r1
 80016a8:	4464      	add	r4, ip
 80016aa:	0df6      	lsrs	r6, r6, #23
 80016ac:	0261      	lsls	r1, r4, #9
 80016ae:	4330      	orrs	r0, r6
 80016b0:	0dec      	lsrs	r4, r5, #23
 80016b2:	026e      	lsls	r6, r5, #9
 80016b4:	430c      	orrs	r4, r1
 80016b6:	4330      	orrs	r0, r6
 80016b8:	01c9      	lsls	r1, r1, #7
 80016ba:	d400      	bmi.n	80016be <__aeabi_dmul+0x302>
 80016bc:	e0f1      	b.n	80018a2 <__aeabi_dmul+0x4e6>
 80016be:	2101      	movs	r1, #1
 80016c0:	0843      	lsrs	r3, r0, #1
 80016c2:	4001      	ands	r1, r0
 80016c4:	430b      	orrs	r3, r1
 80016c6:	07e0      	lsls	r0, r4, #31
 80016c8:	4318      	orrs	r0, r3
 80016ca:	0864      	lsrs	r4, r4, #1
 80016cc:	4915      	ldr	r1, [pc, #84]	; (8001724 <__aeabi_dmul+0x368>)
 80016ce:	9b02      	ldr	r3, [sp, #8]
 80016d0:	468c      	mov	ip, r1
 80016d2:	4463      	add	r3, ip
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	dc00      	bgt.n	80016da <__aeabi_dmul+0x31e>
 80016d8:	e097      	b.n	800180a <__aeabi_dmul+0x44e>
 80016da:	0741      	lsls	r1, r0, #29
 80016dc:	d009      	beq.n	80016f2 <__aeabi_dmul+0x336>
 80016de:	210f      	movs	r1, #15
 80016e0:	4001      	ands	r1, r0
 80016e2:	2904      	cmp	r1, #4
 80016e4:	d005      	beq.n	80016f2 <__aeabi_dmul+0x336>
 80016e6:	1d01      	adds	r1, r0, #4
 80016e8:	4281      	cmp	r1, r0
 80016ea:	4180      	sbcs	r0, r0
 80016ec:	4240      	negs	r0, r0
 80016ee:	1824      	adds	r4, r4, r0
 80016f0:	0008      	movs	r0, r1
 80016f2:	01e1      	lsls	r1, r4, #7
 80016f4:	d506      	bpl.n	8001704 <__aeabi_dmul+0x348>
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	00c9      	lsls	r1, r1, #3
 80016fa:	468c      	mov	ip, r1
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <__aeabi_dmul+0x36c>)
 80016fe:	401c      	ands	r4, r3
 8001700:	9b02      	ldr	r3, [sp, #8]
 8001702:	4463      	add	r3, ip
 8001704:	4909      	ldr	r1, [pc, #36]	; (800172c <__aeabi_dmul+0x370>)
 8001706:	428b      	cmp	r3, r1
 8001708:	dd00      	ble.n	800170c <__aeabi_dmul+0x350>
 800170a:	e710      	b.n	800152e <__aeabi_dmul+0x172>
 800170c:	0761      	lsls	r1, r4, #29
 800170e:	08c5      	lsrs	r5, r0, #3
 8001710:	0264      	lsls	r4, r4, #9
 8001712:	055b      	lsls	r3, r3, #21
 8001714:	430d      	orrs	r5, r1
 8001716:	0b24      	lsrs	r4, r4, #12
 8001718:	0d5b      	lsrs	r3, r3, #21
 800171a:	e6c1      	b.n	80014a0 <__aeabi_dmul+0xe4>
 800171c:	000007ff 	.word	0x000007ff
 8001720:	fffffc01 	.word	0xfffffc01
 8001724:	000003ff 	.word	0x000003ff
 8001728:	feffffff 	.word	0xfeffffff
 800172c:	000007fe 	.word	0x000007fe
 8001730:	464b      	mov	r3, r9
 8001732:	4323      	orrs	r3, r4
 8001734:	d059      	beq.n	80017ea <__aeabi_dmul+0x42e>
 8001736:	2c00      	cmp	r4, #0
 8001738:	d100      	bne.n	800173c <__aeabi_dmul+0x380>
 800173a:	e0a3      	b.n	8001884 <__aeabi_dmul+0x4c8>
 800173c:	0020      	movs	r0, r4
 800173e:	f000 fd0d 	bl	800215c <__clzsi2>
 8001742:	0001      	movs	r1, r0
 8001744:	0003      	movs	r3, r0
 8001746:	390b      	subs	r1, #11
 8001748:	221d      	movs	r2, #29
 800174a:	1a52      	subs	r2, r2, r1
 800174c:	4649      	mov	r1, r9
 800174e:	0018      	movs	r0, r3
 8001750:	40d1      	lsrs	r1, r2
 8001752:	464a      	mov	r2, r9
 8001754:	3808      	subs	r0, #8
 8001756:	4082      	lsls	r2, r0
 8001758:	4084      	lsls	r4, r0
 800175a:	0010      	movs	r0, r2
 800175c:	430c      	orrs	r4, r1
 800175e:	4a74      	ldr	r2, [pc, #464]	; (8001930 <__aeabi_dmul+0x574>)
 8001760:	1aeb      	subs	r3, r5, r3
 8001762:	4694      	mov	ip, r2
 8001764:	4642      	mov	r2, r8
 8001766:	4463      	add	r3, ip
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	407a      	eors	r2, r7
 800176e:	3301      	adds	r3, #1
 8001770:	2100      	movs	r1, #0
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	2e0a      	cmp	r6, #10
 8001778:	dd00      	ble.n	800177c <__aeabi_dmul+0x3c0>
 800177a:	e667      	b.n	800144c <__aeabi_dmul+0x90>
 800177c:	e683      	b.n	8001486 <__aeabi_dmul+0xca>
 800177e:	465b      	mov	r3, fp
 8001780:	4303      	orrs	r3, r0
 8001782:	469a      	mov	sl, r3
 8001784:	d02a      	beq.n	80017dc <__aeabi_dmul+0x420>
 8001786:	465b      	mov	r3, fp
 8001788:	2b00      	cmp	r3, #0
 800178a:	d06d      	beq.n	8001868 <__aeabi_dmul+0x4ac>
 800178c:	4658      	mov	r0, fp
 800178e:	f000 fce5 	bl	800215c <__clzsi2>
 8001792:	0001      	movs	r1, r0
 8001794:	0003      	movs	r3, r0
 8001796:	390b      	subs	r1, #11
 8001798:	221d      	movs	r2, #29
 800179a:	1a52      	subs	r2, r2, r1
 800179c:	0021      	movs	r1, r4
 800179e:	0018      	movs	r0, r3
 80017a0:	465d      	mov	r5, fp
 80017a2:	40d1      	lsrs	r1, r2
 80017a4:	3808      	subs	r0, #8
 80017a6:	4085      	lsls	r5, r0
 80017a8:	000a      	movs	r2, r1
 80017aa:	4084      	lsls	r4, r0
 80017ac:	432a      	orrs	r2, r5
 80017ae:	4693      	mov	fp, r2
 80017b0:	46a2      	mov	sl, r4
 80017b2:	4d5f      	ldr	r5, [pc, #380]	; (8001930 <__aeabi_dmul+0x574>)
 80017b4:	2600      	movs	r6, #0
 80017b6:	1aed      	subs	r5, r5, r3
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	e625      	b.n	800140a <__aeabi_dmul+0x4e>
 80017be:	465b      	mov	r3, fp
 80017c0:	4303      	orrs	r3, r0
 80017c2:	469a      	mov	sl, r3
 80017c4:	d105      	bne.n	80017d2 <__aeabi_dmul+0x416>
 80017c6:	2300      	movs	r3, #0
 80017c8:	469b      	mov	fp, r3
 80017ca:	3302      	adds	r3, #2
 80017cc:	2608      	movs	r6, #8
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	e61b      	b.n	800140a <__aeabi_dmul+0x4e>
 80017d2:	2303      	movs	r3, #3
 80017d4:	4682      	mov	sl, r0
 80017d6:	260c      	movs	r6, #12
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	e616      	b.n	800140a <__aeabi_dmul+0x4e>
 80017dc:	2300      	movs	r3, #0
 80017de:	469b      	mov	fp, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	2604      	movs	r6, #4
 80017e4:	2500      	movs	r5, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	e60f      	b.n	800140a <__aeabi_dmul+0x4e>
 80017ea:	4642      	mov	r2, r8
 80017ec:	3301      	adds	r3, #1
 80017ee:	9501      	str	r5, [sp, #4]
 80017f0:	431e      	orrs	r6, r3
 80017f2:	9b01      	ldr	r3, [sp, #4]
 80017f4:	407a      	eors	r2, r7
 80017f6:	3301      	adds	r3, #1
 80017f8:	2400      	movs	r4, #0
 80017fa:	2000      	movs	r0, #0
 80017fc:	2101      	movs	r1, #1
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2e0a      	cmp	r6, #10
 8001804:	dd00      	ble.n	8001808 <__aeabi_dmul+0x44c>
 8001806:	e621      	b.n	800144c <__aeabi_dmul+0x90>
 8001808:	e63d      	b.n	8001486 <__aeabi_dmul+0xca>
 800180a:	2101      	movs	r1, #1
 800180c:	1ac9      	subs	r1, r1, r3
 800180e:	2938      	cmp	r1, #56	; 0x38
 8001810:	dd00      	ble.n	8001814 <__aeabi_dmul+0x458>
 8001812:	e642      	b.n	800149a <__aeabi_dmul+0xde>
 8001814:	291f      	cmp	r1, #31
 8001816:	dd47      	ble.n	80018a8 <__aeabi_dmul+0x4ec>
 8001818:	261f      	movs	r6, #31
 800181a:	0025      	movs	r5, r4
 800181c:	4276      	negs	r6, r6
 800181e:	1af3      	subs	r3, r6, r3
 8001820:	40dd      	lsrs	r5, r3
 8001822:	002b      	movs	r3, r5
 8001824:	2920      	cmp	r1, #32
 8001826:	d005      	beq.n	8001834 <__aeabi_dmul+0x478>
 8001828:	4942      	ldr	r1, [pc, #264]	; (8001934 <__aeabi_dmul+0x578>)
 800182a:	9d02      	ldr	r5, [sp, #8]
 800182c:	468c      	mov	ip, r1
 800182e:	4465      	add	r5, ip
 8001830:	40ac      	lsls	r4, r5
 8001832:	4320      	orrs	r0, r4
 8001834:	1e41      	subs	r1, r0, #1
 8001836:	4188      	sbcs	r0, r1
 8001838:	4318      	orrs	r0, r3
 800183a:	2307      	movs	r3, #7
 800183c:	001d      	movs	r5, r3
 800183e:	2400      	movs	r4, #0
 8001840:	4005      	ands	r5, r0
 8001842:	4203      	tst	r3, r0
 8001844:	d04a      	beq.n	80018dc <__aeabi_dmul+0x520>
 8001846:	230f      	movs	r3, #15
 8001848:	2400      	movs	r4, #0
 800184a:	4003      	ands	r3, r0
 800184c:	2b04      	cmp	r3, #4
 800184e:	d042      	beq.n	80018d6 <__aeabi_dmul+0x51a>
 8001850:	1d03      	adds	r3, r0, #4
 8001852:	4283      	cmp	r3, r0
 8001854:	4180      	sbcs	r0, r0
 8001856:	4240      	negs	r0, r0
 8001858:	1824      	adds	r4, r4, r0
 800185a:	0018      	movs	r0, r3
 800185c:	0223      	lsls	r3, r4, #8
 800185e:	d53a      	bpl.n	80018d6 <__aeabi_dmul+0x51a>
 8001860:	2301      	movs	r3, #1
 8001862:	2400      	movs	r4, #0
 8001864:	2500      	movs	r5, #0
 8001866:	e61b      	b.n	80014a0 <__aeabi_dmul+0xe4>
 8001868:	f000 fc78 	bl	800215c <__clzsi2>
 800186c:	0001      	movs	r1, r0
 800186e:	0003      	movs	r3, r0
 8001870:	3115      	adds	r1, #21
 8001872:	3320      	adds	r3, #32
 8001874:	291c      	cmp	r1, #28
 8001876:	dd8f      	ble.n	8001798 <__aeabi_dmul+0x3dc>
 8001878:	3808      	subs	r0, #8
 800187a:	2200      	movs	r2, #0
 800187c:	4084      	lsls	r4, r0
 800187e:	4692      	mov	sl, r2
 8001880:	46a3      	mov	fp, r4
 8001882:	e796      	b.n	80017b2 <__aeabi_dmul+0x3f6>
 8001884:	f000 fc6a 	bl	800215c <__clzsi2>
 8001888:	0001      	movs	r1, r0
 800188a:	0003      	movs	r3, r0
 800188c:	3115      	adds	r1, #21
 800188e:	3320      	adds	r3, #32
 8001890:	291c      	cmp	r1, #28
 8001892:	dc00      	bgt.n	8001896 <__aeabi_dmul+0x4da>
 8001894:	e758      	b.n	8001748 <__aeabi_dmul+0x38c>
 8001896:	0002      	movs	r2, r0
 8001898:	464c      	mov	r4, r9
 800189a:	3a08      	subs	r2, #8
 800189c:	2000      	movs	r0, #0
 800189e:	4094      	lsls	r4, r2
 80018a0:	e75d      	b.n	800175e <__aeabi_dmul+0x3a2>
 80018a2:	9b01      	ldr	r3, [sp, #4]
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	e711      	b.n	80016cc <__aeabi_dmul+0x310>
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <__aeabi_dmul+0x57c>)
 80018aa:	0026      	movs	r6, r4
 80018ac:	469c      	mov	ip, r3
 80018ae:	0003      	movs	r3, r0
 80018b0:	9d02      	ldr	r5, [sp, #8]
 80018b2:	40cb      	lsrs	r3, r1
 80018b4:	4465      	add	r5, ip
 80018b6:	40ae      	lsls	r6, r5
 80018b8:	431e      	orrs	r6, r3
 80018ba:	0003      	movs	r3, r0
 80018bc:	40ab      	lsls	r3, r5
 80018be:	1e58      	subs	r0, r3, #1
 80018c0:	4183      	sbcs	r3, r0
 80018c2:	0030      	movs	r0, r6
 80018c4:	4318      	orrs	r0, r3
 80018c6:	40cc      	lsrs	r4, r1
 80018c8:	0743      	lsls	r3, r0, #29
 80018ca:	d0c7      	beq.n	800185c <__aeabi_dmul+0x4a0>
 80018cc:	230f      	movs	r3, #15
 80018ce:	4003      	ands	r3, r0
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d1bd      	bne.n	8001850 <__aeabi_dmul+0x494>
 80018d4:	e7c2      	b.n	800185c <__aeabi_dmul+0x4a0>
 80018d6:	0765      	lsls	r5, r4, #29
 80018d8:	0264      	lsls	r4, r4, #9
 80018da:	0b24      	lsrs	r4, r4, #12
 80018dc:	08c0      	lsrs	r0, r0, #3
 80018de:	2300      	movs	r3, #0
 80018e0:	4305      	orrs	r5, r0
 80018e2:	e5dd      	b.n	80014a0 <__aeabi_dmul+0xe4>
 80018e4:	2500      	movs	r5, #0
 80018e6:	2302      	movs	r3, #2
 80018e8:	2e0f      	cmp	r6, #15
 80018ea:	d10c      	bne.n	8001906 <__aeabi_dmul+0x54a>
 80018ec:	2480      	movs	r4, #128	; 0x80
 80018ee:	465b      	mov	r3, fp
 80018f0:	0324      	lsls	r4, r4, #12
 80018f2:	4223      	tst	r3, r4
 80018f4:	d00e      	beq.n	8001914 <__aeabi_dmul+0x558>
 80018f6:	4221      	tst	r1, r4
 80018f8:	d10c      	bne.n	8001914 <__aeabi_dmul+0x558>
 80018fa:	430c      	orrs	r4, r1
 80018fc:	0324      	lsls	r4, r4, #12
 80018fe:	003a      	movs	r2, r7
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <__aeabi_dmul+0x580>)
 8001902:	0b24      	lsrs	r4, r4, #12
 8001904:	e5cc      	b.n	80014a0 <__aeabi_dmul+0xe4>
 8001906:	2e0b      	cmp	r6, #11
 8001908:	d000      	beq.n	800190c <__aeabi_dmul+0x550>
 800190a:	e5a2      	b.n	8001452 <__aeabi_dmul+0x96>
 800190c:	468b      	mov	fp, r1
 800190e:	46aa      	mov	sl, r5
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	e5f7      	b.n	8001504 <__aeabi_dmul+0x148>
 8001914:	2480      	movs	r4, #128	; 0x80
 8001916:	465b      	mov	r3, fp
 8001918:	0324      	lsls	r4, r4, #12
 800191a:	431c      	orrs	r4, r3
 800191c:	0324      	lsls	r4, r4, #12
 800191e:	4642      	mov	r2, r8
 8001920:	4655      	mov	r5, sl
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <__aeabi_dmul+0x580>)
 8001924:	0b24      	lsrs	r4, r4, #12
 8001926:	e5bb      	b.n	80014a0 <__aeabi_dmul+0xe4>
 8001928:	464d      	mov	r5, r9
 800192a:	0021      	movs	r1, r4
 800192c:	2303      	movs	r3, #3
 800192e:	e7db      	b.n	80018e8 <__aeabi_dmul+0x52c>
 8001930:	fffffc0d 	.word	0xfffffc0d
 8001934:	0000043e 	.word	0x0000043e
 8001938:	0000041e 	.word	0x0000041e
 800193c:	000007ff 	.word	0x000007ff

08001940 <__aeabi_dsub>:
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	4657      	mov	r7, sl
 8001944:	464e      	mov	r6, r9
 8001946:	4645      	mov	r5, r8
 8001948:	46de      	mov	lr, fp
 800194a:	b5e0      	push	{r5, r6, r7, lr}
 800194c:	000d      	movs	r5, r1
 800194e:	0004      	movs	r4, r0
 8001950:	0019      	movs	r1, r3
 8001952:	0010      	movs	r0, r2
 8001954:	032b      	lsls	r3, r5, #12
 8001956:	0a5b      	lsrs	r3, r3, #9
 8001958:	0f62      	lsrs	r2, r4, #29
 800195a:	431a      	orrs	r2, r3
 800195c:	00e3      	lsls	r3, r4, #3
 800195e:	030c      	lsls	r4, r1, #12
 8001960:	0a64      	lsrs	r4, r4, #9
 8001962:	0f47      	lsrs	r7, r0, #29
 8001964:	4327      	orrs	r7, r4
 8001966:	4cd0      	ldr	r4, [pc, #832]	; (8001ca8 <__aeabi_dsub+0x368>)
 8001968:	006e      	lsls	r6, r5, #1
 800196a:	4691      	mov	r9, r2
 800196c:	b083      	sub	sp, #12
 800196e:	004a      	lsls	r2, r1, #1
 8001970:	00c0      	lsls	r0, r0, #3
 8001972:	4698      	mov	r8, r3
 8001974:	46a2      	mov	sl, r4
 8001976:	0d76      	lsrs	r6, r6, #21
 8001978:	0fed      	lsrs	r5, r5, #31
 800197a:	0d52      	lsrs	r2, r2, #21
 800197c:	0fc9      	lsrs	r1, r1, #31
 800197e:	9001      	str	r0, [sp, #4]
 8001980:	42a2      	cmp	r2, r4
 8001982:	d100      	bne.n	8001986 <__aeabi_dsub+0x46>
 8001984:	e0b9      	b.n	8001afa <__aeabi_dsub+0x1ba>
 8001986:	2401      	movs	r4, #1
 8001988:	4061      	eors	r1, r4
 800198a:	468b      	mov	fp, r1
 800198c:	428d      	cmp	r5, r1
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x52>
 8001990:	e08d      	b.n	8001aae <__aeabi_dsub+0x16e>
 8001992:	1ab4      	subs	r4, r6, r2
 8001994:	46a4      	mov	ip, r4
 8001996:	2c00      	cmp	r4, #0
 8001998:	dc00      	bgt.n	800199c <__aeabi_dsub+0x5c>
 800199a:	e0b7      	b.n	8001b0c <__aeabi_dsub+0x1cc>
 800199c:	2a00      	cmp	r2, #0
 800199e:	d100      	bne.n	80019a2 <__aeabi_dsub+0x62>
 80019a0:	e0cb      	b.n	8001b3a <__aeabi_dsub+0x1fa>
 80019a2:	4ac1      	ldr	r2, [pc, #772]	; (8001ca8 <__aeabi_dsub+0x368>)
 80019a4:	4296      	cmp	r6, r2
 80019a6:	d100      	bne.n	80019aa <__aeabi_dsub+0x6a>
 80019a8:	e186      	b.n	8001cb8 <__aeabi_dsub+0x378>
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	0412      	lsls	r2, r2, #16
 80019ae:	4317      	orrs	r7, r2
 80019b0:	4662      	mov	r2, ip
 80019b2:	2a38      	cmp	r2, #56	; 0x38
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0x78>
 80019b6:	e1a4      	b.n	8001d02 <__aeabi_dsub+0x3c2>
 80019b8:	2a1f      	cmp	r2, #31
 80019ba:	dd00      	ble.n	80019be <__aeabi_dsub+0x7e>
 80019bc:	e21d      	b.n	8001dfa <__aeabi_dsub+0x4ba>
 80019be:	4661      	mov	r1, ip
 80019c0:	2220      	movs	r2, #32
 80019c2:	003c      	movs	r4, r7
 80019c4:	1a52      	subs	r2, r2, r1
 80019c6:	0001      	movs	r1, r0
 80019c8:	4090      	lsls	r0, r2
 80019ca:	4094      	lsls	r4, r2
 80019cc:	1e42      	subs	r2, r0, #1
 80019ce:	4190      	sbcs	r0, r2
 80019d0:	4662      	mov	r2, ip
 80019d2:	46a0      	mov	r8, r4
 80019d4:	4664      	mov	r4, ip
 80019d6:	40d7      	lsrs	r7, r2
 80019d8:	464a      	mov	r2, r9
 80019da:	40e1      	lsrs	r1, r4
 80019dc:	4644      	mov	r4, r8
 80019de:	1bd2      	subs	r2, r2, r7
 80019e0:	4691      	mov	r9, r2
 80019e2:	430c      	orrs	r4, r1
 80019e4:	4304      	orrs	r4, r0
 80019e6:	1b1c      	subs	r4, r3, r4
 80019e8:	42a3      	cmp	r3, r4
 80019ea:	4192      	sbcs	r2, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	4252      	negs	r2, r2
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	469a      	mov	sl, r3
 80019f4:	4653      	mov	r3, sl
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	d400      	bmi.n	80019fc <__aeabi_dsub+0xbc>
 80019fa:	e12b      	b.n	8001c54 <__aeabi_dsub+0x314>
 80019fc:	4653      	mov	r3, sl
 80019fe:	025a      	lsls	r2, r3, #9
 8001a00:	0a53      	lsrs	r3, r2, #9
 8001a02:	469a      	mov	sl, r3
 8001a04:	4653      	mov	r3, sl
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0xcc>
 8001a0a:	e166      	b.n	8001cda <__aeabi_dsub+0x39a>
 8001a0c:	4650      	mov	r0, sl
 8001a0e:	f000 fba5 	bl	800215c <__clzsi2>
 8001a12:	0003      	movs	r3, r0
 8001a14:	3b08      	subs	r3, #8
 8001a16:	2220      	movs	r2, #32
 8001a18:	0020      	movs	r0, r4
 8001a1a:	1ad2      	subs	r2, r2, r3
 8001a1c:	4651      	mov	r1, sl
 8001a1e:	40d0      	lsrs	r0, r2
 8001a20:	4099      	lsls	r1, r3
 8001a22:	0002      	movs	r2, r0
 8001a24:	409c      	lsls	r4, r3
 8001a26:	430a      	orrs	r2, r1
 8001a28:	429e      	cmp	r6, r3
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dsub+0xee>
 8001a2c:	e164      	b.n	8001cf8 <__aeabi_dsub+0x3b8>
 8001a2e:	1b9b      	subs	r3, r3, r6
 8001a30:	1c59      	adds	r1, r3, #1
 8001a32:	291f      	cmp	r1, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0xf8>
 8001a36:	e0fe      	b.n	8001c36 <__aeabi_dsub+0x2f6>
 8001a38:	2320      	movs	r3, #32
 8001a3a:	0010      	movs	r0, r2
 8001a3c:	0026      	movs	r6, r4
 8001a3e:	1a5b      	subs	r3, r3, r1
 8001a40:	409c      	lsls	r4, r3
 8001a42:	4098      	lsls	r0, r3
 8001a44:	40ce      	lsrs	r6, r1
 8001a46:	40ca      	lsrs	r2, r1
 8001a48:	1e63      	subs	r3, r4, #1
 8001a4a:	419c      	sbcs	r4, r3
 8001a4c:	4330      	orrs	r0, r6
 8001a4e:	4692      	mov	sl, r2
 8001a50:	2600      	movs	r6, #0
 8001a52:	4304      	orrs	r4, r0
 8001a54:	0763      	lsls	r3, r4, #29
 8001a56:	d009      	beq.n	8001a6c <__aeabi_dsub+0x12c>
 8001a58:	230f      	movs	r3, #15
 8001a5a:	4023      	ands	r3, r4
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d005      	beq.n	8001a6c <__aeabi_dsub+0x12c>
 8001a60:	1d23      	adds	r3, r4, #4
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	41a4      	sbcs	r4, r4
 8001a66:	4264      	negs	r4, r4
 8001a68:	44a2      	add	sl, r4
 8001a6a:	001c      	movs	r4, r3
 8001a6c:	4653      	mov	r3, sl
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	d400      	bmi.n	8001a74 <__aeabi_dsub+0x134>
 8001a72:	e0f2      	b.n	8001c5a <__aeabi_dsub+0x31a>
 8001a74:	4b8c      	ldr	r3, [pc, #560]	; (8001ca8 <__aeabi_dsub+0x368>)
 8001a76:	3601      	adds	r6, #1
 8001a78:	429e      	cmp	r6, r3
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_dsub+0x13e>
 8001a7c:	e10f      	b.n	8001c9e <__aeabi_dsub+0x35e>
 8001a7e:	4653      	mov	r3, sl
 8001a80:	498a      	ldr	r1, [pc, #552]	; (8001cac <__aeabi_dsub+0x36c>)
 8001a82:	08e4      	lsrs	r4, r4, #3
 8001a84:	400b      	ands	r3, r1
 8001a86:	0019      	movs	r1, r3
 8001a88:	075b      	lsls	r3, r3, #29
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	0572      	lsls	r2, r6, #21
 8001a8e:	024c      	lsls	r4, r1, #9
 8001a90:	0b24      	lsrs	r4, r4, #12
 8001a92:	0d52      	lsrs	r2, r2, #21
 8001a94:	0512      	lsls	r2, r2, #20
 8001a96:	4322      	orrs	r2, r4
 8001a98:	07ed      	lsls	r5, r5, #31
 8001a9a:	432a      	orrs	r2, r5
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	b003      	add	sp, #12
 8001aa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa4:	46bb      	mov	fp, r7
 8001aa6:	46b2      	mov	sl, r6
 8001aa8:	46a9      	mov	r9, r5
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	1ab4      	subs	r4, r6, r2
 8001ab0:	46a4      	mov	ip, r4
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	dd59      	ble.n	8001b6a <__aeabi_dsub+0x22a>
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x17c>
 8001aba:	e0b0      	b.n	8001c1e <__aeabi_dsub+0x2de>
 8001abc:	4556      	cmp	r6, sl
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x182>
 8001ac0:	e0fa      	b.n	8001cb8 <__aeabi_dsub+0x378>
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	0412      	lsls	r2, r2, #16
 8001ac6:	4317      	orrs	r7, r2
 8001ac8:	4662      	mov	r2, ip
 8001aca:	2a38      	cmp	r2, #56	; 0x38
 8001acc:	dd00      	ble.n	8001ad0 <__aeabi_dsub+0x190>
 8001ace:	e0d4      	b.n	8001c7a <__aeabi_dsub+0x33a>
 8001ad0:	2a1f      	cmp	r2, #31
 8001ad2:	dc00      	bgt.n	8001ad6 <__aeabi_dsub+0x196>
 8001ad4:	e1c0      	b.n	8001e58 <__aeabi_dsub+0x518>
 8001ad6:	0039      	movs	r1, r7
 8001ad8:	3a20      	subs	r2, #32
 8001ada:	40d1      	lsrs	r1, r2
 8001adc:	4662      	mov	r2, ip
 8001ade:	2a20      	cmp	r2, #32
 8001ae0:	d006      	beq.n	8001af0 <__aeabi_dsub+0x1b0>
 8001ae2:	4664      	mov	r4, ip
 8001ae4:	2240      	movs	r2, #64	; 0x40
 8001ae6:	1b12      	subs	r2, r2, r4
 8001ae8:	003c      	movs	r4, r7
 8001aea:	4094      	lsls	r4, r2
 8001aec:	4304      	orrs	r4, r0
 8001aee:	9401      	str	r4, [sp, #4]
 8001af0:	9c01      	ldr	r4, [sp, #4]
 8001af2:	1e62      	subs	r2, r4, #1
 8001af4:	4194      	sbcs	r4, r2
 8001af6:	430c      	orrs	r4, r1
 8001af8:	e0c3      	b.n	8001c82 <__aeabi_dsub+0x342>
 8001afa:	003c      	movs	r4, r7
 8001afc:	4304      	orrs	r4, r0
 8001afe:	d02b      	beq.n	8001b58 <__aeabi_dsub+0x218>
 8001b00:	468b      	mov	fp, r1
 8001b02:	428d      	cmp	r5, r1
 8001b04:	d02e      	beq.n	8001b64 <__aeabi_dsub+0x224>
 8001b06:	4c6a      	ldr	r4, [pc, #424]	; (8001cb0 <__aeabi_dsub+0x370>)
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	44b4      	add	ip, r6
 8001b0c:	4664      	mov	r4, ip
 8001b0e:	2c00      	cmp	r4, #0
 8001b10:	d05f      	beq.n	8001bd2 <__aeabi_dsub+0x292>
 8001b12:	1b94      	subs	r4, r2, r6
 8001b14:	46a4      	mov	ip, r4
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d000      	beq.n	8001b1c <__aeabi_dsub+0x1dc>
 8001b1a:	e120      	b.n	8001d5e <__aeabi_dsub+0x41e>
 8001b1c:	464c      	mov	r4, r9
 8001b1e:	431c      	orrs	r4, r3
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x1e4>
 8001b22:	e1c7      	b.n	8001eb4 <__aeabi_dsub+0x574>
 8001b24:	4661      	mov	r1, ip
 8001b26:	1e4c      	subs	r4, r1, #1
 8001b28:	2901      	cmp	r1, #1
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x1ee>
 8001b2c:	e223      	b.n	8001f76 <__aeabi_dsub+0x636>
 8001b2e:	4d5e      	ldr	r5, [pc, #376]	; (8001ca8 <__aeabi_dsub+0x368>)
 8001b30:	45ac      	cmp	ip, r5
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dsub+0x1f6>
 8001b34:	e1d8      	b.n	8001ee8 <__aeabi_dsub+0x5a8>
 8001b36:	46a4      	mov	ip, r4
 8001b38:	e11a      	b.n	8001d70 <__aeabi_dsub+0x430>
 8001b3a:	003a      	movs	r2, r7
 8001b3c:	4302      	orrs	r2, r0
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x202>
 8001b40:	e0e4      	b.n	8001d0c <__aeabi_dsub+0x3cc>
 8001b42:	0022      	movs	r2, r4
 8001b44:	3a01      	subs	r2, #1
 8001b46:	2c01      	cmp	r4, #1
 8001b48:	d100      	bne.n	8001b4c <__aeabi_dsub+0x20c>
 8001b4a:	e1c3      	b.n	8001ed4 <__aeabi_dsub+0x594>
 8001b4c:	4956      	ldr	r1, [pc, #344]	; (8001ca8 <__aeabi_dsub+0x368>)
 8001b4e:	428c      	cmp	r4, r1
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dsub+0x214>
 8001b52:	e0b1      	b.n	8001cb8 <__aeabi_dsub+0x378>
 8001b54:	4694      	mov	ip, r2
 8001b56:	e72b      	b.n	80019b0 <__aeabi_dsub+0x70>
 8001b58:	2401      	movs	r4, #1
 8001b5a:	4061      	eors	r1, r4
 8001b5c:	468b      	mov	fp, r1
 8001b5e:	428d      	cmp	r5, r1
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dsub+0x224>
 8001b62:	e716      	b.n	8001992 <__aeabi_dsub+0x52>
 8001b64:	4952      	ldr	r1, [pc, #328]	; (8001cb0 <__aeabi_dsub+0x370>)
 8001b66:	468c      	mov	ip, r1
 8001b68:	44b4      	add	ip, r6
 8001b6a:	4664      	mov	r4, ip
 8001b6c:	2c00      	cmp	r4, #0
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x232>
 8001b70:	e0d3      	b.n	8001d1a <__aeabi_dsub+0x3da>
 8001b72:	1b91      	subs	r1, r2, r6
 8001b74:	468c      	mov	ip, r1
 8001b76:	2e00      	cmp	r6, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x23c>
 8001b7a:	e15e      	b.n	8001e3a <__aeabi_dsub+0x4fa>
 8001b7c:	494a      	ldr	r1, [pc, #296]	; (8001ca8 <__aeabi_dsub+0x368>)
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x244>
 8001b82:	e1be      	b.n	8001f02 <__aeabi_dsub+0x5c2>
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	464c      	mov	r4, r9
 8001b88:	0409      	lsls	r1, r1, #16
 8001b8a:	430c      	orrs	r4, r1
 8001b8c:	46a1      	mov	r9, r4
 8001b8e:	4661      	mov	r1, ip
 8001b90:	2938      	cmp	r1, #56	; 0x38
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dsub+0x256>
 8001b94:	e1ba      	b.n	8001f0c <__aeabi_dsub+0x5cc>
 8001b96:	291f      	cmp	r1, #31
 8001b98:	dd00      	ble.n	8001b9c <__aeabi_dsub+0x25c>
 8001b9a:	e227      	b.n	8001fec <__aeabi_dsub+0x6ac>
 8001b9c:	2420      	movs	r4, #32
 8001b9e:	1a64      	subs	r4, r4, r1
 8001ba0:	4649      	mov	r1, r9
 8001ba2:	40a1      	lsls	r1, r4
 8001ba4:	001e      	movs	r6, r3
 8001ba6:	4688      	mov	r8, r1
 8001ba8:	4661      	mov	r1, ip
 8001baa:	40a3      	lsls	r3, r4
 8001bac:	40ce      	lsrs	r6, r1
 8001bae:	4641      	mov	r1, r8
 8001bb0:	1e5c      	subs	r4, r3, #1
 8001bb2:	41a3      	sbcs	r3, r4
 8001bb4:	4331      	orrs	r1, r6
 8001bb6:	4319      	orrs	r1, r3
 8001bb8:	000c      	movs	r4, r1
 8001bba:	4663      	mov	r3, ip
 8001bbc:	4649      	mov	r1, r9
 8001bbe:	40d9      	lsrs	r1, r3
 8001bc0:	187f      	adds	r7, r7, r1
 8001bc2:	1824      	adds	r4, r4, r0
 8001bc4:	4284      	cmp	r4, r0
 8001bc6:	419b      	sbcs	r3, r3
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469a      	mov	sl, r3
 8001bcc:	0016      	movs	r6, r2
 8001bce:	44ba      	add	sl, r7
 8001bd0:	e05d      	b.n	8001c8e <__aeabi_dsub+0x34e>
 8001bd2:	4c38      	ldr	r4, [pc, #224]	; (8001cb4 <__aeabi_dsub+0x374>)
 8001bd4:	1c72      	adds	r2, r6, #1
 8001bd6:	4222      	tst	r2, r4
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_dsub+0x29c>
 8001bda:	e0df      	b.n	8001d9c <__aeabi_dsub+0x45c>
 8001bdc:	464a      	mov	r2, r9
 8001bde:	431a      	orrs	r2, r3
 8001be0:	2e00      	cmp	r6, #0
 8001be2:	d000      	beq.n	8001be6 <__aeabi_dsub+0x2a6>
 8001be4:	e15c      	b.n	8001ea0 <__aeabi_dsub+0x560>
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d100      	bne.n	8001bec <__aeabi_dsub+0x2ac>
 8001bea:	e1cf      	b.n	8001f8c <__aeabi_dsub+0x64c>
 8001bec:	003a      	movs	r2, r7
 8001bee:	4302      	orrs	r2, r0
 8001bf0:	d100      	bne.n	8001bf4 <__aeabi_dsub+0x2b4>
 8001bf2:	e17f      	b.n	8001ef4 <__aeabi_dsub+0x5b4>
 8001bf4:	1a1c      	subs	r4, r3, r0
 8001bf6:	464a      	mov	r2, r9
 8001bf8:	42a3      	cmp	r3, r4
 8001bfa:	4189      	sbcs	r1, r1
 8001bfc:	1bd2      	subs	r2, r2, r7
 8001bfe:	4249      	negs	r1, r1
 8001c00:	1a52      	subs	r2, r2, r1
 8001c02:	4692      	mov	sl, r2
 8001c04:	0212      	lsls	r2, r2, #8
 8001c06:	d400      	bmi.n	8001c0a <__aeabi_dsub+0x2ca>
 8001c08:	e20a      	b.n	8002020 <__aeabi_dsub+0x6e0>
 8001c0a:	1ac4      	subs	r4, r0, r3
 8001c0c:	42a0      	cmp	r0, r4
 8001c0e:	4180      	sbcs	r0, r0
 8001c10:	464b      	mov	r3, r9
 8001c12:	4240      	negs	r0, r0
 8001c14:	1aff      	subs	r7, r7, r3
 8001c16:	1a3b      	subs	r3, r7, r0
 8001c18:	469a      	mov	sl, r3
 8001c1a:	465d      	mov	r5, fp
 8001c1c:	e71a      	b.n	8001a54 <__aeabi_dsub+0x114>
 8001c1e:	003a      	movs	r2, r7
 8001c20:	4302      	orrs	r2, r0
 8001c22:	d073      	beq.n	8001d0c <__aeabi_dsub+0x3cc>
 8001c24:	0022      	movs	r2, r4
 8001c26:	3a01      	subs	r2, #1
 8001c28:	2c01      	cmp	r4, #1
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x2ee>
 8001c2c:	e0cb      	b.n	8001dc6 <__aeabi_dsub+0x486>
 8001c2e:	4554      	cmp	r4, sl
 8001c30:	d042      	beq.n	8001cb8 <__aeabi_dsub+0x378>
 8001c32:	4694      	mov	ip, r2
 8001c34:	e748      	b.n	8001ac8 <__aeabi_dsub+0x188>
 8001c36:	0010      	movs	r0, r2
 8001c38:	3b1f      	subs	r3, #31
 8001c3a:	40d8      	lsrs	r0, r3
 8001c3c:	2920      	cmp	r1, #32
 8001c3e:	d003      	beq.n	8001c48 <__aeabi_dsub+0x308>
 8001c40:	2340      	movs	r3, #64	; 0x40
 8001c42:	1a5b      	subs	r3, r3, r1
 8001c44:	409a      	lsls	r2, r3
 8001c46:	4314      	orrs	r4, r2
 8001c48:	1e63      	subs	r3, r4, #1
 8001c4a:	419c      	sbcs	r4, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2600      	movs	r6, #0
 8001c50:	469a      	mov	sl, r3
 8001c52:	4304      	orrs	r4, r0
 8001c54:	0763      	lsls	r3, r4, #29
 8001c56:	d000      	beq.n	8001c5a <__aeabi_dsub+0x31a>
 8001c58:	e6fe      	b.n	8001a58 <__aeabi_dsub+0x118>
 8001c5a:	4652      	mov	r2, sl
 8001c5c:	08e3      	lsrs	r3, r4, #3
 8001c5e:	0752      	lsls	r2, r2, #29
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4652      	mov	r2, sl
 8001c64:	46b4      	mov	ip, r6
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	490f      	ldr	r1, [pc, #60]	; (8001ca8 <__aeabi_dsub+0x368>)
 8001c6a:	458c      	cmp	ip, r1
 8001c6c:	d02a      	beq.n	8001cc4 <__aeabi_dsub+0x384>
 8001c6e:	0312      	lsls	r2, r2, #12
 8001c70:	0b14      	lsrs	r4, r2, #12
 8001c72:	4662      	mov	r2, ip
 8001c74:	0552      	lsls	r2, r2, #21
 8001c76:	0d52      	lsrs	r2, r2, #21
 8001c78:	e70c      	b.n	8001a94 <__aeabi_dsub+0x154>
 8001c7a:	003c      	movs	r4, r7
 8001c7c:	4304      	orrs	r4, r0
 8001c7e:	1e62      	subs	r2, r4, #1
 8001c80:	4194      	sbcs	r4, r2
 8001c82:	18e4      	adds	r4, r4, r3
 8001c84:	429c      	cmp	r4, r3
 8001c86:	4192      	sbcs	r2, r2
 8001c88:	4252      	negs	r2, r2
 8001c8a:	444a      	add	r2, r9
 8001c8c:	4692      	mov	sl, r2
 8001c8e:	4653      	mov	r3, sl
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	d5df      	bpl.n	8001c54 <__aeabi_dsub+0x314>
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__aeabi_dsub+0x368>)
 8001c96:	3601      	adds	r6, #1
 8001c98:	429e      	cmp	r6, r3
 8001c9a:	d000      	beq.n	8001c9e <__aeabi_dsub+0x35e>
 8001c9c:	e0a0      	b.n	8001de0 <__aeabi_dsub+0x4a0>
 8001c9e:	0032      	movs	r2, r6
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e6f6      	b.n	8001a94 <__aeabi_dsub+0x154>
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	000007ff 	.word	0x000007ff
 8001cac:	ff7fffff 	.word	0xff7fffff
 8001cb0:	fffff801 	.word	0xfffff801
 8001cb4:	000007fe 	.word	0x000007fe
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	464a      	mov	r2, r9
 8001cbc:	0752      	lsls	r2, r2, #29
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	464a      	mov	r2, r9
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	4311      	orrs	r1, r2
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x38c>
 8001cca:	e1b5      	b.n	8002038 <__aeabi_dsub+0x6f8>
 8001ccc:	2480      	movs	r4, #128	; 0x80
 8001cce:	0324      	lsls	r4, r4, #12
 8001cd0:	4314      	orrs	r4, r2
 8001cd2:	0324      	lsls	r4, r4, #12
 8001cd4:	4ad5      	ldr	r2, [pc, #852]	; (800202c <__aeabi_dsub+0x6ec>)
 8001cd6:	0b24      	lsrs	r4, r4, #12
 8001cd8:	e6dc      	b.n	8001a94 <__aeabi_dsub+0x154>
 8001cda:	0020      	movs	r0, r4
 8001cdc:	f000 fa3e 	bl	800215c <__clzsi2>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	2b1f      	cmp	r3, #31
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_dsub+0x3aa>
 8001ce8:	e695      	b.n	8001a16 <__aeabi_dsub+0xd6>
 8001cea:	0022      	movs	r2, r4
 8001cec:	3808      	subs	r0, #8
 8001cee:	4082      	lsls	r2, r0
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	429e      	cmp	r6, r3
 8001cf4:	dc00      	bgt.n	8001cf8 <__aeabi_dsub+0x3b8>
 8001cf6:	e69a      	b.n	8001a2e <__aeabi_dsub+0xee>
 8001cf8:	1af6      	subs	r6, r6, r3
 8001cfa:	4bcd      	ldr	r3, [pc, #820]	; (8002030 <__aeabi_dsub+0x6f0>)
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	4692      	mov	sl, r2
 8001d00:	e6a8      	b.n	8001a54 <__aeabi_dsub+0x114>
 8001d02:	003c      	movs	r4, r7
 8001d04:	4304      	orrs	r4, r0
 8001d06:	1e62      	subs	r2, r4, #1
 8001d08:	4194      	sbcs	r4, r2
 8001d0a:	e66c      	b.n	80019e6 <__aeabi_dsub+0xa6>
 8001d0c:	464a      	mov	r2, r9
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	0752      	lsls	r2, r2, #29
 8001d12:	4313      	orrs	r3, r2
 8001d14:	464a      	mov	r2, r9
 8001d16:	08d2      	lsrs	r2, r2, #3
 8001d18:	e7a6      	b.n	8001c68 <__aeabi_dsub+0x328>
 8001d1a:	4cc6      	ldr	r4, [pc, #792]	; (8002034 <__aeabi_dsub+0x6f4>)
 8001d1c:	1c72      	adds	r2, r6, #1
 8001d1e:	4222      	tst	r2, r4
 8001d20:	d000      	beq.n	8001d24 <__aeabi_dsub+0x3e4>
 8001d22:	e0ac      	b.n	8001e7e <__aeabi_dsub+0x53e>
 8001d24:	464a      	mov	r2, r9
 8001d26:	431a      	orrs	r2, r3
 8001d28:	2e00      	cmp	r6, #0
 8001d2a:	d000      	beq.n	8001d2e <__aeabi_dsub+0x3ee>
 8001d2c:	e105      	b.n	8001f3a <__aeabi_dsub+0x5fa>
 8001d2e:	2a00      	cmp	r2, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x3f4>
 8001d32:	e156      	b.n	8001fe2 <__aeabi_dsub+0x6a2>
 8001d34:	003a      	movs	r2, r7
 8001d36:	4302      	orrs	r2, r0
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x3fc>
 8001d3a:	e0db      	b.n	8001ef4 <__aeabi_dsub+0x5b4>
 8001d3c:	181c      	adds	r4, r3, r0
 8001d3e:	429c      	cmp	r4, r3
 8001d40:	419b      	sbcs	r3, r3
 8001d42:	444f      	add	r7, r9
 8001d44:	46ba      	mov	sl, r7
 8001d46:	425b      	negs	r3, r3
 8001d48:	449a      	add	sl, r3
 8001d4a:	4653      	mov	r3, sl
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	d400      	bmi.n	8001d52 <__aeabi_dsub+0x412>
 8001d50:	e780      	b.n	8001c54 <__aeabi_dsub+0x314>
 8001d52:	4652      	mov	r2, sl
 8001d54:	4bb6      	ldr	r3, [pc, #728]	; (8002030 <__aeabi_dsub+0x6f0>)
 8001d56:	2601      	movs	r6, #1
 8001d58:	401a      	ands	r2, r3
 8001d5a:	4692      	mov	sl, r2
 8001d5c:	e77a      	b.n	8001c54 <__aeabi_dsub+0x314>
 8001d5e:	4cb3      	ldr	r4, [pc, #716]	; (800202c <__aeabi_dsub+0x6ec>)
 8001d60:	42a2      	cmp	r2, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x426>
 8001d64:	e0c0      	b.n	8001ee8 <__aeabi_dsub+0x5a8>
 8001d66:	2480      	movs	r4, #128	; 0x80
 8001d68:	464d      	mov	r5, r9
 8001d6a:	0424      	lsls	r4, r4, #16
 8001d6c:	4325      	orrs	r5, r4
 8001d6e:	46a9      	mov	r9, r5
 8001d70:	4664      	mov	r4, ip
 8001d72:	2c38      	cmp	r4, #56	; 0x38
 8001d74:	dc53      	bgt.n	8001e1e <__aeabi_dsub+0x4de>
 8001d76:	4661      	mov	r1, ip
 8001d78:	2c1f      	cmp	r4, #31
 8001d7a:	dd00      	ble.n	8001d7e <__aeabi_dsub+0x43e>
 8001d7c:	e0cd      	b.n	8001f1a <__aeabi_dsub+0x5da>
 8001d7e:	2520      	movs	r5, #32
 8001d80:	001e      	movs	r6, r3
 8001d82:	1b2d      	subs	r5, r5, r4
 8001d84:	464c      	mov	r4, r9
 8001d86:	40ab      	lsls	r3, r5
 8001d88:	40ac      	lsls	r4, r5
 8001d8a:	40ce      	lsrs	r6, r1
 8001d8c:	1e5d      	subs	r5, r3, #1
 8001d8e:	41ab      	sbcs	r3, r5
 8001d90:	4334      	orrs	r4, r6
 8001d92:	4323      	orrs	r3, r4
 8001d94:	464c      	mov	r4, r9
 8001d96:	40cc      	lsrs	r4, r1
 8001d98:	1b3f      	subs	r7, r7, r4
 8001d9a:	e045      	b.n	8001e28 <__aeabi_dsub+0x4e8>
 8001d9c:	464a      	mov	r2, r9
 8001d9e:	1a1c      	subs	r4, r3, r0
 8001da0:	1bd1      	subs	r1, r2, r7
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	4192      	sbcs	r2, r2
 8001da6:	4252      	negs	r2, r2
 8001da8:	4692      	mov	sl, r2
 8001daa:	000a      	movs	r2, r1
 8001dac:	4651      	mov	r1, sl
 8001dae:	1a52      	subs	r2, r2, r1
 8001db0:	4692      	mov	sl, r2
 8001db2:	0212      	lsls	r2, r2, #8
 8001db4:	d500      	bpl.n	8001db8 <__aeabi_dsub+0x478>
 8001db6:	e083      	b.n	8001ec0 <__aeabi_dsub+0x580>
 8001db8:	4653      	mov	r3, sl
 8001dba:	4323      	orrs	r3, r4
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dsub+0x480>
 8001dbe:	e621      	b.n	8001a04 <__aeabi_dsub+0xc4>
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	e753      	b.n	8001c6e <__aeabi_dsub+0x32e>
 8001dc6:	181c      	adds	r4, r3, r0
 8001dc8:	429c      	cmp	r4, r3
 8001dca:	419b      	sbcs	r3, r3
 8001dcc:	444f      	add	r7, r9
 8001dce:	46ba      	mov	sl, r7
 8001dd0:	425b      	negs	r3, r3
 8001dd2:	449a      	add	sl, r3
 8001dd4:	4653      	mov	r3, sl
 8001dd6:	2601      	movs	r6, #1
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	d400      	bmi.n	8001dde <__aeabi_dsub+0x49e>
 8001ddc:	e73a      	b.n	8001c54 <__aeabi_dsub+0x314>
 8001dde:	2602      	movs	r6, #2
 8001de0:	4652      	mov	r2, sl
 8001de2:	4b93      	ldr	r3, [pc, #588]	; (8002030 <__aeabi_dsub+0x6f0>)
 8001de4:	2101      	movs	r1, #1
 8001de6:	401a      	ands	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	4021      	ands	r1, r4
 8001dec:	0862      	lsrs	r2, r4, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	07dc      	lsls	r4, r3, #31
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	469a      	mov	sl, r3
 8001df6:	4314      	orrs	r4, r2
 8001df8:	e62c      	b.n	8001a54 <__aeabi_dsub+0x114>
 8001dfa:	0039      	movs	r1, r7
 8001dfc:	3a20      	subs	r2, #32
 8001dfe:	40d1      	lsrs	r1, r2
 8001e00:	4662      	mov	r2, ip
 8001e02:	2a20      	cmp	r2, #32
 8001e04:	d006      	beq.n	8001e14 <__aeabi_dsub+0x4d4>
 8001e06:	4664      	mov	r4, ip
 8001e08:	2240      	movs	r2, #64	; 0x40
 8001e0a:	1b12      	subs	r2, r2, r4
 8001e0c:	003c      	movs	r4, r7
 8001e0e:	4094      	lsls	r4, r2
 8001e10:	4304      	orrs	r4, r0
 8001e12:	9401      	str	r4, [sp, #4]
 8001e14:	9c01      	ldr	r4, [sp, #4]
 8001e16:	1e62      	subs	r2, r4, #1
 8001e18:	4194      	sbcs	r4, r2
 8001e1a:	430c      	orrs	r4, r1
 8001e1c:	e5e3      	b.n	80019e6 <__aeabi_dsub+0xa6>
 8001e1e:	4649      	mov	r1, r9
 8001e20:	4319      	orrs	r1, r3
 8001e22:	000b      	movs	r3, r1
 8001e24:	1e5c      	subs	r4, r3, #1
 8001e26:	41a3      	sbcs	r3, r4
 8001e28:	1ac4      	subs	r4, r0, r3
 8001e2a:	42a0      	cmp	r0, r4
 8001e2c:	419b      	sbcs	r3, r3
 8001e2e:	425b      	negs	r3, r3
 8001e30:	1afb      	subs	r3, r7, r3
 8001e32:	469a      	mov	sl, r3
 8001e34:	465d      	mov	r5, fp
 8001e36:	0016      	movs	r6, r2
 8001e38:	e5dc      	b.n	80019f4 <__aeabi_dsub+0xb4>
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	4319      	orrs	r1, r3
 8001e3e:	d100      	bne.n	8001e42 <__aeabi_dsub+0x502>
 8001e40:	e0ae      	b.n	8001fa0 <__aeabi_dsub+0x660>
 8001e42:	4661      	mov	r1, ip
 8001e44:	4664      	mov	r4, ip
 8001e46:	3901      	subs	r1, #1
 8001e48:	2c01      	cmp	r4, #1
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x50e>
 8001e4c:	e0e0      	b.n	8002010 <__aeabi_dsub+0x6d0>
 8001e4e:	4c77      	ldr	r4, [pc, #476]	; (800202c <__aeabi_dsub+0x6ec>)
 8001e50:	45a4      	cmp	ip, r4
 8001e52:	d056      	beq.n	8001f02 <__aeabi_dsub+0x5c2>
 8001e54:	468c      	mov	ip, r1
 8001e56:	e69a      	b.n	8001b8e <__aeabi_dsub+0x24e>
 8001e58:	4661      	mov	r1, ip
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	003c      	movs	r4, r7
 8001e5e:	1a52      	subs	r2, r2, r1
 8001e60:	4094      	lsls	r4, r2
 8001e62:	0001      	movs	r1, r0
 8001e64:	4090      	lsls	r0, r2
 8001e66:	46a0      	mov	r8, r4
 8001e68:	4664      	mov	r4, ip
 8001e6a:	1e42      	subs	r2, r0, #1
 8001e6c:	4190      	sbcs	r0, r2
 8001e6e:	4662      	mov	r2, ip
 8001e70:	40e1      	lsrs	r1, r4
 8001e72:	4644      	mov	r4, r8
 8001e74:	40d7      	lsrs	r7, r2
 8001e76:	430c      	orrs	r4, r1
 8001e78:	4304      	orrs	r4, r0
 8001e7a:	44b9      	add	r9, r7
 8001e7c:	e701      	b.n	8001c82 <__aeabi_dsub+0x342>
 8001e7e:	496b      	ldr	r1, [pc, #428]	; (800202c <__aeabi_dsub+0x6ec>)
 8001e80:	428a      	cmp	r2, r1
 8001e82:	d100      	bne.n	8001e86 <__aeabi_dsub+0x546>
 8001e84:	e70c      	b.n	8001ca0 <__aeabi_dsub+0x360>
 8001e86:	1818      	adds	r0, r3, r0
 8001e88:	4298      	cmp	r0, r3
 8001e8a:	419b      	sbcs	r3, r3
 8001e8c:	444f      	add	r7, r9
 8001e8e:	425b      	negs	r3, r3
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	07dc      	lsls	r4, r3, #31
 8001e94:	0840      	lsrs	r0, r0, #1
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	469a      	mov	sl, r3
 8001e9a:	0016      	movs	r6, r2
 8001e9c:	4304      	orrs	r4, r0
 8001e9e:	e6d9      	b.n	8001c54 <__aeabi_dsub+0x314>
 8001ea0:	2a00      	cmp	r2, #0
 8001ea2:	d000      	beq.n	8001ea6 <__aeabi_dsub+0x566>
 8001ea4:	e081      	b.n	8001faa <__aeabi_dsub+0x66a>
 8001ea6:	003b      	movs	r3, r7
 8001ea8:	4303      	orrs	r3, r0
 8001eaa:	d11d      	bne.n	8001ee8 <__aeabi_dsub+0x5a8>
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	2500      	movs	r5, #0
 8001eb0:	0312      	lsls	r2, r2, #12
 8001eb2:	e70b      	b.n	8001ccc <__aeabi_dsub+0x38c>
 8001eb4:	08c0      	lsrs	r0, r0, #3
 8001eb6:	077b      	lsls	r3, r7, #29
 8001eb8:	465d      	mov	r5, fp
 8001eba:	4303      	orrs	r3, r0
 8001ebc:	08fa      	lsrs	r2, r7, #3
 8001ebe:	e6d3      	b.n	8001c68 <__aeabi_dsub+0x328>
 8001ec0:	1ac4      	subs	r4, r0, r3
 8001ec2:	42a0      	cmp	r0, r4
 8001ec4:	4180      	sbcs	r0, r0
 8001ec6:	464b      	mov	r3, r9
 8001ec8:	4240      	negs	r0, r0
 8001eca:	1aff      	subs	r7, r7, r3
 8001ecc:	1a3b      	subs	r3, r7, r0
 8001ece:	469a      	mov	sl, r3
 8001ed0:	465d      	mov	r5, fp
 8001ed2:	e597      	b.n	8001a04 <__aeabi_dsub+0xc4>
 8001ed4:	1a1c      	subs	r4, r3, r0
 8001ed6:	464a      	mov	r2, r9
 8001ed8:	42a3      	cmp	r3, r4
 8001eda:	419b      	sbcs	r3, r3
 8001edc:	1bd7      	subs	r7, r2, r7
 8001ede:	425b      	negs	r3, r3
 8001ee0:	1afb      	subs	r3, r7, r3
 8001ee2:	469a      	mov	sl, r3
 8001ee4:	2601      	movs	r6, #1
 8001ee6:	e585      	b.n	80019f4 <__aeabi_dsub+0xb4>
 8001ee8:	08c0      	lsrs	r0, r0, #3
 8001eea:	077b      	lsls	r3, r7, #29
 8001eec:	465d      	mov	r5, fp
 8001eee:	4303      	orrs	r3, r0
 8001ef0:	08fa      	lsrs	r2, r7, #3
 8001ef2:	e6e7      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001ef4:	464a      	mov	r2, r9
 8001ef6:	08db      	lsrs	r3, r3, #3
 8001ef8:	0752      	lsls	r2, r2, #29
 8001efa:	4313      	orrs	r3, r2
 8001efc:	464a      	mov	r2, r9
 8001efe:	08d2      	lsrs	r2, r2, #3
 8001f00:	e6b5      	b.n	8001c6e <__aeabi_dsub+0x32e>
 8001f02:	08c0      	lsrs	r0, r0, #3
 8001f04:	077b      	lsls	r3, r7, #29
 8001f06:	4303      	orrs	r3, r0
 8001f08:	08fa      	lsrs	r2, r7, #3
 8001f0a:	e6db      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	4319      	orrs	r1, r3
 8001f10:	000b      	movs	r3, r1
 8001f12:	1e59      	subs	r1, r3, #1
 8001f14:	418b      	sbcs	r3, r1
 8001f16:	001c      	movs	r4, r3
 8001f18:	e653      	b.n	8001bc2 <__aeabi_dsub+0x282>
 8001f1a:	464d      	mov	r5, r9
 8001f1c:	3c20      	subs	r4, #32
 8001f1e:	40e5      	lsrs	r5, r4
 8001f20:	2920      	cmp	r1, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x5f0>
 8001f24:	2440      	movs	r4, #64	; 0x40
 8001f26:	1a64      	subs	r4, r4, r1
 8001f28:	4649      	mov	r1, r9
 8001f2a:	40a1      	lsls	r1, r4
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	4698      	mov	r8, r3
 8001f30:	4643      	mov	r3, r8
 8001f32:	1e5c      	subs	r4, r3, #1
 8001f34:	41a3      	sbcs	r3, r4
 8001f36:	432b      	orrs	r3, r5
 8001f38:	e776      	b.n	8001e28 <__aeabi_dsub+0x4e8>
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	d0e1      	beq.n	8001f02 <__aeabi_dsub+0x5c2>
 8001f3e:	003a      	movs	r2, r7
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	4302      	orrs	r2, r0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x608>
 8001f46:	e6b8      	b.n	8001cba <__aeabi_dsub+0x37a>
 8001f48:	464a      	mov	r2, r9
 8001f4a:	0752      	lsls	r2, r2, #29
 8001f4c:	2480      	movs	r4, #128	; 0x80
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	464a      	mov	r2, r9
 8001f52:	0324      	lsls	r4, r4, #12
 8001f54:	08d2      	lsrs	r2, r2, #3
 8001f56:	4222      	tst	r2, r4
 8001f58:	d007      	beq.n	8001f6a <__aeabi_dsub+0x62a>
 8001f5a:	08fe      	lsrs	r6, r7, #3
 8001f5c:	4226      	tst	r6, r4
 8001f5e:	d104      	bne.n	8001f6a <__aeabi_dsub+0x62a>
 8001f60:	465d      	mov	r5, fp
 8001f62:	0032      	movs	r2, r6
 8001f64:	08c3      	lsrs	r3, r0, #3
 8001f66:	077f      	lsls	r7, r7, #29
 8001f68:	433b      	orrs	r3, r7
 8001f6a:	0f59      	lsrs	r1, r3, #29
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	0749      	lsls	r1, r1, #29
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	430b      	orrs	r3, r1
 8001f74:	e6a6      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001f76:	1ac4      	subs	r4, r0, r3
 8001f78:	42a0      	cmp	r0, r4
 8001f7a:	4180      	sbcs	r0, r0
 8001f7c:	464b      	mov	r3, r9
 8001f7e:	4240      	negs	r0, r0
 8001f80:	1aff      	subs	r7, r7, r3
 8001f82:	1a3b      	subs	r3, r7, r0
 8001f84:	469a      	mov	sl, r3
 8001f86:	465d      	mov	r5, fp
 8001f88:	2601      	movs	r6, #1
 8001f8a:	e533      	b.n	80019f4 <__aeabi_dsub+0xb4>
 8001f8c:	003b      	movs	r3, r7
 8001f8e:	4303      	orrs	r3, r0
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dsub+0x654>
 8001f92:	e715      	b.n	8001dc0 <__aeabi_dsub+0x480>
 8001f94:	08c0      	lsrs	r0, r0, #3
 8001f96:	077b      	lsls	r3, r7, #29
 8001f98:	465d      	mov	r5, fp
 8001f9a:	4303      	orrs	r3, r0
 8001f9c:	08fa      	lsrs	r2, r7, #3
 8001f9e:	e666      	b.n	8001c6e <__aeabi_dsub+0x32e>
 8001fa0:	08c0      	lsrs	r0, r0, #3
 8001fa2:	077b      	lsls	r3, r7, #29
 8001fa4:	4303      	orrs	r3, r0
 8001fa6:	08fa      	lsrs	r2, r7, #3
 8001fa8:	e65e      	b.n	8001c68 <__aeabi_dsub+0x328>
 8001faa:	003a      	movs	r2, r7
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	4302      	orrs	r2, r0
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dsub+0x674>
 8001fb2:	e682      	b.n	8001cba <__aeabi_dsub+0x37a>
 8001fb4:	464a      	mov	r2, r9
 8001fb6:	0752      	lsls	r2, r2, #29
 8001fb8:	2480      	movs	r4, #128	; 0x80
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	0324      	lsls	r4, r4, #12
 8001fc0:	08d2      	lsrs	r2, r2, #3
 8001fc2:	4222      	tst	r2, r4
 8001fc4:	d007      	beq.n	8001fd6 <__aeabi_dsub+0x696>
 8001fc6:	08fe      	lsrs	r6, r7, #3
 8001fc8:	4226      	tst	r6, r4
 8001fca:	d104      	bne.n	8001fd6 <__aeabi_dsub+0x696>
 8001fcc:	465d      	mov	r5, fp
 8001fce:	0032      	movs	r2, r6
 8001fd0:	08c3      	lsrs	r3, r0, #3
 8001fd2:	077f      	lsls	r7, r7, #29
 8001fd4:	433b      	orrs	r3, r7
 8001fd6:	0f59      	lsrs	r1, r3, #29
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	08db      	lsrs	r3, r3, #3
 8001fdc:	0749      	lsls	r1, r1, #29
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	e670      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001fe2:	08c0      	lsrs	r0, r0, #3
 8001fe4:	077b      	lsls	r3, r7, #29
 8001fe6:	4303      	orrs	r3, r0
 8001fe8:	08fa      	lsrs	r2, r7, #3
 8001fea:	e640      	b.n	8001c6e <__aeabi_dsub+0x32e>
 8001fec:	464c      	mov	r4, r9
 8001fee:	3920      	subs	r1, #32
 8001ff0:	40cc      	lsrs	r4, r1
 8001ff2:	4661      	mov	r1, ip
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d006      	beq.n	8002006 <__aeabi_dsub+0x6c6>
 8001ff8:	4666      	mov	r6, ip
 8001ffa:	2140      	movs	r1, #64	; 0x40
 8001ffc:	1b89      	subs	r1, r1, r6
 8001ffe:	464e      	mov	r6, r9
 8002000:	408e      	lsls	r6, r1
 8002002:	4333      	orrs	r3, r6
 8002004:	4698      	mov	r8, r3
 8002006:	4643      	mov	r3, r8
 8002008:	1e59      	subs	r1, r3, #1
 800200a:	418b      	sbcs	r3, r1
 800200c:	431c      	orrs	r4, r3
 800200e:	e5d8      	b.n	8001bc2 <__aeabi_dsub+0x282>
 8002010:	181c      	adds	r4, r3, r0
 8002012:	4284      	cmp	r4, r0
 8002014:	4180      	sbcs	r0, r0
 8002016:	444f      	add	r7, r9
 8002018:	46ba      	mov	sl, r7
 800201a:	4240      	negs	r0, r0
 800201c:	4482      	add	sl, r0
 800201e:	e6d9      	b.n	8001dd4 <__aeabi_dsub+0x494>
 8002020:	4653      	mov	r3, sl
 8002022:	4323      	orrs	r3, r4
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x6e8>
 8002026:	e6cb      	b.n	8001dc0 <__aeabi_dsub+0x480>
 8002028:	e614      	b.n	8001c54 <__aeabi_dsub+0x314>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	000007ff 	.word	0x000007ff
 8002030:	ff7fffff 	.word	0xff7fffff
 8002034:	000007fe 	.word	0x000007fe
 8002038:	2300      	movs	r3, #0
 800203a:	4a01      	ldr	r2, [pc, #4]	; (8002040 <__aeabi_dsub+0x700>)
 800203c:	001c      	movs	r4, r3
 800203e:	e529      	b.n	8001a94 <__aeabi_dsub+0x154>
 8002040:	000007ff 	.word	0x000007ff

08002044 <__aeabi_d2iz>:
 8002044:	000a      	movs	r2, r1
 8002046:	b530      	push	{r4, r5, lr}
 8002048:	4c13      	ldr	r4, [pc, #76]	; (8002098 <__aeabi_d2iz+0x54>)
 800204a:	0053      	lsls	r3, r2, #1
 800204c:	0309      	lsls	r1, r1, #12
 800204e:	0005      	movs	r5, r0
 8002050:	0b09      	lsrs	r1, r1, #12
 8002052:	2000      	movs	r0, #0
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	0fd2      	lsrs	r2, r2, #31
 8002058:	42a3      	cmp	r3, r4
 800205a:	dd04      	ble.n	8002066 <__aeabi_d2iz+0x22>
 800205c:	480f      	ldr	r0, [pc, #60]	; (800209c <__aeabi_d2iz+0x58>)
 800205e:	4283      	cmp	r3, r0
 8002060:	dd02      	ble.n	8002068 <__aeabi_d2iz+0x24>
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <__aeabi_d2iz+0x5c>)
 8002064:	18d0      	adds	r0, r2, r3
 8002066:	bd30      	pop	{r4, r5, pc}
 8002068:	2080      	movs	r0, #128	; 0x80
 800206a:	0340      	lsls	r0, r0, #13
 800206c:	4301      	orrs	r1, r0
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <__aeabi_d2iz+0x60>)
 8002070:	1ac0      	subs	r0, r0, r3
 8002072:	281f      	cmp	r0, #31
 8002074:	dd08      	ble.n	8002088 <__aeabi_d2iz+0x44>
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <__aeabi_d2iz+0x64>)
 8002078:	1ac3      	subs	r3, r0, r3
 800207a:	40d9      	lsrs	r1, r3
 800207c:	000b      	movs	r3, r1
 800207e:	4258      	negs	r0, r3
 8002080:	2a00      	cmp	r2, #0
 8002082:	d1f0      	bne.n	8002066 <__aeabi_d2iz+0x22>
 8002084:	0018      	movs	r0, r3
 8002086:	e7ee      	b.n	8002066 <__aeabi_d2iz+0x22>
 8002088:	4c08      	ldr	r4, [pc, #32]	; (80020ac <__aeabi_d2iz+0x68>)
 800208a:	40c5      	lsrs	r5, r0
 800208c:	46a4      	mov	ip, r4
 800208e:	4463      	add	r3, ip
 8002090:	4099      	lsls	r1, r3
 8002092:	000b      	movs	r3, r1
 8002094:	432b      	orrs	r3, r5
 8002096:	e7f2      	b.n	800207e <__aeabi_d2iz+0x3a>
 8002098:	000003fe 	.word	0x000003fe
 800209c:	0000041d 	.word	0x0000041d
 80020a0:	7fffffff 	.word	0x7fffffff
 80020a4:	00000433 	.word	0x00000433
 80020a8:	00000413 	.word	0x00000413
 80020ac:	fffffbed 	.word	0xfffffbed

080020b0 <__aeabi_i2d>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d016      	beq.n	80020e4 <__aeabi_i2d+0x34>
 80020b6:	17c3      	asrs	r3, r0, #31
 80020b8:	18c5      	adds	r5, r0, r3
 80020ba:	405d      	eors	r5, r3
 80020bc:	0fc4      	lsrs	r4, r0, #31
 80020be:	0028      	movs	r0, r5
 80020c0:	f000 f84c 	bl	800215c <__clzsi2>
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <__aeabi_i2d+0x5c>)
 80020c6:	1a1b      	subs	r3, r3, r0
 80020c8:	280a      	cmp	r0, #10
 80020ca:	dc16      	bgt.n	80020fa <__aeabi_i2d+0x4a>
 80020cc:	0002      	movs	r2, r0
 80020ce:	002e      	movs	r6, r5
 80020d0:	3215      	adds	r2, #21
 80020d2:	4096      	lsls	r6, r2
 80020d4:	220b      	movs	r2, #11
 80020d6:	1a12      	subs	r2, r2, r0
 80020d8:	40d5      	lsrs	r5, r2
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	032d      	lsls	r5, r5, #12
 80020de:	0b2d      	lsrs	r5, r5, #12
 80020e0:	0d5b      	lsrs	r3, r3, #21
 80020e2:	e003      	b.n	80020ec <__aeabi_i2d+0x3c>
 80020e4:	2400      	movs	r4, #0
 80020e6:	2300      	movs	r3, #0
 80020e8:	2500      	movs	r5, #0
 80020ea:	2600      	movs	r6, #0
 80020ec:	051b      	lsls	r3, r3, #20
 80020ee:	432b      	orrs	r3, r5
 80020f0:	07e4      	lsls	r4, r4, #31
 80020f2:	4323      	orrs	r3, r4
 80020f4:	0030      	movs	r0, r6
 80020f6:	0019      	movs	r1, r3
 80020f8:	bd70      	pop	{r4, r5, r6, pc}
 80020fa:	380b      	subs	r0, #11
 80020fc:	4085      	lsls	r5, r0
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	032d      	lsls	r5, r5, #12
 8002102:	2600      	movs	r6, #0
 8002104:	0b2d      	lsrs	r5, r5, #12
 8002106:	0d5b      	lsrs	r3, r3, #21
 8002108:	e7f0      	b.n	80020ec <__aeabi_i2d+0x3c>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	0000041e 	.word	0x0000041e

08002110 <__aeabi_ui2d>:
 8002110:	b510      	push	{r4, lr}
 8002112:	1e04      	subs	r4, r0, #0
 8002114:	d010      	beq.n	8002138 <__aeabi_ui2d+0x28>
 8002116:	f000 f821 	bl	800215c <__clzsi2>
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <__aeabi_ui2d+0x48>)
 800211c:	1a1b      	subs	r3, r3, r0
 800211e:	280a      	cmp	r0, #10
 8002120:	dc11      	bgt.n	8002146 <__aeabi_ui2d+0x36>
 8002122:	220b      	movs	r2, #11
 8002124:	0021      	movs	r1, r4
 8002126:	1a12      	subs	r2, r2, r0
 8002128:	40d1      	lsrs	r1, r2
 800212a:	3015      	adds	r0, #21
 800212c:	030a      	lsls	r2, r1, #12
 800212e:	055b      	lsls	r3, r3, #21
 8002130:	4084      	lsls	r4, r0
 8002132:	0b12      	lsrs	r2, r2, #12
 8002134:	0d5b      	lsrs	r3, r3, #21
 8002136:	e001      	b.n	800213c <__aeabi_ui2d+0x2c>
 8002138:	2300      	movs	r3, #0
 800213a:	2200      	movs	r2, #0
 800213c:	051b      	lsls	r3, r3, #20
 800213e:	4313      	orrs	r3, r2
 8002140:	0020      	movs	r0, r4
 8002142:	0019      	movs	r1, r3
 8002144:	bd10      	pop	{r4, pc}
 8002146:	0022      	movs	r2, r4
 8002148:	380b      	subs	r0, #11
 800214a:	4082      	lsls	r2, r0
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	0312      	lsls	r2, r2, #12
 8002150:	2400      	movs	r4, #0
 8002152:	0b12      	lsrs	r2, r2, #12
 8002154:	0d5b      	lsrs	r3, r3, #21
 8002156:	e7f1      	b.n	800213c <__aeabi_ui2d+0x2c>
 8002158:	0000041e 	.word	0x0000041e

0800215c <__clzsi2>:
 800215c:	211c      	movs	r1, #28
 800215e:	2301      	movs	r3, #1
 8002160:	041b      	lsls	r3, r3, #16
 8002162:	4298      	cmp	r0, r3
 8002164:	d301      	bcc.n	800216a <__clzsi2+0xe>
 8002166:	0c00      	lsrs	r0, r0, #16
 8002168:	3910      	subs	r1, #16
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	4298      	cmp	r0, r3
 800216e:	d301      	bcc.n	8002174 <__clzsi2+0x18>
 8002170:	0a00      	lsrs	r0, r0, #8
 8002172:	3908      	subs	r1, #8
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	4298      	cmp	r0, r3
 8002178:	d301      	bcc.n	800217e <__clzsi2+0x22>
 800217a:	0900      	lsrs	r0, r0, #4
 800217c:	3904      	subs	r1, #4
 800217e:	a202      	add	r2, pc, #8	; (adr r2, 8002188 <__clzsi2+0x2c>)
 8002180:	5c10      	ldrb	r0, [r2, r0]
 8002182:	1840      	adds	r0, r0, r1
 8002184:	4770      	bx	lr
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	02020304 	.word	0x02020304
 800218c:	01010101 	.word	0x01010101
	...

08002198 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002198:	2800      	cmp	r0, #0
 800219a:	d00a      	beq.n	80021b2 <null_ptr_check+0x1a>
 800219c:	6843      	ldr	r3, [r0, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <null_ptr_check+0x1a>
 80021a2:	6883      	ldr	r3, [r0, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <null_ptr_check+0x1a>
 80021a8:	68c0      	ldr	r0, [r0, #12]
 80021aa:	4243      	negs	r3, r0
 80021ac:	4158      	adcs	r0, r3
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80021ae:	4240      	negs	r0, r0
        /* Device structure is fine */
        rslt = BME280_OK;
    }

    return rslt;
}
 80021b0:	4770      	bx	lr
        rslt = BME280_E_NULL_PTR;
 80021b2:	2001      	movs	r0, #1
 80021b4:	e7fb      	b.n	80021ae <null_ptr_check+0x16>

080021b6 <bme280_get_regs>:
{
 80021b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b8:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 80021ba:	0018      	movs	r0, r3
{
 80021bc:	000e      	movs	r6, r1
 80021be:	0017      	movs	r7, r2
 80021c0:	001c      	movs	r4, r3
    rslt = null_ptr_check(dev);
 80021c2:	f7ff ffe9 	bl	8002198 <null_ptr_check>
    if (rslt == BME280_OK)
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d10e      	bne.n	80021e8 <bme280_get_regs+0x32>
        if (dev->intf != BME280_I2C_INTF)
 80021ca:	78a3      	ldrb	r3, [r4, #2]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d001      	beq.n	80021d4 <bme280_get_regs+0x1e>
            reg_addr = reg_addr | 0x80;
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	431d      	orrs	r5, r3
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80021d4:	7860      	ldrb	r0, [r4, #1]
 80021d6:	003b      	movs	r3, r7
 80021d8:	0032      	movs	r2, r6
 80021da:	0029      	movs	r1, r5
 80021dc:	6864      	ldr	r4, [r4, #4]
 80021de:	47a0      	blx	r4
        if (rslt != BME280_OK)
 80021e0:	2800      	cmp	r0, #0
 80021e2:	d001      	beq.n	80021e8 <bme280_get_regs+0x32>
            rslt = BME280_E_COMM_FAIL;
 80021e4:	2004      	movs	r0, #4
 80021e6:	4240      	negs	r0, r0
}
 80021e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021ea <bme280_set_regs>:
{
 80021ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ec:	001d      	movs	r5, r3
 80021ee:	0004      	movs	r4, r0
 80021f0:	000f      	movs	r7, r1
 80021f2:	0016      	movs	r6, r2
 80021f4:	b089      	sub	sp, #36	; 0x24
 80021f6:	1c13      	adds	r3, r2, #0
 80021f8:	2a0a      	cmp	r2, #10
 80021fa:	d900      	bls.n	80021fe <bme280_set_regs+0x14>
 80021fc:	230a      	movs	r3, #10
 80021fe:	b2db      	uxtb	r3, r3
    rslt = null_ptr_check(dev);
 8002200:	0028      	movs	r0, r5
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f7ff ffc8 	bl	8002198 <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8002208:	2800      	cmp	r0, #0
 800220a:	d137      	bne.n	800227c <bme280_set_regs+0x92>
 800220c:	2c00      	cmp	r4, #0
 800220e:	d035      	beq.n	800227c <bme280_set_regs+0x92>
 8002210:	2f00      	cmp	r7, #0
 8002212:	d033      	beq.n	800227c <bme280_set_regs+0x92>
        if (len != 0)
 8002214:	2e00      	cmp	r6, #0
 8002216:	d033      	beq.n	8002280 <bme280_set_regs+0x96>
            temp_buff[0] = reg_data[0];
 8002218:	783b      	ldrb	r3, [r7, #0]
 800221a:	aa03      	add	r2, sp, #12
 800221c:	7013      	strb	r3, [r2, #0]
            if (dev->intf != BME280_I2C_INTF)
 800221e:	78ab      	ldrb	r3, [r5, #2]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d008      	beq.n	8002236 <bme280_set_regs+0x4c>
 8002224:	9900      	ldr	r1, [sp, #0]
 8002226:	0023      	movs	r3, r4
 8002228:	1909      	adds	r1, r1, r4
 800222a:	9101      	str	r1, [sp, #4]
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800222c:	217f      	movs	r1, #127	; 0x7f
 800222e:	468c      	mov	ip, r1
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002230:	9901      	ldr	r1, [sp, #4]
 8002232:	428b      	cmp	r3, r1
 8002234:	d116      	bne.n	8002264 <bme280_set_regs+0x7a>
                temp_len = len;
 8002236:	2301      	movs	r3, #1
            if (len > 1)
 8002238:	429e      	cmp	r6, r3
 800223a:	d009      	beq.n	8002250 <bme280_set_regs+0x66>
 800223c:	0011      	movs	r1, r2
 800223e:	2300      	movs	r3, #0
    for (index = 1; index < len; index++)
 8002240:	3301      	adds	r3, #1
 8002242:	9e00      	ldr	r6, [sp, #0]
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	4286      	cmp	r6, r0
 8002248:	d812      	bhi.n	8002270 <bme280_set_regs+0x86>
                temp_len = ((len * 2) - 1);
 800224a:	0073      	lsls	r3, r6, #1
 800224c:	3b01      	subs	r3, #1
 800224e:	b29b      	uxth	r3, r3
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8002250:	7821      	ldrb	r1, [r4, #0]
 8002252:	7868      	ldrb	r0, [r5, #1]
 8002254:	68ac      	ldr	r4, [r5, #8]
 8002256:	47a0      	blx	r4
            if (rslt != BME280_OK)
 8002258:	2800      	cmp	r0, #0
 800225a:	d001      	beq.n	8002260 <bme280_set_regs+0x76>
                rslt = BME280_E_COMM_FAIL;
 800225c:	2004      	movs	r0, #4
            rslt = BME280_E_INVALID_LEN;
 800225e:	4240      	negs	r0, r0
}
 8002260:	b009      	add	sp, #36	; 0x24
 8002262:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8002264:	4660      	mov	r0, ip
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	4001      	ands	r1, r0
 800226a:	7019      	strb	r1, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800226c:	3301      	adds	r3, #1
 800226e:	e7df      	b.n	8002230 <bme280_set_regs+0x46>
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8002270:	5ce0      	ldrb	r0, [r4, r3]
 8002272:	7048      	strb	r0, [r1, #1]
        temp_buff[index * 2] = reg_data[index];
 8002274:	5cf8      	ldrb	r0, [r7, r3]
 8002276:	3102      	adds	r1, #2
 8002278:	7008      	strb	r0, [r1, #0]
    for (index = 1; index < len; index++)
 800227a:	e7e1      	b.n	8002240 <bme280_set_regs+0x56>
        rslt = BME280_E_NULL_PTR;
 800227c:	2001      	movs	r0, #1
 800227e:	e7ee      	b.n	800225e <bme280_set_regs+0x74>
            rslt = BME280_E_INVALID_LEN;
 8002280:	2003      	movs	r0, #3
 8002282:	e7ec      	b.n	800225e <bme280_set_regs+0x74>

08002284 <set_filter_standby_settings>:
{
 8002284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002286:	0005      	movs	r5, r0
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8002288:	20f5      	movs	r0, #245	; 0xf5
{
 800228a:	b085      	sub	sp, #20
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800228c:	ab02      	add	r3, sp, #8
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800228e:	1ddc      	adds	r4, r3, #7
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8002290:	1d9f      	adds	r7, r3, #6
{
 8002292:	0016      	movs	r6, r2
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8002294:	0013      	movs	r3, r2
{
 8002296:	9101      	str	r1, [sp, #4]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8002298:	2201      	movs	r2, #1
 800229a:	0021      	movs	r1, r4
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800229c:	7038      	strb	r0, [r7, #0]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800229e:	f7ff ff8a 	bl	80021b6 <bme280_get_regs>
    if (rslt == BME280_OK)
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d11a      	bne.n	80022dc <set_filter_standby_settings+0x58>
        if (desired_settings & BME280_FILTER_SEL)
 80022a6:	072b      	lsls	r3, r5, #28
 80022a8:	d508      	bpl.n	80022bc <set_filter_standby_settings+0x38>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80022aa:	211c      	movs	r1, #28
 80022ac:	9b01      	ldr	r3, [sp, #4]
 80022ae:	7822      	ldrb	r2, [r4, #0]
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	438a      	bics	r2, r1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	400b      	ands	r3, r1
 80022b8:	4313      	orrs	r3, r2
 80022ba:	7023      	strb	r3, [r4, #0]
        if (desired_settings & BME280_STANDBY_SEL)
 80022bc:	06ed      	lsls	r5, r5, #27
 80022be:	d507      	bpl.n	80022d0 <set_filter_standby_settings+0x4c>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80022c0:	221f      	movs	r2, #31
 80022c2:	7823      	ldrb	r3, [r4, #0]
 80022c4:	4013      	ands	r3, r2
 80022c6:	9a01      	ldr	r2, [sp, #4]
 80022c8:	7912      	ldrb	r2, [r2, #4]
 80022ca:	0152      	lsls	r2, r2, #5
 80022cc:	4313      	orrs	r3, r2
 80022ce:	7023      	strb	r3, [r4, #0]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80022d0:	0033      	movs	r3, r6
 80022d2:	2201      	movs	r2, #1
 80022d4:	0021      	movs	r1, r4
 80022d6:	0038      	movs	r0, r7
 80022d8:	f7ff ff87 	bl	80021ea <bme280_set_regs>
}
 80022dc:	b005      	add	sp, #20
 80022de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022e0 <set_osr_settings>:
{
 80022e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022e2:	0005      	movs	r5, r0
 80022e4:	000f      	movs	r7, r1
 80022e6:	0014      	movs	r4, r2
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80022e8:	2001      	movs	r0, #1
    if (desired_settings & BME280_OSR_HUM_SEL)
 80022ea:	076b      	lsls	r3, r5, #29
 80022ec:	d522      	bpl.n	8002334 <set_osr_settings+0x54>
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80022ee:	22f2      	movs	r2, #242	; 0xf2
 80022f0:	788b      	ldrb	r3, [r1, #2]
 80022f2:	4669      	mov	r1, sp
 80022f4:	71ca      	strb	r2, [r1, #7]
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80022f6:	2207      	movs	r2, #7
 80022f8:	4013      	ands	r3, r2
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80022fa:	0002      	movs	r2, r0
 80022fc:	4668      	mov	r0, sp
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80022fe:	3105      	adds	r1, #5
 8002300:	700b      	strb	r3, [r1, #0]
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8002302:	3007      	adds	r0, #7
 8002304:	0023      	movs	r3, r4
 8002306:	f7ff ff70 	bl	80021ea <bme280_set_regs>
    if (rslt == BME280_OK)
 800230a:	2800      	cmp	r0, #0
 800230c:	d112      	bne.n	8002334 <set_osr_settings+0x54>
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800230e:	466b      	mov	r3, sp
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8002310:	4669      	mov	r1, sp
        reg_addr = BME280_CTRL_MEAS_ADDR;
 8002312:	30f4      	adds	r0, #244	; 0xf4
 8002314:	71d8      	strb	r0, [r3, #7]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8002316:	2201      	movs	r2, #1
 8002318:	0023      	movs	r3, r4
 800231a:	3106      	adds	r1, #6
 800231c:	f7ff ff4b 	bl	80021b6 <bme280_get_regs>
        if (rslt == BME280_OK)
 8002320:	2800      	cmp	r0, #0
 8002322:	d107      	bne.n	8002334 <set_osr_settings+0x54>
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8002324:	4669      	mov	r1, sp
 8002326:	4668      	mov	r0, sp
 8002328:	0023      	movs	r3, r4
 800232a:	2201      	movs	r2, #1
 800232c:	3106      	adds	r1, #6
 800232e:	3007      	adds	r0, #7
 8002330:	f7ff ff5b 	bl	80021ea <bme280_set_regs>
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8002334:	07ab      	lsls	r3, r5, #30
 8002336:	d024      	beq.n	8002382 <set_osr_settings+0xa2>
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8002338:	466b      	mov	r3, sp
 800233a:	20f4      	movs	r0, #244	; 0xf4
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800233c:	1dde      	adds	r6, r3, #7
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800233e:	7198      	strb	r0, [r3, #6]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8002340:	2201      	movs	r2, #1
 8002342:	0023      	movs	r3, r4
 8002344:	0031      	movs	r1, r6
 8002346:	f7ff ff36 	bl	80021b6 <bme280_get_regs>
    if (rslt == BME280_OK)
 800234a:	2800      	cmp	r0, #0
 800234c:	d119      	bne.n	8002382 <set_osr_settings+0xa2>
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800234e:	07eb      	lsls	r3, r5, #31
 8002350:	d507      	bpl.n	8002362 <set_osr_settings+0x82>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8002352:	211c      	movs	r1, #28
 8002354:	783b      	ldrb	r3, [r7, #0]
 8002356:	7832      	ldrb	r2, [r6, #0]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	400b      	ands	r3, r1
 800235c:	438a      	bics	r2, r1
 800235e:	4313      	orrs	r3, r2
 8002360:	7033      	strb	r3, [r6, #0]
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8002362:	07ad      	lsls	r5, r5, #30
 8002364:	d506      	bpl.n	8002374 <set_osr_settings+0x94>
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8002366:	221f      	movs	r2, #31
 8002368:	7833      	ldrb	r3, [r6, #0]
 800236a:	4013      	ands	r3, r2
 800236c:	787a      	ldrb	r2, [r7, #1]
 800236e:	0152      	lsls	r2, r2, #5
 8002370:	4313      	orrs	r3, r2
 8002372:	7033      	strb	r3, [r6, #0]
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8002374:	4668      	mov	r0, sp
 8002376:	0023      	movs	r3, r4
 8002378:	2201      	movs	r2, #1
 800237a:	0031      	movs	r1, r6
 800237c:	3006      	adds	r0, #6
 800237e:	f7ff ff34 	bl	80021ea <bme280_set_regs>
}
 8002382:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002384 <bme280_get_sensor_mode>:
{
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
 8002388:	0008      	movs	r0, r1
{
 800238a:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 800238c:	f7ff ff04 	bl	8002198 <null_ptr_check>
    if (rslt == BME280_OK)
 8002390:	2800      	cmp	r0, #0
 8002392:	d109      	bne.n	80023a8 <bme280_get_sensor_mode+0x24>
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8002394:	002b      	movs	r3, r5
 8002396:	2201      	movs	r2, #1
 8002398:	0021      	movs	r1, r4
 800239a:	30f4      	adds	r0, #244	; 0xf4
 800239c:	f7ff ff0b 	bl	80021b6 <bme280_get_regs>
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80023a0:	2203      	movs	r2, #3
 80023a2:	7823      	ldrb	r3, [r4, #0]
 80023a4:	4013      	ands	r3, r2
 80023a6:	7023      	strb	r3, [r4, #0]
}
 80023a8:	bd70      	pop	{r4, r5, r6, pc}

080023aa <bme280_soft_reset>:
{
 80023aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t reg_addr = BME280_RESET_ADDR;
 80023ac:	466b      	mov	r3, sp
 80023ae:	1d5e      	adds	r6, r3, #5
 80023b0:	23e0      	movs	r3, #224	; 0xe0
 80023b2:	7033      	strb	r3, [r6, #0]
    uint8_t status_reg = 0;
 80023b4:	466b      	mov	r3, sp
 80023b6:	1d9d      	adds	r5, r3, #6
 80023b8:	2300      	movs	r3, #0
 80023ba:	702b      	strb	r3, [r5, #0]
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80023bc:	466b      	mov	r3, sp
 80023be:	1ddf      	adds	r7, r3, #7
 80023c0:	23b6      	movs	r3, #182	; 0xb6
{
 80023c2:	0004      	movs	r4, r0
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80023c4:	703b      	strb	r3, [r7, #0]
    rslt = null_ptr_check(dev);
 80023c6:	f7ff fee7 	bl	8002198 <null_ptr_check>
    if (rslt == BME280_OK)
 80023ca:	2800      	cmp	r0, #0
 80023cc:	d121      	bne.n	8002412 <bme280_soft_reset+0x68>
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80023ce:	0023      	movs	r3, r4
 80023d0:	2201      	movs	r2, #1
 80023d2:	0039      	movs	r1, r7
 80023d4:	0030      	movs	r0, r6
 80023d6:	f7ff ff08 	bl	80021ea <bme280_set_regs>
        if (rslt == BME280_OK)
 80023da:	2800      	cmp	r0, #0
 80023dc:	d119      	bne.n	8002412 <bme280_soft_reset+0x68>
 80023de:	2606      	movs	r6, #6
                dev->delay_ms(2);
 80023e0:	2002      	movs	r0, #2
 80023e2:	68e3      	ldr	r3, [r4, #12]
 80023e4:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80023e6:	0023      	movs	r3, r4
 80023e8:	2201      	movs	r2, #1
 80023ea:	0029      	movs	r1, r5
 80023ec:	20f3      	movs	r0, #243	; 0xf3
 80023ee:	f7ff fee2 	bl	80021b6 <bme280_get_regs>
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d108      	bne.n	8002408 <bme280_soft_reset+0x5e>
 80023f6:	2201      	movs	r2, #1
 80023f8:	782b      	ldrb	r3, [r5, #0]
 80023fa:	3e01      	subs	r6, #1
 80023fc:	b2f6      	uxtb	r6, r6
 80023fe:	4013      	ands	r3, r2
 8002400:	2e00      	cmp	r6, #0
 8002402:	d001      	beq.n	8002408 <bme280_soft_reset+0x5e>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1eb      	bne.n	80023e0 <bme280_soft_reset+0x36>
            if (status_reg & BME280_STATUS_IM_UPDATE)
 8002408:	782b      	ldrb	r3, [r5, #0]
 800240a:	07db      	lsls	r3, r3, #31
 800240c:	d501      	bpl.n	8002412 <bme280_soft_reset+0x68>
                rslt = BME280_E_NVM_COPY_FAILED;
 800240e:	2006      	movs	r0, #6
 8002410:	4240      	negs	r0, r0
}
 8002412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002414 <bme280_init>:
{
 8002414:	b530      	push	{r4, r5, lr}
 8002416:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	466a      	mov	r2, sp
{
 800241c:	0004      	movs	r4, r0
    uint8_t chip_id = 0;
 800241e:	70d3      	strb	r3, [r2, #3]
    rslt = null_ptr_check(dev);
 8002420:	f7ff feba 	bl	8002198 <null_ptr_check>
    if (rslt == BME280_OK)
 8002424:	2800      	cmp	r0, #0
 8002426:	d151      	bne.n	80024cc <bme280_init+0xb8>
 8002428:	2505      	movs	r5, #5
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800242a:	4669      	mov	r1, sp
 800242c:	0023      	movs	r3, r4
 800242e:	2201      	movs	r2, #1
 8002430:	20d0      	movs	r0, #208	; 0xd0
 8002432:	3103      	adds	r1, #3
 8002434:	f7ff febf 	bl	80021b6 <bme280_get_regs>
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8002438:	2800      	cmp	r0, #0
 800243a:	d149      	bne.n	80024d0 <bme280_init+0xbc>
 800243c:	466b      	mov	r3, sp
 800243e:	78db      	ldrb	r3, [r3, #3]
 8002440:	2b60      	cmp	r3, #96	; 0x60
 8002442:	d145      	bne.n	80024d0 <bme280_init+0xbc>
                rslt = bme280_soft_reset(dev);
 8002444:	0020      	movs	r0, r4
                dev->chip_id = chip_id;
 8002446:	7023      	strb	r3, [r4, #0]
                rslt = bme280_soft_reset(dev);
 8002448:	f7ff ffaf 	bl	80023aa <bme280_soft_reset>
                if (rslt == BME280_OK)
 800244c:	2800      	cmp	r0, #0
 800244e:	d13d      	bne.n	80024cc <bme280_init+0xb8>
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8002450:	0001      	movs	r1, r0
 8002452:	2216      	movs	r2, #22
 8002454:	9001      	str	r0, [sp, #4]
 8002456:	ad01      	add	r5, sp, #4
 8002458:	a802      	add	r0, sp, #8
 800245a:	f002 ff0f 	bl	800527c <memset>
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800245e:	0023      	movs	r3, r4
 8002460:	221a      	movs	r2, #26
 8002462:	0029      	movs	r1, r5
 8002464:	2088      	movs	r0, #136	; 0x88
 8002466:	f7ff fea6 	bl	80021b6 <bme280_get_regs>
    if (rslt == BME280_OK)
 800246a:	2800      	cmp	r0, #0
 800246c:	d12e      	bne.n	80024cc <bme280_init+0xb8>
    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800246e:	9b01      	ldr	r3, [sp, #4]
    calib_data->dig_h1 = reg_data[25];
 8002470:	7e6a      	ldrb	r2, [r5, #25]
    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002472:	6123      	str	r3, [r4, #16]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002474:	9b02      	ldr	r3, [sp, #8]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002476:	0029      	movs	r1, r5
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002478:	6163      	str	r3, [r4, #20]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800247a:	9b03      	ldr	r3, [sp, #12]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800247c:	30e1      	adds	r0, #225	; 0xe1
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800247e:	61a3      	str	r3, [r4, #24]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002480:	9b04      	ldr	r3, [sp, #16]
 8002482:	61e3      	str	r3, [r4, #28]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002484:	9b05      	ldr	r3, [sp, #20]
 8002486:	6223      	str	r3, [r4, #32]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002488:	9b06      	ldr	r3, [sp, #24]
 800248a:	6263      	str	r3, [r4, #36]	; 0x24
    calib_data->dig_h1 = reg_data[25];
 800248c:	0023      	movs	r3, r4
 800248e:	3328      	adds	r3, #40	; 0x28
 8002490:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002492:	0023      	movs	r3, r4
 8002494:	2207      	movs	r2, #7
 8002496:	f7ff fe8e 	bl	80021b6 <bme280_get_regs>
        if (rslt == BME280_OK)
 800249a:	2800      	cmp	r0, #0
 800249c:	d116      	bne.n	80024cc <bme280_init+0xb8>
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800249e:	882b      	ldrh	r3, [r5, #0]
    calib_data->dig_h3 = reg_data[2];
 80024a0:	78aa      	ldrb	r2, [r5, #2]
    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80024a2:	8563      	strh	r3, [r4, #42]	; 0x2a
    calib_data->dig_h3 = reg_data[2];
 80024a4:	0023      	movs	r3, r4
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024a6:	2103      	movs	r1, #3
    calib_data->dig_h3 = reg_data[2];
 80024a8:	332c      	adds	r3, #44	; 0x2c
 80024aa:	701a      	strb	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024ac:	220f      	movs	r2, #15
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024ae:	5669      	ldrsb	r1, [r5, r1]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024b0:	792b      	ldrb	r3, [r5, #4]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024b2:	0109      	lsls	r1, r1, #4
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024b4:	401a      	ands	r2, r3
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 80024b6:	430a      	orrs	r2, r1
 80024b8:	85e2      	strh	r2, [r4, #46]	; 0x2e
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80024ba:	2205      	movs	r2, #5
 80024bc:	56aa      	ldrsb	r2, [r5, r2]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 80024be:	091b      	lsrs	r3, r3, #4
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80024c0:	0112      	lsls	r2, r2, #4
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80024c2:	4313      	orrs	r3, r2
 80024c4:	8623      	strh	r3, [r4, #48]	; 0x30
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80024c6:	79ab      	ldrb	r3, [r5, #6]
 80024c8:	3432      	adds	r4, #50	; 0x32
 80024ca:	7023      	strb	r3, [r4, #0]
}
 80024cc:	b009      	add	sp, #36	; 0x24
 80024ce:	bd30      	pop	{r4, r5, pc}
        while (try_count)
 80024d0:	3d01      	subs	r5, #1
            dev->delay_ms(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	68e3      	ldr	r3, [r4, #12]
        while (try_count)
 80024d6:	b2ed      	uxtb	r5, r5
            dev->delay_ms(1);
 80024d8:	4798      	blx	r3
        while (try_count)
 80024da:	2d00      	cmp	r5, #0
 80024dc:	d1a5      	bne.n	800242a <bme280_init+0x16>
            rslt = BME280_E_DEV_NOT_FOUND;
 80024de:	2002      	movs	r0, #2
 80024e0:	4240      	negs	r0, r0
 80024e2:	e7f3      	b.n	80024cc <bme280_init+0xb8>

080024e4 <put_device_to_sleep>:
{
 80024e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80024e6:	ae01      	add	r6, sp, #4
{
 80024e8:	0005      	movs	r5, r0
    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80024ea:	0003      	movs	r3, r0
 80024ec:	2204      	movs	r2, #4
 80024ee:	0031      	movs	r1, r6
 80024f0:	20f2      	movs	r0, #242	; 0xf2
 80024f2:	f7ff fe60 	bl	80021b6 <bme280_get_regs>
    if (rslt == BME280_OK)
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d121      	bne.n	800253e <put_device_to_sleep+0x5a>
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80024fa:	2107      	movs	r1, #7
 80024fc:	7833      	ldrb	r3, [r6, #0]
 80024fe:	ac02      	add	r4, sp, #8
 8002500:	400b      	ands	r3, r1
 8002502:	70a3      	strb	r3, [r4, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002504:	78b3      	ldrb	r3, [r6, #2]
        rslt = bme280_soft_reset(dev);
 8002506:	0028      	movs	r0, r5
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002508:	109a      	asrs	r2, r3, #2
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	7063      	strb	r3, [r4, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800250e:	78f3      	ldrb	r3, [r6, #3]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002510:	400a      	ands	r2, r1
 8002512:	7022      	strb	r2, [r4, #0]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8002514:	109a      	asrs	r2, r3, #2
 8002516:	400a      	ands	r2, r1
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8002518:	095b      	lsrs	r3, r3, #5
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800251a:	70e2      	strb	r2, [r4, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800251c:	7123      	strb	r3, [r4, #4]
        rslt = bme280_soft_reset(dev);
 800251e:	f7ff ff44 	bl	80023aa <bme280_soft_reset>
        if (rslt == BME280_OK)
 8002522:	2800      	cmp	r0, #0
 8002524:	d10b      	bne.n	800253e <put_device_to_sleep+0x5a>
    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002526:	002a      	movs	r2, r5
 8002528:	0021      	movs	r1, r4
 800252a:	301f      	adds	r0, #31
 800252c:	f7ff fed8 	bl	80022e0 <set_osr_settings>
    if (rslt == BME280_OK)
 8002530:	2800      	cmp	r0, #0
 8002532:	d104      	bne.n	800253e <put_device_to_sleep+0x5a>
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8002534:	002a      	movs	r2, r5
 8002536:	0021      	movs	r1, r4
 8002538:	301f      	adds	r0, #31
 800253a:	f7ff fea3 	bl	8002284 <set_filter_standby_settings>
}
 800253e:	b004      	add	sp, #16
 8002540:	bd70      	pop	{r4, r5, r6, pc}

08002542 <bme280_set_sensor_settings>:
{
 8002542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002544:	0006      	movs	r6, r0
    rslt = null_ptr_check(dev);
 8002546:	0008      	movs	r0, r1
{
 8002548:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 800254a:	f7ff fe25 	bl	8002198 <null_ptr_check>
 800254e:	1e04      	subs	r4, r0, #0
    if (rslt == BME280_OK)
 8002550:	d10f      	bne.n	8002572 <bme280_set_sensor_settings+0x30>
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8002552:	466b      	mov	r3, sp
 8002554:	1ddf      	adds	r7, r3, #7
 8002556:	0029      	movs	r1, r5
 8002558:	0038      	movs	r0, r7
 800255a:	f7ff ff13 	bl	8002384 <bme280_get_sensor_mode>
 800255e:	1e04      	subs	r4, r0, #0
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8002560:	d107      	bne.n	8002572 <bme280_set_sensor_settings+0x30>
 8002562:	783b      	ldrb	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <bme280_set_sensor_settings+0x34>
    if (sub_settings & desired_settings)
 8002568:	0773      	lsls	r3, r6, #29
 800256a:	d10b      	bne.n	8002584 <bme280_set_sensor_settings+0x42>
 800256c:	2318      	movs	r3, #24
 800256e:	421e      	tst	r6, r3
 8002570:	d111      	bne.n	8002596 <bme280_set_sensor_settings+0x54>
}
 8002572:	0020      	movs	r0, r4
 8002574:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            rslt = put_device_to_sleep(dev);
 8002576:	0028      	movs	r0, r5
 8002578:	f7ff ffb4 	bl	80024e4 <put_device_to_sleep>
        if (rslt == BME280_OK)
 800257c:	2800      	cmp	r0, #0
 800257e:	d0f3      	beq.n	8002568 <bme280_set_sensor_settings+0x26>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002580:	0004      	movs	r4, r0
 8002582:	e7f6      	b.n	8002572 <bme280_set_sensor_settings+0x30>
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8002584:	0029      	movs	r1, r5
 8002586:	002a      	movs	r2, r5
 8002588:	0030      	movs	r0, r6
 800258a:	3138      	adds	r1, #56	; 0x38
 800258c:	f7ff fea8 	bl	80022e0 <set_osr_settings>
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8002590:	2800      	cmp	r0, #0
 8002592:	d1f5      	bne.n	8002580 <bme280_set_sensor_settings+0x3e>
 8002594:	e7ea      	b.n	800256c <bme280_set_sensor_settings+0x2a>
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002596:	0029      	movs	r1, r5
 8002598:	002a      	movs	r2, r5
 800259a:	0030      	movs	r0, r6
 800259c:	3138      	adds	r1, #56	; 0x38
 800259e:	f7ff fe71 	bl	8002284 <set_filter_standby_settings>
 80025a2:	e7ed      	b.n	8002580 <bme280_set_sensor_settings+0x3e>

080025a4 <bme280_set_sensor_mode>:
{
 80025a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025a6:	0005      	movs	r5, r0
    rslt = null_ptr_check(dev);
 80025a8:	0008      	movs	r0, r1
{
 80025aa:	000c      	movs	r4, r1
    rslt = null_ptr_check(dev);
 80025ac:	f7ff fdf4 	bl	8002198 <null_ptr_check>
    if (rslt == BME280_OK)
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d12b      	bne.n	800260c <bme280_set_sensor_mode+0x68>
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80025b4:	466b      	mov	r3, sp
 80025b6:	1d5e      	adds	r6, r3, #5
 80025b8:	0021      	movs	r1, r4
 80025ba:	0030      	movs	r0, r6
 80025bc:	f7ff fee2 	bl	8002384 <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d123      	bne.n	800260c <bme280_set_sensor_mode+0x68>
 80025c4:	7833      	ldrb	r3, [r6, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d11b      	bne.n	8002602 <bme280_set_sensor_mode+0x5e>
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80025ca:	466b      	mov	r3, sp
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80025cc:	4669      	mov	r1, sp
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80025ce:	20f4      	movs	r0, #244	; 0xf4
 80025d0:	1d9e      	adds	r6, r3, #6
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80025d2:	2201      	movs	r2, #1
 80025d4:	0023      	movs	r3, r4
 80025d6:	3107      	adds	r1, #7
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80025d8:	7030      	strb	r0, [r6, #0]
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80025da:	f7ff fdec 	bl	80021b6 <bme280_get_regs>
    if (rslt == BME280_OK)
 80025de:	2800      	cmp	r0, #0
 80025e0:	d114      	bne.n	800260c <bme280_set_sensor_mode+0x68>
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80025e2:	466b      	mov	r3, sp
 80025e4:	2203      	movs	r2, #3
 80025e6:	79db      	ldrb	r3, [r3, #7]
 80025e8:	4015      	ands	r5, r2
 80025ea:	4393      	bics	r3, r2
 80025ec:	431d      	orrs	r5, r3
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80025ee:	4669      	mov	r1, sp
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80025f0:	466b      	mov	r3, sp
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80025f2:	0030      	movs	r0, r6
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80025f4:	71dd      	strb	r5, [r3, #7]
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80025f6:	3a02      	subs	r2, #2
 80025f8:	0023      	movs	r3, r4
 80025fa:	3107      	adds	r1, #7
 80025fc:	f7ff fdf5 	bl	80021ea <bme280_set_regs>
    return rslt;
 8002600:	e004      	b.n	800260c <bme280_set_sensor_mode+0x68>
            rslt = put_device_to_sleep(dev);
 8002602:	0020      	movs	r0, r4
 8002604:	f7ff ff6e 	bl	80024e4 <put_device_to_sleep>
        if (rslt == BME280_OK)
 8002608:	2800      	cmp	r0, #0
 800260a:	d0de      	beq.n	80025ca <bme280_set_sensor_mode+0x26>
}
 800260c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800260e <bme280_parse_sensor_data>:
    data_msb = (uint32_t)reg_data[0] << 12;
 800260e:	7803      	ldrb	r3, [r0, #0]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8002610:	7842      	ldrb	r2, [r0, #1]
    data_msb = (uint32_t)reg_data[0] << 12;
 8002612:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[1] << 4;
 8002614:	0112      	lsls	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8002616:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8002618:	7882      	ldrb	r2, [r0, #2]
 800261a:	0912      	lsrs	r2, r2, #4
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]
    data_msb = (uint32_t)reg_data[3] << 12;
 8002620:	78c3      	ldrb	r3, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8002622:	7902      	ldrb	r2, [r0, #4]
    data_msb = (uint32_t)reg_data[3] << 12;
 8002624:	031b      	lsls	r3, r3, #12
    data_lsb = (uint32_t)reg_data[4] << 4;
 8002626:	0112      	lsls	r2, r2, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002628:	4313      	orrs	r3, r2
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800262a:	7942      	ldrb	r2, [r0, #5]
 800262c:	0912      	lsrs	r2, r2, #4
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
    uncomp_data->humidity = data_msb | data_lsb;
 8002632:	79c3      	ldrb	r3, [r0, #7]
 8002634:	7982      	ldrb	r2, [r0, #6]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	4313      	orrs	r3, r2
 800263a:	ba5b      	rev16	r3, r3
 800263c:	b29b      	uxth	r3, r3
 800263e:	608b      	str	r3, [r1, #8]
}
 8002640:	4770      	bx	lr
	...

08002644 <bme280_compensate_data>:
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	b08d      	sub	sp, #52	; 0x34
 8002648:	9004      	str	r0, [sp, #16]
 800264a:	9102      	str	r1, [sp, #8]
 800264c:	9201      	str	r2, [sp, #4]
 800264e:	9300      	str	r3, [sp, #0]
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8002650:	2900      	cmp	r1, #0
 8002652:	d100      	bne.n	8002656 <bme280_compensate_data+0x12>
 8002654:	e27c      	b.n	8002b50 <bme280_compensate_data+0x50c>
 8002656:	2a00      	cmp	r2, #0
 8002658:	d100      	bne.n	800265c <bme280_compensate_data+0x18>
 800265a:	e279      	b.n	8002b50 <bme280_compensate_data+0x50c>
 800265c:	9b00      	ldr	r3, [sp, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d100      	bne.n	8002664 <bme280_compensate_data+0x20>
 8002662:	e275      	b.n	8002b50 <bme280_compensate_data+0x50c>
        comp_data->temperature = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	2200      	movs	r2, #0
 8002668:	9901      	ldr	r1, [sp, #4]
 800266a:	608a      	str	r2, [r1, #8]
 800266c:	60cb      	str	r3, [r1, #12]
        comp_data->pressure = 0;
 800266e:	600a      	str	r2, [r1, #0]
 8002670:	604b      	str	r3, [r1, #4]
        comp_data->humidity = 0;
 8002672:	610a      	str	r2, [r1, #16]
 8002674:	614b      	str	r3, [r1, #20]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8002676:	0003      	movs	r3, r0
 8002678:	075b      	lsls	r3, r3, #29
 800267a:	d077      	beq.n	800276c <bme280_compensate_data+0x128>
    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 800267c:	9b02      	ldr	r3, [sp, #8]
 800267e:	6858      	ldr	r0, [r3, #4]
 8002680:	f7ff fd46 	bl	8002110 <__aeabi_ui2d>
 8002684:	9b00      	ldr	r3, [sp, #0]
 8002686:	0006      	movs	r6, r0
 8002688:	8818      	ldrh	r0, [r3, #0]
 800268a:	000f      	movs	r7, r1
 800268c:	f7ff fd40 	bl	8002110 <__aeabi_ui2d>
 8002690:	2200      	movs	r2, #0
 8002692:	9006      	str	r0, [sp, #24]
 8002694:	9107      	str	r1, [sp, #28]
 8002696:	4bf6      	ldr	r3, [pc, #984]	; (8002a70 <bme280_compensate_data+0x42c>)
 8002698:	0030      	movs	r0, r6
 800269a:	0039      	movs	r1, r7
 800269c:	f7fe fe8e 	bl	80013bc <__aeabi_dmul>
 80026a0:	2200      	movs	r2, #0
 80026a2:	0004      	movs	r4, r0
 80026a4:	000d      	movs	r5, r1
 80026a6:	9806      	ldr	r0, [sp, #24]
 80026a8:	9907      	ldr	r1, [sp, #28]
 80026aa:	4bf2      	ldr	r3, [pc, #968]	; (8002a74 <bme280_compensate_data+0x430>)
 80026ac:	f7fe fe86 	bl	80013bc <__aeabi_dmul>
 80026b0:	0002      	movs	r2, r0
 80026b2:	000b      	movs	r3, r1
 80026b4:	0020      	movs	r0, r4
 80026b6:	0029      	movs	r1, r5
 80026b8:	f7ff f942 	bl	8001940 <__aeabi_dsub>
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 80026bc:	2200      	movs	r2, #0
    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 80026be:	9008      	str	r0, [sp, #32]
 80026c0:	9109      	str	r1, [sp, #36]	; 0x24
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 80026c2:	4bed      	ldr	r3, [pc, #948]	; (8002a78 <bme280_compensate_data+0x434>)
 80026c4:	0030      	movs	r0, r6
 80026c6:	0039      	movs	r1, r7
 80026c8:	f7fe fe78 	bl	80013bc <__aeabi_dmul>
 80026cc:	2200      	movs	r2, #0
 80026ce:	0004      	movs	r4, r0
 80026d0:	000d      	movs	r5, r1
 80026d2:	9806      	ldr	r0, [sp, #24]
 80026d4:	9907      	ldr	r1, [sp, #28]
 80026d6:	4be9      	ldr	r3, [pc, #932]	; (8002a7c <bme280_compensate_data+0x438>)
 80026d8:	f7fe fe70 	bl	80013bc <__aeabi_dmul>
 80026dc:	0002      	movs	r2, r0
 80026de:	000b      	movs	r3, r1
 80026e0:	0020      	movs	r0, r4
 80026e2:	0029      	movs	r1, r5
 80026e4:	f7ff f92c 	bl	8001940 <__aeabi_dsub>
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 80026e8:	0002      	movs	r2, r0
 80026ea:	000b      	movs	r3, r1
 80026ec:	f7fe fe66 	bl	80013bc <__aeabi_dmul>
    var1 = var1 * ((double)calib_data->dig_t2);
 80026f0:	9b00      	ldr	r3, [sp, #0]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 80026f2:	0006      	movs	r6, r0
    var1 = var1 * ((double)calib_data->dig_t2);
 80026f4:	2002      	movs	r0, #2
 80026f6:	5e18      	ldrsh	r0, [r3, r0]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 80026f8:	000f      	movs	r7, r1
    var1 = var1 * ((double)calib_data->dig_t2);
 80026fa:	f7ff fcd9 	bl	80020b0 <__aeabi_i2d>
 80026fe:	9a08      	ldr	r2, [sp, #32]
 8002700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002702:	f7fe fe5b 	bl	80013bc <__aeabi_dmul>
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002706:	9b00      	ldr	r3, [sp, #0]
    var1 = var1 * ((double)calib_data->dig_t2);
 8002708:	0004      	movs	r4, r0
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 800270a:	2004      	movs	r0, #4
 800270c:	5e18      	ldrsh	r0, [r3, r0]
    var1 = var1 * ((double)calib_data->dig_t2);
 800270e:	000d      	movs	r5, r1
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8002710:	f7ff fcce 	bl	80020b0 <__aeabi_i2d>
 8002714:	0032      	movs	r2, r6
 8002716:	003b      	movs	r3, r7
 8002718:	f7fe fe50 	bl	80013bc <__aeabi_dmul>
 800271c:	0002      	movs	r2, r0
 800271e:	000b      	movs	r3, r1
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002720:	0020      	movs	r0, r4
 8002722:	0029      	movs	r1, r5
 8002724:	f7fd fef0 	bl	8000508 <__aeabi_dadd>
 8002728:	0004      	movs	r4, r0
 800272a:	000d      	movs	r5, r1
 800272c:	f7ff fc8a 	bl	8002044 <__aeabi_d2iz>
 8002730:	9b00      	ldr	r3, [sp, #0]
    temperature = (var1 + var2) / 5120.0;
 8002732:	2200      	movs	r2, #0
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002734:	6258      	str	r0, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8002736:	0029      	movs	r1, r5
 8002738:	0020      	movs	r0, r4
 800273a:	4bd1      	ldr	r3, [pc, #836]	; (8002a80 <bme280_compensate_data+0x43c>)
 800273c:	f7fe fa44 	bl	8000bc8 <__aeabi_ddiv>
    if (temperature < temperature_min)
 8002740:	2200      	movs	r2, #0
 8002742:	4bd0      	ldr	r3, [pc, #832]	; (8002a84 <bme280_compensate_data+0x440>)
    temperature = (var1 + var2) / 5120.0;
 8002744:	0004      	movs	r4, r0
 8002746:	000d      	movs	r5, r1
    if (temperature < temperature_min)
 8002748:	f7fd fe88 	bl	800045c <__aeabi_dcmplt>
 800274c:	2800      	cmp	r0, #0
 800274e:	d000      	beq.n	8002752 <bme280_compensate_data+0x10e>
 8002750:	e1f5      	b.n	8002b3e <bme280_compensate_data+0x4fa>
    else if (temperature > temperature_max)
 8002752:	2200      	movs	r2, #0
 8002754:	0020      	movs	r0, r4
 8002756:	0029      	movs	r1, r5
 8002758:	4bcb      	ldr	r3, [pc, #812]	; (8002a88 <bme280_compensate_data+0x444>)
 800275a:	f7fd fe93 	bl	8000484 <__aeabi_dcmpgt>
 800275e:	2800      	cmp	r0, #0
 8002760:	d001      	beq.n	8002766 <bme280_compensate_data+0x122>
        temperature = temperature_max;
 8002762:	2400      	movs	r4, #0
 8002764:	4dc8      	ldr	r5, [pc, #800]	; (8002a88 <bme280_compensate_data+0x444>)
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	609c      	str	r4, [r3, #8]
 800276a:	60dd      	str	r5, [r3, #12]
        if (sensor_comp & BME280_PRESS)
 800276c:	9b04      	ldr	r3, [sp, #16]
 800276e:	07db      	lsls	r3, r3, #31
 8002770:	d400      	bmi.n	8002774 <bme280_compensate_data+0x130>
 8002772:	e10a      	b.n	800298a <bme280_compensate_data+0x346>
    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8002774:	9b00      	ldr	r3, [sp, #0]
 8002776:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002778:	f7ff fc9a 	bl	80020b0 <__aeabi_i2d>
 800277c:	2200      	movs	r2, #0
 800277e:	4bc3      	ldr	r3, [pc, #780]	; (8002a8c <bme280_compensate_data+0x448>)
 8002780:	f7fe fe1c 	bl	80013bc <__aeabi_dmul>
 8002784:	2200      	movs	r2, #0
 8002786:	4bc2      	ldr	r3, [pc, #776]	; (8002a90 <bme280_compensate_data+0x44c>)
 8002788:	f7ff f8da 	bl	8001940 <__aeabi_dsub>
 800278c:	0006      	movs	r6, r0
 800278e:	000f      	movs	r7, r1
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8002790:	9b00      	ldr	r3, [sp, #0]
 8002792:	2210      	movs	r2, #16
 8002794:	5e9b      	ldrsh	r3, [r3, r2]
 8002796:	9308      	str	r3, [sp, #32]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8002798:	9b00      	ldr	r3, [sp, #0]
 800279a:	220e      	movs	r2, #14
 800279c:	5e9b      	ldrsh	r3, [r3, r2]
 800279e:	930a      	str	r3, [sp, #40]	; 0x28
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80027a0:	9b00      	ldr	r3, [sp, #0]
 80027a2:	220c      	movs	r2, #12
 80027a4:	5e9b      	ldrsh	r3, [r3, r2]
 80027a6:	930b      	str	r3, [sp, #44]	; 0x2c
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80027a8:	9b00      	ldr	r3, [sp, #0]
 80027aa:	200a      	movs	r0, #10
 80027ac:	5e18      	ldrsh	r0, [r3, r0]
 80027ae:	f7ff fc7f 	bl	80020b0 <__aeabi_i2d>
 80027b2:	0032      	movs	r2, r6
 80027b4:	003b      	movs	r3, r7
 80027b6:	f7fe fe01 	bl	80013bc <__aeabi_dmul>
 80027ba:	0032      	movs	r2, r6
 80027bc:	003b      	movs	r3, r7
 80027be:	f7fe fdfd 	bl	80013bc <__aeabi_dmul>
 80027c2:	23fb      	movs	r3, #251	; 0xfb
 80027c4:	2200      	movs	r2, #0
 80027c6:	059b      	lsls	r3, r3, #22
 80027c8:	f7fe fdf8 	bl	80013bc <__aeabi_dmul>
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80027cc:	9b00      	ldr	r3, [sp, #0]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80027ce:	0004      	movs	r4, r0
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80027d0:	2008      	movs	r0, #8
 80027d2:	5e18      	ldrsh	r0, [r3, r0]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80027d4:	000d      	movs	r5, r1
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 80027d6:	f7ff fc6b 	bl	80020b0 <__aeabi_i2d>
 80027da:	0032      	movs	r2, r6
 80027dc:	003b      	movs	r3, r7
 80027de:	f7fe fded 	bl	80013bc <__aeabi_dmul>
 80027e2:	0002      	movs	r2, r0
 80027e4:	000b      	movs	r3, r1
 80027e6:	0020      	movs	r0, r4
 80027e8:	0029      	movs	r1, r5
 80027ea:	f7fd fe8d 	bl	8000508 <__aeabi_dadd>
 80027ee:	23fb      	movs	r3, #251	; 0xfb
 80027f0:	2200      	movs	r2, #0
 80027f2:	059b      	lsls	r3, r3, #22
 80027f4:	f7fe fde2 	bl	80013bc <__aeabi_dmul>
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80027f8:	23fc      	movs	r3, #252	; 0xfc
 80027fa:	2200      	movs	r2, #0
 80027fc:	059b      	lsls	r3, r3, #22
 80027fe:	f7fe fddd 	bl	80013bc <__aeabi_dmul>
 8002802:	2200      	movs	r2, #0
 8002804:	4ba3      	ldr	r3, [pc, #652]	; (8002a94 <bme280_compensate_data+0x450>)
 8002806:	f7fd fe7f 	bl	8000508 <__aeabi_dadd>
 800280a:	0004      	movs	r4, r0
 800280c:	000d      	movs	r5, r1
 800280e:	9b00      	ldr	r3, [sp, #0]
 8002810:	88d8      	ldrh	r0, [r3, #6]
 8002812:	f7ff fc7d 	bl	8002110 <__aeabi_ui2d>
 8002816:	0022      	movs	r2, r4
 8002818:	002b      	movs	r3, r5
 800281a:	f7fe fdcf 	bl	80013bc <__aeabi_dmul>
    if (var1 > (0.0))
 800281e:	2200      	movs	r2, #0
 8002820:	2300      	movs	r3, #0
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8002822:	9006      	str	r0, [sp, #24]
 8002824:	9107      	str	r1, [sp, #28]
    if (var1 > (0.0))
 8002826:	f7fd fe2d 	bl	8000484 <__aeabi_dcmpgt>
 800282a:	2800      	cmp	r0, #0
 800282c:	d100      	bne.n	8002830 <bme280_compensate_data+0x1ec>
 800282e:	e189      	b.n	8002b44 <bme280_compensate_data+0x500>
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8002830:	0032      	movs	r2, r6
 8002832:	003b      	movs	r3, r7
 8002834:	0030      	movs	r0, r6
 8002836:	0039      	movs	r1, r7
 8002838:	f7fe fdc0 	bl	80013bc <__aeabi_dmul>
 800283c:	0004      	movs	r4, r0
 800283e:	9808      	ldr	r0, [sp, #32]
 8002840:	000d      	movs	r5, r1
 8002842:	f7ff fc35 	bl	80020b0 <__aeabi_i2d>
 8002846:	0002      	movs	r2, r0
 8002848:	000b      	movs	r3, r1
 800284a:	0020      	movs	r0, r4
 800284c:	0029      	movs	r1, r5
 800284e:	f7fe fdb5 	bl	80013bc <__aeabi_dmul>
 8002852:	23fc      	movs	r3, #252	; 0xfc
 8002854:	2200      	movs	r2, #0
 8002856:	059b      	lsls	r3, r3, #22
 8002858:	f7fe fdb0 	bl	80013bc <__aeabi_dmul>
 800285c:	0004      	movs	r4, r0
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 800285e:	980a      	ldr	r0, [sp, #40]	; 0x28
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8002860:	000d      	movs	r5, r1
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8002862:	f7ff fc25 	bl	80020b0 <__aeabi_i2d>
 8002866:	0032      	movs	r2, r6
 8002868:	003b      	movs	r3, r7
 800286a:	f7fe fda7 	bl	80013bc <__aeabi_dmul>
 800286e:	0002      	movs	r2, r0
 8002870:	000b      	movs	r3, r1
 8002872:	f7fd fe49 	bl	8000508 <__aeabi_dadd>
 8002876:	0022      	movs	r2, r4
 8002878:	002b      	movs	r3, r5
 800287a:	f7fd fe45 	bl	8000508 <__aeabi_dadd>
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 800287e:	2200      	movs	r2, #0
 8002880:	4b85      	ldr	r3, [pc, #532]	; (8002a98 <bme280_compensate_data+0x454>)
 8002882:	f7fe fd9b 	bl	80013bc <__aeabi_dmul>
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8002886:	9b02      	ldr	r3, [sp, #8]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 8002888:	0004      	movs	r4, r0
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 800288a:	6818      	ldr	r0, [r3, #0]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 800288c:	000d      	movs	r5, r1
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 800288e:	f7ff fc3f 	bl	8002110 <__aeabi_ui2d>
 8002892:	0002      	movs	r2, r0
 8002894:	000b      	movs	r3, r1
 8002896:	2000      	movs	r0, #0
 8002898:	4980      	ldr	r1, [pc, #512]	; (8002a9c <bme280_compensate_data+0x458>)
 800289a:	f7ff f851 	bl	8001940 <__aeabi_dsub>
 800289e:	0006      	movs	r6, r0
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80028a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80028a2:	000f      	movs	r7, r1
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80028a4:	f7ff fc04 	bl	80020b0 <__aeabi_i2d>
 80028a8:	2200      	movs	r2, #0
 80028aa:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <bme280_compensate_data+0x45c>)
 80028ac:	f7fe fd86 	bl	80013bc <__aeabi_dmul>
 80028b0:	0022      	movs	r2, r4
 80028b2:	002b      	movs	r3, r5
 80028b4:	f7fd fe28 	bl	8000508 <__aeabi_dadd>
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80028b8:	2200      	movs	r2, #0
 80028ba:	4b7a      	ldr	r3, [pc, #488]	; (8002aa4 <bme280_compensate_data+0x460>)
 80028bc:	f7fe fd7e 	bl	80013bc <__aeabi_dmul>
 80028c0:	0002      	movs	r2, r0
 80028c2:	000b      	movs	r3, r1
 80028c4:	0030      	movs	r0, r6
 80028c6:	0039      	movs	r1, r7
 80028c8:	f7ff f83a 	bl	8001940 <__aeabi_dsub>
 80028cc:	2200      	movs	r2, #0
 80028ce:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <bme280_compensate_data+0x464>)
 80028d0:	f7fe fd74 	bl	80013bc <__aeabi_dmul>
 80028d4:	9a06      	ldr	r2, [sp, #24]
 80028d6:	9b07      	ldr	r3, [sp, #28]
 80028d8:	f7fe f976 	bl	8000bc8 <__aeabi_ddiv>
 80028dc:	0006      	movs	r6, r0
 80028de:	000f      	movs	r7, r1
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 80028e0:	9b00      	ldr	r3, [sp, #0]
 80028e2:	2016      	movs	r0, #22
 80028e4:	5e18      	ldrsh	r0, [r3, r0]
 80028e6:	f7ff fbe3 	bl	80020b0 <__aeabi_i2d>
 80028ea:	0032      	movs	r2, r6
 80028ec:	003b      	movs	r3, r7
 80028ee:	f7fe fd65 	bl	80013bc <__aeabi_dmul>
 80028f2:	0032      	movs	r2, r6
 80028f4:	003b      	movs	r3, r7
 80028f6:	f7fe fd61 	bl	80013bc <__aeabi_dmul>
 80028fa:	23f8      	movs	r3, #248	; 0xf8
 80028fc:	2200      	movs	r2, #0
 80028fe:	059b      	lsls	r3, r3, #22
 8002900:	f7fe fd5c 	bl	80013bc <__aeabi_dmul>
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8002904:	9b00      	ldr	r3, [sp, #0]
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8002906:	0004      	movs	r4, r0
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8002908:	2014      	movs	r0, #20
 800290a:	5e18      	ldrsh	r0, [r3, r0]
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800290c:	000d      	movs	r5, r1
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 800290e:	f7ff fbcf 	bl	80020b0 <__aeabi_i2d>
 8002912:	0032      	movs	r2, r6
 8002914:	003b      	movs	r3, r7
 8002916:	f7fe fd51 	bl	80013bc <__aeabi_dmul>
 800291a:	23fc      	movs	r3, #252	; 0xfc
 800291c:	2200      	movs	r2, #0
 800291e:	059b      	lsls	r3, r3, #22
 8002920:	f7fe fd4c 	bl	80013bc <__aeabi_dmul>
 8002924:	0002      	movs	r2, r0
 8002926:	000b      	movs	r3, r1
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8002928:	0020      	movs	r0, r4
 800292a:	0029      	movs	r1, r5
 800292c:	f7fd fdec 	bl	8000508 <__aeabi_dadd>
 8002930:	9b00      	ldr	r3, [sp, #0]
 8002932:	0004      	movs	r4, r0
 8002934:	2012      	movs	r0, #18
 8002936:	5e18      	ldrsh	r0, [r3, r0]
 8002938:	000d      	movs	r5, r1
 800293a:	f7ff fbb9 	bl	80020b0 <__aeabi_i2d>
 800293e:	0002      	movs	r2, r0
 8002940:	000b      	movs	r3, r1
 8002942:	0020      	movs	r0, r4
 8002944:	0029      	movs	r1, r5
 8002946:	f7fd fddf 	bl	8000508 <__aeabi_dadd>
 800294a:	2200      	movs	r2, #0
 800294c:	4b57      	ldr	r3, [pc, #348]	; (8002aac <bme280_compensate_data+0x468>)
 800294e:	f7fe fd35 	bl	80013bc <__aeabi_dmul>
 8002952:	0002      	movs	r2, r0
 8002954:	000b      	movs	r3, r1
 8002956:	0030      	movs	r0, r6
 8002958:	0039      	movs	r1, r7
 800295a:	f7fd fdd5 	bl	8000508 <__aeabi_dadd>
        if (pressure < pressure_min)
 800295e:	2200      	movs	r2, #0
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <bme280_compensate_data+0x46c>)
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8002962:	0004      	movs	r4, r0
 8002964:	000d      	movs	r5, r1
        if (pressure < pressure_min)
 8002966:	f7fd fd79 	bl	800045c <__aeabi_dcmplt>
 800296a:	2800      	cmp	r0, #0
 800296c:	d000      	beq.n	8002970 <bme280_compensate_data+0x32c>
 800296e:	e0e9      	b.n	8002b44 <bme280_compensate_data+0x500>
        else if (pressure > pressure_max)
 8002970:	2200      	movs	r2, #0
 8002972:	0020      	movs	r0, r4
 8002974:	0029      	movs	r1, r5
 8002976:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <bme280_compensate_data+0x470>)
 8002978:	f7fd fd84 	bl	8000484 <__aeabi_dcmpgt>
 800297c:	2800      	cmp	r0, #0
 800297e:	d001      	beq.n	8002984 <bme280_compensate_data+0x340>
            pressure = pressure_max;
 8002980:	2400      	movs	r4, #0
 8002982:	4d4c      	ldr	r5, [pc, #304]	; (8002ab4 <bme280_compensate_data+0x470>)
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8002984:	9b01      	ldr	r3, [sp, #4]
 8002986:	601c      	str	r4, [r3, #0]
 8002988:	605d      	str	r5, [r3, #4]
        if (sensor_comp & BME280_HUM)
 800298a:	9b04      	ldr	r3, [sp, #16]
    int8_t rslt = BME280_OK;
 800298c:	2000      	movs	r0, #0
        if (sensor_comp & BME280_HUM)
 800298e:	075b      	lsls	r3, r3, #29
 8002990:	d400      	bmi.n	8002994 <bme280_compensate_data+0x350>
 8002992:	e0d2      	b.n	8002b3a <bme280_compensate_data+0x4f6>
    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002994:	9b00      	ldr	r3, [sp, #0]
 8002996:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002998:	f7ff fb8a 	bl	80020b0 <__aeabi_i2d>
 800299c:	2200      	movs	r2, #0
 800299e:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <bme280_compensate_data+0x474>)
 80029a0:	f7fe ffce 	bl	8001940 <__aeabi_dsub>
 80029a4:	0006      	movs	r6, r0
 80029a6:	000f      	movs	r7, r1
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80029a8:	9b00      	ldr	r3, [sp, #0]
 80029aa:	7f18      	ldrb	r0, [r3, #28]
 80029ac:	f7ff fbb0 	bl	8002110 <__aeabi_ui2d>
 80029b0:	2200      	movs	r2, #0
 80029b2:	4b42      	ldr	r3, [pc, #264]	; (8002abc <bme280_compensate_data+0x478>)
 80029b4:	f7fe fd02 	bl	80013bc <__aeabi_dmul>
 80029b8:	0032      	movs	r2, r6
 80029ba:	003b      	movs	r3, r7
 80029bc:	f7fe fcfe 	bl	80013bc <__aeabi_dmul>
 80029c0:	2200      	movs	r2, #0
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <bme280_compensate_data+0x450>)
 80029c4:	f7fd fda0 	bl	8000508 <__aeabi_dadd>
 80029c8:	0004      	movs	r4, r0
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80029ca:	201f      	movs	r0, #31
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 80029cc:	000d      	movs	r5, r1
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 80029ce:	9b00      	ldr	r3, [sp, #0]
 80029d0:	3303      	adds	r3, #3
 80029d2:	5618      	ldrsb	r0, [r3, r0]
 80029d4:	f7ff fb6c 	bl	80020b0 <__aeabi_i2d>
 80029d8:	2200      	movs	r2, #0
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <bme280_compensate_data+0x478>)
 80029dc:	f7fe fcee 	bl	80013bc <__aeabi_dmul>
 80029e0:	0032      	movs	r2, r6
 80029e2:	003b      	movs	r3, r7
 80029e4:	f7fe fcea 	bl	80013bc <__aeabi_dmul>
 80029e8:	0022      	movs	r2, r4
 80029ea:	002b      	movs	r3, r5
 80029ec:	f7fe fce6 	bl	80013bc <__aeabi_dmul>
 80029f0:	2200      	movs	r2, #0
 80029f2:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <bme280_compensate_data+0x450>)
 80029f4:	f7fd fd88 	bl	8000508 <__aeabi_dadd>
    var6 = var3 * var4 * (var5 * var6);
 80029f8:	0022      	movs	r2, r4
 80029fa:	002b      	movs	r3, r5
 80029fc:	f7fe fcde 	bl	80013bc <__aeabi_dmul>
    var3 = uncomp_data->humidity - var2;
 8002a00:	9b02      	ldr	r3, [sp, #8]
    var6 = var3 * var4 * (var5 * var6);
 8002a02:	9004      	str	r0, [sp, #16]
 8002a04:	9105      	str	r1, [sp, #20]
    var3 = uncomp_data->humidity - var2;
 8002a06:	6898      	ldr	r0, [r3, #8]
 8002a08:	f7ff fb82 	bl	8002110 <__aeabi_ui2d>
 8002a0c:	9002      	str	r0, [sp, #8]
 8002a0e:	9103      	str	r1, [sp, #12]
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8002a10:	9b00      	ldr	r3, [sp, #0]
 8002a12:	2020      	movs	r0, #32
 8002a14:	5e18      	ldrsh	r0, [r3, r0]
 8002a16:	f7ff fb4b 	bl	80020b0 <__aeabi_i2d>
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <bme280_compensate_data+0x42c>)
 8002a1e:	f7fe fccd 	bl	80013bc <__aeabi_dmul>
 8002a22:	0032      	movs	r2, r6
 8002a24:	003b      	movs	r3, r7
 8002a26:	f7fe fcc9 	bl	80013bc <__aeabi_dmul>
 8002a2a:	9b00      	ldr	r3, [sp, #0]
 8002a2c:	0004      	movs	r4, r0
 8002a2e:	201e      	movs	r0, #30
 8002a30:	5e18      	ldrsh	r0, [r3, r0]
 8002a32:	000d      	movs	r5, r1
 8002a34:	f7ff fb3c 	bl	80020b0 <__aeabi_i2d>
 8002a38:	2200      	movs	r2, #0
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <bme280_compensate_data+0x47c>)
 8002a3c:	f7fe fcbe 	bl	80013bc <__aeabi_dmul>
 8002a40:	0002      	movs	r2, r0
 8002a42:	000b      	movs	r3, r1
 8002a44:	0020      	movs	r0, r4
 8002a46:	0029      	movs	r1, r5
 8002a48:	f7fd fd5e 	bl	8000508 <__aeabi_dadd>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	000b      	movs	r3, r1
    var3 = uncomp_data->humidity - var2;
 8002a50:	9802      	ldr	r0, [sp, #8]
 8002a52:	9903      	ldr	r1, [sp, #12]
 8002a54:	f7fe ff74 	bl	8001940 <__aeabi_dsub>
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8002a58:	9b00      	ldr	r3, [sp, #0]
    var3 = uncomp_data->humidity - var2;
 8002a5a:	0004      	movs	r4, r0
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8002a5c:	201a      	movs	r0, #26
 8002a5e:	5e18      	ldrsh	r0, [r3, r0]
    var3 = uncomp_data->humidity - var2;
 8002a60:	000d      	movs	r5, r1
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8002a62:	f7ff fb25 	bl	80020b0 <__aeabi_i2d>
 8002a66:	2200      	movs	r2, #0
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <bme280_compensate_data+0x480>)
 8002a6a:	f7fe fca7 	bl	80013bc <__aeabi_dmul>
 8002a6e:	e02b      	b.n	8002ac8 <bme280_compensate_data+0x484>
 8002a70:	3f100000 	.word	0x3f100000
 8002a74:	3f500000 	.word	0x3f500000
 8002a78:	3ee00000 	.word	0x3ee00000
 8002a7c:	3f200000 	.word	0x3f200000
 8002a80:	40b40000 	.word	0x40b40000
 8002a84:	c0440000 	.word	0xc0440000
 8002a88:	40554000 	.word	0x40554000
 8002a8c:	3fe00000 	.word	0x3fe00000
 8002a90:	40ef4000 	.word	0x40ef4000
 8002a94:	3ff00000 	.word	0x3ff00000
 8002a98:	3fd00000 	.word	0x3fd00000
 8002a9c:	41300000 	.word	0x41300000
 8002aa0:	40f00000 	.word	0x40f00000
 8002aa4:	3f300000 	.word	0x3f300000
 8002aa8:	40b86a00 	.word	0x40b86a00
 8002aac:	3fb00000 	.word	0x3fb00000
 8002ab0:	40dd4c00 	.word	0x40dd4c00
 8002ab4:	40fadb00 	.word	0x40fadb00
 8002ab8:	40f2c000 	.word	0x40f2c000
 8002abc:	3e500000 	.word	0x3e500000
 8002ac0:	40500000 	.word	0x40500000
 8002ac4:	3ef00000 	.word	0x3ef00000
 8002ac8:	0002      	movs	r2, r0
 8002aca:	000b      	movs	r3, r1
    var6 = var3 * var4 * (var5 * var6);
 8002acc:	0020      	movs	r0, r4
 8002ace:	0029      	movs	r1, r5
 8002ad0:	f7fe fc74 	bl	80013bc <__aeabi_dmul>
 8002ad4:	9a04      	ldr	r2, [sp, #16]
 8002ad6:	9b05      	ldr	r3, [sp, #20]
 8002ad8:	f7fe fc70 	bl	80013bc <__aeabi_dmul>
 8002adc:	0004      	movs	r4, r0
 8002ade:	000d      	movs	r5, r1
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8002ae0:	9b00      	ldr	r3, [sp, #0]
 8002ae2:	7e18      	ldrb	r0, [r3, #24]
 8002ae4:	f7ff fb14 	bl	8002110 <__aeabi_ui2d>
 8002ae8:	0022      	movs	r2, r4
 8002aea:	002b      	movs	r3, r5
 8002aec:	f7fe fc66 	bl	80013bc <__aeabi_dmul>
 8002af0:	23fb      	movs	r3, #251	; 0xfb
 8002af2:	2200      	movs	r2, #0
 8002af4:	059b      	lsls	r3, r3, #22
 8002af6:	f7fe fc61 	bl	80013bc <__aeabi_dmul>
 8002afa:	0002      	movs	r2, r0
 8002afc:	000b      	movs	r3, r1
 8002afe:	2000      	movs	r0, #0
 8002b00:	4915      	ldr	r1, [pc, #84]	; (8002b58 <bme280_compensate_data+0x514>)
 8002b02:	f7fe ff1d 	bl	8001940 <__aeabi_dsub>
 8002b06:	0022      	movs	r2, r4
 8002b08:	002b      	movs	r3, r5
 8002b0a:	f7fe fc57 	bl	80013bc <__aeabi_dmul>
    if (humidity > humidity_max)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <bme280_compensate_data+0x518>)
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8002b12:	0004      	movs	r4, r0
 8002b14:	000d      	movs	r5, r1
    if (humidity > humidity_max)
 8002b16:	f7fd fcb5 	bl	8000484 <__aeabi_dcmpgt>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d115      	bne.n	8002b4a <bme280_compensate_data+0x506>
    else if (humidity < humidity_min)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2300      	movs	r3, #0
 8002b22:	0020      	movs	r0, r4
 8002b24:	0029      	movs	r1, r5
 8002b26:	f7fd fc99 	bl	800045c <__aeabi_dcmplt>
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d001      	beq.n	8002b32 <bme280_compensate_data+0x4ee>
        humidity = humidity_min;
 8002b2e:	2400      	movs	r4, #0
 8002b30:	2500      	movs	r5, #0
    int8_t rslt = BME280_OK;
 8002b32:	2000      	movs	r0, #0
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8002b34:	9b01      	ldr	r3, [sp, #4]
 8002b36:	611c      	str	r4, [r3, #16]
 8002b38:	615d      	str	r5, [r3, #20]
}
 8002b3a:	b00d      	add	sp, #52	; 0x34
 8002b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temperature = temperature_min;
 8002b3e:	2400      	movs	r4, #0
 8002b40:	4d07      	ldr	r5, [pc, #28]	; (8002b60 <bme280_compensate_data+0x51c>)
 8002b42:	e610      	b.n	8002766 <bme280_compensate_data+0x122>
        pressure = pressure_min;
 8002b44:	2400      	movs	r4, #0
 8002b46:	4d07      	ldr	r5, [pc, #28]	; (8002b64 <bme280_compensate_data+0x520>)
 8002b48:	e71c      	b.n	8002984 <bme280_compensate_data+0x340>
        humidity = humidity_max;
 8002b4a:	2400      	movs	r4, #0
 8002b4c:	4d03      	ldr	r5, [pc, #12]	; (8002b5c <bme280_compensate_data+0x518>)
 8002b4e:	e7f0      	b.n	8002b32 <bme280_compensate_data+0x4ee>
        rslt = BME280_E_NULL_PTR;
 8002b50:	2001      	movs	r0, #1
 8002b52:	4240      	negs	r0, r0
 8002b54:	e7f1      	b.n	8002b3a <bme280_compensate_data+0x4f6>
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	3ff00000 	.word	0x3ff00000
 8002b5c:	40590000 	.word	0x40590000
 8002b60:	c0440000 	.word	0xc0440000
 8002b64:	40dd4c00 	.word	0x40dd4c00

08002b68 <bme280_get_sensor_data>:
{
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	0014      	movs	r4, r2
 8002b6c:	000d      	movs	r5, r1
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8002b6e:	2100      	movs	r1, #0
{
 8002b70:	b086      	sub	sp, #24
 8002b72:	0006      	movs	r6, r0
    struct bme280_uncomp_data uncomp_data = { 0 };
 8002b74:	220c      	movs	r2, #12
 8002b76:	a803      	add	r0, sp, #12
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8002b78:	9101      	str	r1, [sp, #4]
 8002b7a:	9102      	str	r1, [sp, #8]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8002b7c:	f002 fb7e 	bl	800527c <memset>
    rslt = null_ptr_check(dev);
 8002b80:	0020      	movs	r0, r4
 8002b82:	f7ff fb09 	bl	8002198 <null_ptr_check>
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d116      	bne.n	8002bb8 <bme280_get_sensor_data+0x50>
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	d014      	beq.n	8002bb8 <bme280_get_sensor_data+0x50>
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8002b8e:	0023      	movs	r3, r4
 8002b90:	2208      	movs	r2, #8
 8002b92:	a901      	add	r1, sp, #4
 8002b94:	30f7      	adds	r0, #247	; 0xf7
 8002b96:	f7ff fb0e 	bl	80021b6 <bme280_get_regs>
        if (rslt == BME280_OK)
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d10a      	bne.n	8002bb4 <bme280_get_sensor_data+0x4c>
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8002b9e:	a903      	add	r1, sp, #12
 8002ba0:	a801      	add	r0, sp, #4
 8002ba2:	f7ff fd34 	bl	800260e <bme280_parse_sensor_data>
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8002ba6:	0023      	movs	r3, r4
 8002ba8:	002a      	movs	r2, r5
 8002baa:	0030      	movs	r0, r6
 8002bac:	3310      	adds	r3, #16
 8002bae:	a903      	add	r1, sp, #12
 8002bb0:	f7ff fd48 	bl	8002644 <bme280_compensate_data>
}
 8002bb4:	b006      	add	sp, #24
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BME280_E_NULL_PTR;
 8002bb8:	2001      	movs	r0, #1
 8002bba:	4240      	negs	r0, r0
 8002bbc:	e7fa      	b.n	8002bb4 <bme280_get_sensor_data+0x4c>

08002bbe <delay_ms>:
//#else
//        printf("%ld, %ld, %ld\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
//#endif
//}

void delay_ms(uint32_t period) {
 8002bbe:	b510      	push	{r4, lr}
	HAL_Delay(period);
 8002bc0:	f000 fb4c 	bl	800325c <HAL_Delay>
}
 8002bc4:	bd10      	pop	{r4, pc}
	...

08002bc8 <i2c_read>:

int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002bc8:	b530      	push	{r4, r5, lr}
 8002bca:	0015      	movs	r5, r2
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
    HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8002bcc:	000a      	movs	r2, r1
 8002bce:	0001      	movs	r1, r0
 8002bd0:	2064      	movs	r0, #100	; 0x64
 8002bd2:	4c06      	ldr	r4, [pc, #24]	; (8002bec <i2c_read+0x24>)
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002bd4:	b085      	sub	sp, #20
    HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8002bd6:	9002      	str	r0, [sp, #8]
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	0020      	movs	r0, r4
 8002bdc:	2301      	movs	r3, #1
 8002bde:	9500      	str	r5, [sp, #0]
 8002be0:	f000 ff06 	bl	80039f0 <HAL_I2C_Mem_Read>
    return rslt;
}
 8002be4:	2000      	movs	r0, #0
 8002be6:	b005      	add	sp, #20
 8002be8:	bd30      	pop	{r4, r5, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	200000e4 	.word	0x200000e4

08002bf0 <i2c_write>:

int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002bf0:	b530      	push	{r4, r5, lr}
 8002bf2:	0015      	movs	r5, r2
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
    HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8002bf4:	000a      	movs	r2, r1
 8002bf6:	0001      	movs	r1, r0
 8002bf8:	2064      	movs	r0, #100	; 0x64
 8002bfa:	4c06      	ldr	r4, [pc, #24]	; (8002c14 <i2c_write+0x24>)
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8002bfc:	b085      	sub	sp, #20
    HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, 1, reg_data, len, 100);
 8002bfe:	9002      	str	r0, [sp, #8]
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	0020      	movs	r0, r4
 8002c04:	2301      	movs	r3, #1
 8002c06:	9500      	str	r5, [sp, #0]
 8002c08:	f000 fe10 	bl	800382c <HAL_I2C_Mem_Write>
    return rslt;
}
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	b005      	add	sp, #20
 8002c10:	bd30      	pop	{r4, r5, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	200000e4 	.word	0x200000e4

08002c18 <BME280_init>:
	init_done = BME280_E_DEV_NOT_FOUND;
 8002c18:	23fe      	movs	r3, #254	; 0xfe
int8_t BME280_init(void) {
 8002c1a:	b570      	push	{r4, r5, r6, lr}
	bme.intf = BME280_I2C_INTF;
 8002c1c:	2601      	movs	r6, #1
	init_done = BME280_E_DEV_NOT_FOUND;
 8002c1e:	4c11      	ldr	r4, [pc, #68]	; (8002c64 <BME280_init+0x4c>)
	bme.dev_id = (BME280_I2C_ADDR_PRIM<<1);
 8002c20:	4d11      	ldr	r5, [pc, #68]	; (8002c68 <BME280_init+0x50>)
	init_done = BME280_E_DEV_NOT_FOUND;
 8002c22:	7023      	strb	r3, [r4, #0]
	bme.dev_id = (BME280_I2C_ADDR_PRIM<<1);
 8002c24:	3b12      	subs	r3, #18
 8002c26:	706b      	strb	r3, [r5, #1]
	bme.read = i2c_read;
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <BME280_init+0x54>)
	rslt = bme280_init(&bme);
 8002c2a:	0028      	movs	r0, r5
	bme.read = i2c_read;
 8002c2c:	606b      	str	r3, [r5, #4]
	bme.write = i2c_write;
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <BME280_init+0x58>)
	bme.intf = BME280_I2C_INTF;
 8002c30:	70ae      	strb	r6, [r5, #2]
	bme.write = i2c_write;
 8002c32:	60ab      	str	r3, [r5, #8]
	bme.delay_ms = delay_ms;
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <BME280_init+0x5c>)
 8002c36:	60eb      	str	r3, [r5, #12]
	rslt = bme280_init(&bme);
 8002c38:	f7ff fbec 	bl	8002414 <bme280_init>
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <BME280_init+0x60>)
 8002c3e:	63ab      	str	r3, [r5, #56]	; 0x38
	bme.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8002c40:	002b      	movs	r3, r5
 8002c42:	333c      	adds	r3, #60	; 0x3c
 8002c44:	701e      	strb	r6, [r3, #0]
	if(rslt == BME280_OK)
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d10a      	bne.n	8002c60 <BME280_init+0x48>
		rslt = bme280_set_sensor_settings(settings_sel, &bme);
 8002c4a:	0029      	movs	r1, r5
 8002c4c:	301f      	adds	r0, #31
 8002c4e:	f7ff fc78 	bl	8002542 <bme280_set_sensor_settings>
		if(rslt == BME280_OK)
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d104      	bne.n	8002c60 <BME280_init+0x48>
			rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 8002c56:	0029      	movs	r1, r5
 8002c58:	3003      	adds	r0, #3
 8002c5a:	f7ff fca3 	bl	80025a4 <bme280_set_sensor_mode>
			init_done = rslt;
 8002c5e:	7020      	strb	r0, [r4, #0]
}
 8002c60:	bd70      	pop	{r4, r5, r6, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	200000e0 	.word	0x200000e0
 8002c68:	20000084 	.word	0x20000084
 8002c6c:	08002bc9 	.word	0x08002bc9
 8002c70:	08002bf1 	.word	0x08002bf1
 8002c74:	08002bbf 	.word	0x08002bbf
 8002c78:	04010205 	.word	0x04010205

08002c7c <BME280_read_data>:
int8_t BME280_read_data(void) {
 8002c7c:	b570      	push	{r4, r5, r6, lr}
	if(init_done == BME280_OK)
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <BME280_read_data+0x30>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10e      	bne.n	8002ca6 <BME280_read_data+0x2a>
		printf("Temperature, Pressure, Humidity\r\n");
 8002c88:	4809      	ldr	r0, [pc, #36]	; (8002cb0 <BME280_read_data+0x34>)
 8002c8a:	f002 f9db 	bl	8005044 <puts>
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 8002c8e:	4d09      	ldr	r5, [pc, #36]	; (8002cb4 <BME280_read_data+0x38>)
 8002c90:	2007      	movs	r0, #7
 8002c92:	002a      	movs	r2, r5
 8002c94:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <BME280_read_data+0x3c>)
 8002c96:	f7ff ff67 	bl	8002b68 <bme280_get_sensor_data>
		bme.delay_ms(70);
 8002c9a:	68eb      	ldr	r3, [r5, #12]
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 8002c9c:	0004      	movs	r4, r0
		bme.delay_ms(70);
 8002c9e:	2046      	movs	r0, #70	; 0x46
 8002ca0:	4798      	blx	r3
}
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
	int8_t rslt = BME280_E_COMM_FAIL;
 8002ca6:	2404      	movs	r4, #4
 8002ca8:	4264      	negs	r4, r4
 8002caa:	e7fa      	b.n	8002ca2 <BME280_read_data+0x26>
 8002cac:	200000e0 	.word	0x200000e0
 8002cb0:	08006294 	.word	0x08006294
 8002cb4:	20000084 	.word	0x20000084
 8002cb8:	200000c8 	.word	0x200000c8

08002cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	2214      	movs	r2, #20
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	a803      	add	r0, sp, #12
 8002cc6:	f002 fad9 	bl	800527c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <MX_GPIO_Init+0x6c>)
 8002cce:	03c9      	lsls	r1, r1, #15
 8002cd0:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002cd2:	4c16      	ldr	r4, [pc, #88]	; (8002d2c <MX_GPIO_Init+0x70>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	615a      	str	r2, [r3, #20]
 8002cd8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002cda:	0020      	movs	r0, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cdc:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ce0:	9200      	str	r2, [sp, #0]
 8002ce2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	0289      	lsls	r1, r1, #10
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	9201      	str	r2, [sp, #4]
 8002cf4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	02c9      	lsls	r1, r1, #11
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	615a      	str	r2, [r3, #20]
 8002cfe:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d00:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	400b      	ands	r3, r1
 8002d04:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d06:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d08:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d0a:	f000 fbfd 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002d0e:	2308      	movs	r3, #8
 8002d10:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	3b07      	subs	r3, #7
 8002d14:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d18:	0020      	movs	r0, r4
 8002d1a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f000 fb40 	bl	80033a4 <HAL_GPIO_Init>

}
 8002d24:	b008      	add	sp, #32
 8002d26:	bd10      	pop	{r4, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	48000400 	.word	0x48000400

08002d30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d30:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <MX_I2C1_Init+0x50>)
 8002d34:	4c13      	ldr	r4, [pc, #76]	; (8002d84 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d36:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8002d38:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d3c:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8002d3e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d40:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d42:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8002d44:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d46:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d48:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d4a:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d4c:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d4e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d50:	f000 fd16 	bl	8003780 <HAL_I2C_Init>
 8002d54:	2800      	cmp	r0, #0
 8002d56:	d001      	beq.n	8002d5c <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8002d58:	f000 f8f6 	bl	8002f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	0020      	movs	r0, r4
 8002d60:	f000 ff2c 	bl	8003bbc <HAL_I2CEx_ConfigAnalogFilter>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d001      	beq.n	8002d6c <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8002d68:	f000 f8ee 	bl	8002f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	0020      	movs	r0, r4
 8002d70:	f000 ff4a 	bl	8003c08 <HAL_I2CEx_ConfigDigitalFilter>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d001      	beq.n	8002d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d78:	f000 f8e6 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40005400 	.word	0x40005400
 8002d84:	200000e4 	.word	0x200000e4
 8002d88:	2000090e 	.word	0x2000090e

08002d8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	0004      	movs	r4, r0
 8002d90:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d92:	2214      	movs	r2, #20
 8002d94:	2100      	movs	r1, #0
 8002d96:	a803      	add	r0, sp, #12
 8002d98:	f002 fa70 	bl	800527c <memset>
  if(i2cHandle->Instance==I2C1)
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_I2C_MspInit+0x5c>)
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d11e      	bne.n	8002de2 <HAL_I2C_MspInit+0x56>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	4c11      	ldr	r4, [pc, #68]	; (8002dec <HAL_I2C_MspInit+0x60>)
 8002da8:	02d2      	lsls	r2, r2, #11
 8002daa:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	4810      	ldr	r0, [pc, #64]	; (8002df0 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	4313      	orrs	r3, r2
 8002db0:	6163      	str	r3, [r4, #20]
 8002db2:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	4013      	ands	r3, r2
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dbc:	23c0      	movs	r3, #192	; 0xc0
 8002dbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dc0:	3bae      	subs	r3, #174	; 0xae
 8002dc2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc4:	3b0f      	subs	r3, #15
 8002dc6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002dc8:	3b02      	subs	r3, #2
 8002dca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	f000 faea 	bl	80033a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	69e3      	ldr	r3, [r4, #28]
 8002dd4:	0392      	lsls	r2, r2, #14
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61e3      	str	r3, [r4, #28]
 8002dda:	69e3      	ldr	r3, [r4, #28]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	9302      	str	r3, [sp, #8]
 8002de0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002de2:	b008      	add	sp, #32
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	40005400 	.word	0x40005400
 8002dec:	40021000 	.word	0x40021000
 8002df0:	48000400 	.word	0x48000400

08002df4 <random2>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int random2(int min, int max)
{
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	0004      	movs	r4, r0
	int tmp;
	if (max >= min)
 8002df8:	4281      	cmp	r1, r0
 8002dfa:	db0a      	blt.n	8002e12 <random2+0x1e>
		max -= min;
 8002dfc:	1a0d      	subs	r5, r1, r0
	{
		tmp = min - max;
		min = max;
		max = tmp;
	}
	return max ? (rand() % max + min) : min;
 8002dfe:	4281      	cmp	r1, r0
 8002e00:	d005      	beq.n	8002e0e <random2+0x1a>
 8002e02:	f001 ffc7 	bl	8004d94 <rand>
 8002e06:	0029      	movs	r1, r5
 8002e08:	f7fd fb0c 	bl	8000424 <__aeabi_idivmod>
 8002e0c:	1864      	adds	r4, r4, r1
}
 8002e0e:	0020      	movs	r0, r4
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
		tmp = min - max;
 8002e12:	000c      	movs	r4, r1
 8002e14:	1a45      	subs	r5, r0, r1
	return max ? (rand() % max + min) : min;
 8002e16:	e7f4      	b.n	8002e02 <random2+0xe>

08002e18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e18:	b570      	push	{r4, r5, r6, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct =
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002e1a:	2610      	movs	r6, #16
{
 8002e1c:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002e1e:	222c      	movs	r2, #44	; 0x2c
 8002e20:	2100      	movs	r1, #0
 8002e22:	a809      	add	r0, sp, #36	; 0x24
 8002e24:	f002 fa2a 	bl	800527c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002e28:	0032      	movs	r2, r6
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4668      	mov	r0, sp
 8002e2e:	f002 fa25 	bl	800527c <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8002e32:	0032      	movs	r2, r6
 8002e34:	2100      	movs	r1, #0
 8002e36:	a804      	add	r0, sp, #16
 8002e38:	f002 fa20 	bl	800527c <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002e3c:	23a0      	movs	r3, #160	; 0xa0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e3e:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e40:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002e42:	039b      	lsls	r3, r3, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e44:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e46:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e48:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e4a:	960c      	str	r6, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e4c:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002e4e:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e50:	f000 fefe 	bl	8003c50 <HAL_RCC_OscConfig>
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d001      	beq.n	8002e5c <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e58:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002e5a:	e7fe      	b.n	8002e5a <SystemClock_Config+0x42>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002e5c:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e5e:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e60:	9003      	str	r0, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e62:	0029      	movs	r1, r5
 8002e64:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002e66:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e68:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e6a:	f001 f915 	bl	8004098 <HAL_RCC_ClockConfig>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x5e>
 8002e72:	b672      	cpsid	i
	while (1)
 8002e74:	e7fe      	b.n	8002e74 <SystemClock_Config+0x5c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002e76:	2321      	movs	r3, #33	; 0x21
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e78:	9006      	str	r0, [sp, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002e7a:	9007      	str	r0, [sp, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e7c:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002e7e:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e80:	f001 f99e 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d001      	beq.n	8002e8c <SystemClock_Config+0x74>
 8002e88:	b672      	cpsid	i
	while (1)
 8002e8a:	e7fe      	b.n	8002e8a <SystemClock_Config+0x72>
}
 8002e8c:	b014      	add	sp, #80	; 0x50
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}

08002e90 <main>:
{
 8002e90:	b510      	push	{r4, lr}
	HAL_Init();
 8002e92:	f000 f9c1 	bl	8003218 <HAL_Init>
	SystemClock_Config();
 8002e96:	f7ff ffbf 	bl	8002e18 <SystemClock_Config>
	MX_GPIO_Init();
 8002e9a:	f7ff ff0f 	bl	8002cbc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8002e9e:	f000 f915 	bl	80030cc <MX_USART1_UART_Init>
	MX_TIM14_Init();
 8002ea2:	f000 f8db 	bl	800305c <MX_TIM14_Init>
	MX_I2C1_Init();
 8002ea6:	f7ff ff43 	bl	8002d30 <MX_I2C1_Init>
	HAL_TIM_Base_Start_IT(&htim14);
 8002eaa:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <main+0x50>)
 8002eac:	f001 fa0e 	bl	80042cc <HAL_TIM_Base_Start_IT>
	srand(145);
 8002eb0:	2091      	movs	r0, #145	; 0x91
 8002eb2:	f001 ff3f 	bl	8004d34 <srand>
	if (BME280_init() != BME280_OK)
 8002eb6:	f7ff feaf 	bl	8002c18 <BME280_init>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d002      	beq.n	8002ec4 <main+0x34>
		printf("Blad inicjalizacji!\n");
 8002ebe:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <main+0x54>)
 8002ec0:	f002 f8c0 	bl	8005044 <puts>
		HAL_Delay(1000);
 8002ec4:	24fa      	movs	r4, #250	; 0xfa
 8002ec6:	00a4      	lsls	r4, r4, #2
		if (BME280_read_data() != BME280_OK)
 8002ec8:	f7ff fed8 	bl	8002c7c <BME280_read_data>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d002      	beq.n	8002ed6 <main+0x46>
			printf("Blad odczytu!\n");
 8002ed0:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <main+0x58>)
 8002ed2:	f002 f8b7 	bl	8005044 <puts>
		HAL_Delay(1000);
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f000 f9c0 	bl	800325c <HAL_Delay>
		if (BME280_read_data() != BME280_OK)
 8002edc:	e7f4      	b.n	8002ec8 <main+0x38>
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000140 	.word	0x20000140
 8002ee4:	080062b5 	.word	0x080062b5
 8002ee8:	080062c9 	.word	0x080062c9

08002eec <HAL_TIM_PeriodElapsedCallback>:
{
 8002eec:	b530      	push	{r4, r5, lr}
	++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x4c>)
{
 8002ef0:	b097      	sub	sp, #92	; 0x5c
	++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 8002ef2:	8813      	ldrh	r3, [r2, #0]
	size = sprintf(data,
 8002ef4:	210f      	movs	r1, #15
	++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 8002ef6:	3301      	adds	r3, #1
	size = sprintf(data,
 8002ef8:	2005      	movs	r0, #5
	++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 8002efa:	8013      	strh	r3, [r2, #0]
	size = sprintf(data,
 8002efc:	f7ff ff7a 	bl	8002df4 <random2>
 8002f00:	213c      	movs	r1, #60	; 0x3c
 8002f02:	0004      	movs	r4, r0
 8002f04:	2032      	movs	r0, #50	; 0x32
 8002f06:	f7ff ff75 	bl	8002df4 <random2>
 8002f0a:	2132      	movs	r1, #50	; 0x32
 8002f0c:	0005      	movs	r5, r0
 8002f0e:	2028      	movs	r0, #40	; 0x28
 8002f10:	f7ff ff70 	bl	8002df4 <random2>
 8002f14:	002b      	movs	r3, r5
 8002f16:	0022      	movs	r2, r4
 8002f18:	9000      	str	r0, [sp, #0]
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002f1c:	a802      	add	r0, sp, #8
 8002f1e:	f002 f89b 	bl	8005058 <siprintf>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) &data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan
 8002f22:	a902      	add	r1, sp, #8
 8002f24:	b282      	uxth	r2, r0
 8002f26:	4806      	ldr	r0, [pc, #24]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002f28:	f001 fb8e 	bl	8004648 <HAL_UART_Transmit_IT>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Zmiana stanu pinu na diodzie LED
 8002f2c:	2108      	movs	r1, #8
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002f30:	f000 faf0 	bl	8003514 <HAL_GPIO_TogglePin>
}
 8002f34:	b017      	add	sp, #92	; 0x5c
 8002f36:	bd30      	pop	{r4, r5, pc}
 8002f38:	20000138 	.word	0x20000138
 8002f3c:	080062d7 	.word	0x080062d7
 8002f40:	20000188 	.word	0x20000188
 8002f44:	48000400 	.word	0x48000400

08002f48 <Error_Handler>:
 8002f48:	b672      	cpsid	i
	while (1)
 8002f4a:	e7fe      	b.n	8002f4a <Error_Handler+0x2>

08002f4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_MspInit+0x2c>)
{
 8002f50:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	619a      	str	r2, [r3, #24]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5e:	9200      	str	r2, [sp, #0]
 8002f60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	0549      	lsls	r1, r1, #21
 8002f66:	430a      	orrs	r2, r1
 8002f68:	61da      	str	r2, [r3, #28]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f72:	b002      	add	sp, #8
 8002f74:	4770      	bx	lr
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	40021000 	.word	0x40021000

08002f7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <NMI_Handler>

08002f7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <HardFault_Handler>

08002f80 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f80:	4770      	bx	lr

08002f82 <PendSV_Handler>:
 8002f82:	4770      	bx	lr

08002f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f86:	f000 f957 	bl	8003238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f8a:	bd10      	pop	{r4, pc}

08002f8c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002f8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002f8e:	4802      	ldr	r0, [pc, #8]	; (8002f98 <TIM14_IRQHandler+0xc>)
 8002f90:	f001 f9cc 	bl	800432c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	20000140 	.word	0x20000140

08002f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f9e:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <USART1_IRQHandler+0xc>)
 8002fa0:	f001 fb9e 	bl	80046e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	20000188 	.word	0x20000188

08002fac <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002fac:	2001      	movs	r0, #1
 8002fae:	4770      	bx	lr

08002fb0 <_kill>:

int _kill(int pid, int sig)
{
 8002fb0:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fb2:	f002 f9b9 	bl	8005328 <__errno>
 8002fb6:	2316      	movs	r3, #22
 8002fb8:	6003      	str	r3, [r0, #0]
  return -1;
 8002fba:	2001      	movs	r0, #1
}
 8002fbc:	4240      	negs	r0, r0
 8002fbe:	bd10      	pop	{r4, pc}

08002fc0 <_exit>:

void _exit (int status)
{
 8002fc0:	b510      	push	{r4, lr}
  errno = EINVAL;
 8002fc2:	f002 f9b1 	bl	8005328 <__errno>
 8002fc6:	2316      	movs	r3, #22
 8002fc8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002fca:	e7fe      	b.n	8002fca <_exit+0xa>

08002fcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	000e      	movs	r6, r1
 8002fd0:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	db01      	blt.n	8002fdc <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002fd8:	0020      	movs	r0, r4
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002fdc:	e000      	b.n	8002fe0 <_read+0x14>
 8002fde:	bf00      	nop
 8002fe0:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe2:	3501      	adds	r5, #1
 8002fe4:	e7f6      	b.n	8002fd4 <_read+0x8>

08002fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fe6:	b570      	push	{r4, r5, r6, lr}
 8002fe8:	000e      	movs	r6, r1
 8002fea:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fec:	2500      	movs	r5, #0
 8002fee:	42a5      	cmp	r5, r4
 8002ff0:	db01      	blt.n	8002ff6 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002ff2:	0020      	movs	r0, r4
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002ff6:	5d70      	ldrb	r0, [r6, r5]
 8002ff8:	e000      	b.n	8002ffc <_write+0x16>
 8002ffa:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7f6      	b.n	8002fee <_write+0x8>

08003000 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8003000:	2001      	movs	r0, #1
}
 8003002:	4240      	negs	r0, r0
 8003004:	4770      	bx	lr

08003006 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	019b      	lsls	r3, r3, #6
  return 0;
}
 800300a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800300c:	604b      	str	r3, [r1, #4]
}
 800300e:	4770      	bx	lr

08003010 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003010:	2001      	movs	r0, #1
 8003012:	4770      	bx	lr

08003014 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003014:	2000      	movs	r0, #0
 8003016:	4770      	bx	lr

08003018 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003018:	490b      	ldr	r1, [pc, #44]	; (8003048 <_sbrk+0x30>)
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <_sbrk+0x34>)
{
 800301c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800301e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003020:	490b      	ldr	r1, [pc, #44]	; (8003050 <_sbrk+0x38>)
{
 8003022:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003024:	6808      	ldr	r0, [r1, #0]
 8003026:	2800      	cmp	r0, #0
 8003028:	d101      	bne.n	800302e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800302a:	480a      	ldr	r0, [pc, #40]	; (8003054 <_sbrk+0x3c>)
 800302c:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800302e:	6808      	ldr	r0, [r1, #0]
 8003030:	18c3      	adds	r3, r0, r3
 8003032:	4293      	cmp	r3, r2
 8003034:	d906      	bls.n	8003044 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003036:	f002 f977 	bl	8005328 <__errno>
 800303a:	230c      	movs	r3, #12
 800303c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800303e:	2001      	movs	r0, #1
 8003040:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003042:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003044:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8003046:	e7fc      	b.n	8003042 <_sbrk+0x2a>
 8003048:	00000400 	.word	0x00000400
 800304c:	20001000 	.word	0x20001000
 8003050:	2000013c 	.word	0x2000013c
 8003054:	20000360 	.word	0x20000360

08003058 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003058:	4770      	bx	lr
	...

0800305c <MX_TIM14_Init>:
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <MX_TIM14_Init+0x28>)
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <MX_TIM14_Init+0x2c>)
{
 8003060:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8003062:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 9999;
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <MX_TIM14_Init+0x30>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 4799;
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <MX_TIM14_Init+0x34>)
  htim14.Init.Prescaler = 9999;
 8003068:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306a:	2300      	movs	r3, #0
  htim14.Init.Period = 4799;
 800306c:	60c2      	str	r2, [r0, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306e:	6083      	str	r3, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003070:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003072:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003074:	f001 fa46 	bl	8004504 <HAL_TIM_Base_Init>
 8003078:	2800      	cmp	r0, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM14_Init+0x24>
  {
    Error_Handler();
 800307c:	f7ff ff64 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003080:	bd10      	pop	{r4, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000140 	.word	0x20000140
 8003088:	40002000 	.word	0x40002000
 800308c:	0000270f 	.word	0x0000270f
 8003090:	000012bf 	.word	0x000012bf

08003094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003094:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM14)
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_TIM_Base_MspInit+0x30>)
 8003098:	6802      	ldr	r2, [r0, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d111      	bne.n	80030c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800309e:	2180      	movs	r1, #128	; 0x80
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_TIM_Base_MspInit+0x34>)
 80030a2:	0049      	lsls	r1, r1, #1
 80030a4:	69da      	ldr	r2, [r3, #28]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80030a6:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030a8:	430a      	orrs	r2, r1
 80030aa:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80030ac:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	400b      	ands	r3, r1
 80030b2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80030b4:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80030b8:	f000 f8e2 	bl	8003280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80030bc:	2013      	movs	r0, #19
 80030be:	f000 f909 	bl	80032d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80030c2:	bd07      	pop	{r0, r1, r2, pc}
 80030c4:	40002000 	.word	0x40002000
 80030c8:	40021000 	.word	0x40021000

080030cc <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030cc:	480b      	ldr	r0, [pc, #44]	; (80030fc <MX_USART1_UART_Init+0x30>)
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_USART1_UART_Init+0x34>)
{
 80030d0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80030d2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80030d4:	23e1      	movs	r3, #225	; 0xe1
 80030d6:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030d8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80030da:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030dc:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030de:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030e0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030e2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030e4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ea:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ee:	f001 fded 	bl	8004ccc <HAL_UART_Init>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d001      	beq.n	80030fa <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80030f6:	f7ff ff27 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	20000188 	.word	0x20000188
 8003100:	40013800 	.word	0x40013800

08003104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003104:	b510      	push	{r4, lr}
 8003106:	0004      	movs	r4, r0
 8003108:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310a:	2214      	movs	r2, #20
 800310c:	2100      	movs	r1, #0
 800310e:	a803      	add	r0, sp, #12
 8003110:	f002 f8b4 	bl	800527c <memset>
  if(uartHandle->Instance==USART1)
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_UART_MspInit+0x70>)
 8003116:	6822      	ldr	r2, [r4, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d128      	bne.n	800316e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_UART_MspInit+0x74>)
 8003120:	01c9      	lsls	r1, r1, #7
 8003122:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 8003126:	430a      	orrs	r2, r1
 8003128:	619a      	str	r2, [r3, #24]
 800312a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 800312e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003130:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8003132:	9201      	str	r2, [sp, #4]
 8003134:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	0289      	lsls	r1, r1, #10
 800313a:	430a      	orrs	r2, r1
 800313c:	615a      	str	r2, [r3, #20]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	400b      	ands	r3, r1
 8003142:	9302      	str	r3, [sp, #8]
 8003144:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003146:	23c0      	movs	r3, #192	; 0xc0
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003150:	3301      	adds	r3, #1
 8003152:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003154:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003156:	3b02      	subs	r3, #2
 8003158:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f000 f923 	bl	80033a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	201b      	movs	r0, #27
 8003162:	0011      	movs	r1, r2
 8003164:	f000 f88c 	bl	8003280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003168:	201b      	movs	r0, #27
 800316a:	f000 f8b3 	bl	80032d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800316e:	b008      	add	sp, #32
 8003170:	bd10      	pop	{r4, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40013800 	.word	0x40013800
 8003178:	40021000 	.word	0x40021000

0800317c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800317c:	480d      	ldr	r0, [pc, #52]	; (80031b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800317e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003180:	f7ff ff6a 	bl	8003058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003186:	490d      	ldr	r1, [pc, #52]	; (80031bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <LoopForever+0xe>)
  movs r3, #0
 800318a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800318c:	e002      	b.n	8003194 <LoopCopyDataInit>

0800318e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800318e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003192:	3304      	adds	r3, #4

08003194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003198:	d3f9      	bcc.n	800318e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800319c:	4c0a      	ldr	r4, [pc, #40]	; (80031c8 <LoopForever+0x16>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a0:	e001      	b.n	80031a6 <LoopFillZerobss>

080031a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a4:	3204      	adds	r2, #4

080031a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031a8:	d3fb      	bcc.n	80031a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031aa:	f002 f8c3 	bl	8005334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031ae:	f7ff fe6f 	bl	8002e90 <main>

080031b2 <LoopForever>:

LoopForever:
    b LoopForever
 80031b2:	e7fe      	b.n	80031b2 <LoopForever>
  ldr   r0, =_estack
 80031b4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80031b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80031c0:	08006434 	.word	0x08006434
  ldr r2, =_sbss
 80031c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80031c8:	20000360 	.word	0x20000360

080031cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031cc:	e7fe      	b.n	80031cc <ADC1_IRQHandler>
	...

080031d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031d4:	20fa      	movs	r0, #250	; 0xfa
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_InitTick+0x3c>)
 80031d8:	0080      	lsls	r0, r0, #2
 80031da:	7819      	ldrb	r1, [r3, #0]
 80031dc:	f7fc ffb2 	bl	8000144 <__udivsi3>
 80031e0:	4c0b      	ldr	r4, [pc, #44]	; (8003210 <HAL_InitTick+0x40>)
 80031e2:	0001      	movs	r1, r0
 80031e4:	6820      	ldr	r0, [r4, #0]
 80031e6:	f7fc ffad 	bl	8000144 <__udivsi3>
 80031ea:	f000 f87f 	bl	80032ec <HAL_SYSTICK_Config>
 80031ee:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80031f0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f2:	2c00      	cmp	r4, #0
 80031f4:	d109      	bne.n	800320a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f6:	2d03      	cmp	r5, #3
 80031f8:	d807      	bhi.n	800320a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031fa:	3802      	subs	r0, #2
 80031fc:	0022      	movs	r2, r4
 80031fe:	0029      	movs	r1, r5
 8003200:	f000 f83e 	bl	8003280 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003204:	0020      	movs	r0, r4
 8003206:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_InitTick+0x44>)
 8003208:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	20000004 	.word	0x20000004
 8003210:	20000000 	.word	0x20000000
 8003214:	20000008 	.word	0x20000008

08003218 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003218:	2310      	movs	r3, #16
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <HAL_Init+0x1c>)
{
 800321c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003220:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003222:	430b      	orrs	r3, r1
 8003224:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	f7ff ffd3 	bl	80031d0 <HAL_InitTick>
  HAL_MspInit();
 800322a:	f7ff fe8f 	bl	8002f4c <HAL_MspInit>
}
 800322e:	2000      	movs	r0, #0
 8003230:	bd10      	pop	{r4, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	40022000 	.word	0x40022000

08003238 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003238:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_IncTick+0x10>)
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_IncTick+0x14>)
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	185b      	adds	r3, r3, r1
 8003242:	6013      	str	r3, [r2, #0]
}
 8003244:	4770      	bx	lr
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20000210 	.word	0x20000210
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003250:	4b01      	ldr	r3, [pc, #4]	; (8003258 <HAL_GetTick+0x8>)
 8003252:	6818      	ldr	r0, [r3, #0]
}
 8003254:	4770      	bx	lr
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	20000210 	.word	0x20000210

0800325c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7ff fff6 	bl	8003250 <HAL_GetTick>
 8003264:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003266:	1c63      	adds	r3, r4, #1
 8003268:	d002      	beq.n	8003270 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_Delay+0x20>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003270:	f7ff ffee 	bl	8003250 <HAL_GetTick>
 8003274:	1b40      	subs	r0, r0, r5
 8003276:	42a0      	cmp	r0, r4
 8003278:	d3fa      	bcc.n	8003270 <HAL_Delay+0x14>
  {
  }
}
 800327a:	bd70      	pop	{r4, r5, r6, pc}
 800327c:	20000004 	.word	0x20000004

08003280 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003280:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003282:	25ff      	movs	r5, #255	; 0xff
 8003284:	2403      	movs	r4, #3
 8003286:	002a      	movs	r2, r5
 8003288:	4004      	ands	r4, r0
 800328a:	00e4      	lsls	r4, r4, #3
 800328c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800328e:	0189      	lsls	r1, r1, #6
 8003290:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003292:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003294:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003296:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003298:	2800      	cmp	r0, #0
 800329a:	db0a      	blt.n	80032b2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800329c:	24c0      	movs	r4, #192	; 0xc0
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_NVIC_SetPriority+0x4c>)
 80032a0:	0880      	lsrs	r0, r0, #2
 80032a2:	0080      	lsls	r0, r0, #2
 80032a4:	18c0      	adds	r0, r0, r3
 80032a6:	00a4      	lsls	r4, r4, #2
 80032a8:	5903      	ldr	r3, [r0, r4]
 80032aa:	4013      	ands	r3, r2
 80032ac:	430b      	orrs	r3, r1
 80032ae:	5103      	str	r3, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80032b0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032b2:	200f      	movs	r0, #15
 80032b4:	4003      	ands	r3, r0
 80032b6:	3b08      	subs	r3, #8
 80032b8:	4805      	ldr	r0, [pc, #20]	; (80032d0 <HAL_NVIC_SetPriority+0x50>)
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	181b      	adds	r3, r3, r0
 80032c0:	69d8      	ldr	r0, [r3, #28]
 80032c2:	4002      	ands	r2, r0
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
 80032c8:	e7f2      	b.n	80032b0 <HAL_NVIC_SetPriority+0x30>
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80032d4:	2800      	cmp	r0, #0
 80032d6:	db05      	blt.n	80032e4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d8:	231f      	movs	r3, #31
 80032da:	4018      	ands	r0, r3
 80032dc:	3b1e      	subs	r3, #30
 80032de:	4083      	lsls	r3, r0
 80032e0:	4a01      	ldr	r2, [pc, #4]	; (80032e8 <HAL_NVIC_EnableIRQ+0x14>)
 80032e2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032e4:	4770      	bx	lr
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	e000e100 	.word	0xe000e100

080032ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	1e43      	subs	r3, r0, #1
 80032f0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d20d      	bcs.n	8003314 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fa:	4a07      	ldr	r2, [pc, #28]	; (8003318 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fc:	4807      	ldr	r0, [pc, #28]	; (800331c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003300:	6a03      	ldr	r3, [r0, #32]
 8003302:	0609      	lsls	r1, r1, #24
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	430b      	orrs	r3, r1
 800330a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003312:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003314:	4770      	bx	lr
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	e000e010 	.word	0xe000e010
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003320:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003322:	1c84      	adds	r4, r0, #2
 8003324:	7fe2      	ldrb	r2, [r4, #31]
{
 8003326:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003328:	2a02      	cmp	r2, #2
 800332a:	d006      	beq.n	800333a <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800332c:	2204      	movs	r2, #4
 800332e:	6382      	str	r2, [r0, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
 8003330:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003332:	2200      	movs	r2, #0
 8003334:	3301      	adds	r3, #1
 8003336:	77da      	strb	r2, [r3, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8003338:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800333a:	6802      	ldr	r2, [r0, #0]
 800333c:	200e      	movs	r0, #14
 800333e:	6811      	ldr	r1, [r2, #0]
 8003340:	4381      	bics	r1, r0
 8003342:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003344:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003346:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003348:	6810      	ldr	r0, [r2, #0]
 800334a:	4388      	bics	r0, r1
 800334c:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800334e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003350:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003352:	4085      	lsls	r5, r0
  return HAL_OK;
 8003354:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003356:	6055      	str	r5, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8003358:	77e1      	strb	r1, [r4, #31]
  return HAL_OK;
 800335a:	e7ea      	b.n	8003332 <HAL_DMA_Abort+0x12>

0800335c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800335c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800335e:	1c84      	adds	r4, r0, #2
 8003360:	7fe3      	ldrb	r3, [r4, #31]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d004      	beq.n	8003370 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003366:	2304      	movs	r3, #4
 8003368:	6383      	str	r3, [r0, #56]	; 0x38

    status = HAL_ERROR;
 800336a:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800336c:	0018      	movs	r0, r3
 800336e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003370:	210e      	movs	r1, #14
 8003372:	6803      	ldr	r3, [r0, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	438a      	bics	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800337a:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800337c:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	4391      	bics	r1, r2
 8003382:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003384:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003386:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003388:	408d      	lsls	r5, r1
 800338a:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800338c:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800338e:	2400      	movs	r4, #0
 8003390:	1883      	adds	r3, r0, r2
 8003392:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8003394:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8003398:	42a2      	cmp	r2, r4
 800339a:	d0e7      	beq.n	800336c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 800339c:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	0023      	movs	r3, r4
 80033a0:	e7e4      	b.n	800336c <HAL_DMA_Abort_IT+0x10>
	...

080033a4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80033a4:	2300      	movs	r3, #0
{
 80033a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a8:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033aa:	680a      	ldr	r2, [r1, #0]
 80033ac:	0014      	movs	r4, r2
 80033ae:	40dc      	lsrs	r4, r3
 80033b0:	d101      	bne.n	80033b6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80033b2:	b007      	add	sp, #28
 80033b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b6:	2501      	movs	r5, #1
 80033b8:	0014      	movs	r4, r2
 80033ba:	409d      	lsls	r5, r3
 80033bc:	402c      	ands	r4, r5
 80033be:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80033c0:	422a      	tst	r2, r5
 80033c2:	d100      	bne.n	80033c6 <HAL_GPIO_Init+0x22>
 80033c4:	e094      	b.n	80034f0 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c6:	684a      	ldr	r2, [r1, #4]
 80033c8:	005f      	lsls	r7, r3, #1
 80033ca:	4694      	mov	ip, r2
 80033cc:	2203      	movs	r2, #3
 80033ce:	4664      	mov	r4, ip
 80033d0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033d2:	2403      	movs	r4, #3
 80033d4:	40bc      	lsls	r4, r7
 80033d6:	43e4      	mvns	r4, r4
 80033d8:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033da:	1e54      	subs	r4, r2, #1
 80033dc:	2c01      	cmp	r4, #1
 80033de:	d82e      	bhi.n	800343e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80033e0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80033e2:	9c01      	ldr	r4, [sp, #4]
 80033e4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033e6:	68cc      	ldr	r4, [r1, #12]
 80033e8:	40bc      	lsls	r4, r7
 80033ea:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80033ec:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80033ee:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f2:	43ac      	bics	r4, r5
 80033f4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f6:	4664      	mov	r4, ip
 80033f8:	0924      	lsrs	r4, r4, #4
 80033fa:	4034      	ands	r4, r6
 80033fc:	409c      	lsls	r4, r3
 80033fe:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003400:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003402:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003404:	9c01      	ldr	r4, [sp, #4]
 8003406:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003408:	688c      	ldr	r4, [r1, #8]
 800340a:	40bc      	lsls	r4, r7
 800340c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800340e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003410:	2a02      	cmp	r2, #2
 8003412:	d116      	bne.n	8003442 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003414:	2507      	movs	r5, #7
 8003416:	260f      	movs	r6, #15
 8003418:	401d      	ands	r5, r3
 800341a:	00ad      	lsls	r5, r5, #2
 800341c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800341e:	08dc      	lsrs	r4, r3, #3
 8003420:	00a4      	lsls	r4, r4, #2
 8003422:	1904      	adds	r4, r0, r4
 8003424:	9402      	str	r4, [sp, #8]
 8003426:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003428:	9603      	str	r6, [sp, #12]
 800342a:	0026      	movs	r6, r4
 800342c:	9c03      	ldr	r4, [sp, #12]
 800342e:	43a6      	bics	r6, r4
 8003430:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003432:	690e      	ldr	r6, [r1, #16]
 8003434:	40ae      	lsls	r6, r5
 8003436:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8003438:	9c02      	ldr	r4, [sp, #8]
 800343a:	6226      	str	r6, [r4, #32]
 800343c:	e001      	b.n	8003442 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343e:	2a03      	cmp	r2, #3
 8003440:	d1df      	bne.n	8003402 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003442:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003444:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003446:	9d01      	ldr	r5, [sp, #4]
 8003448:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800344a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344c:	24c0      	movs	r4, #192	; 0xc0
      GPIOx->MODER = temp;
 800344e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003450:	4662      	mov	r2, ip
 8003452:	02a4      	lsls	r4, r4, #10
 8003454:	4222      	tst	r2, r4
 8003456:	d04b      	beq.n	80034f0 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003458:	2501      	movs	r5, #1
 800345a:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800345c:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003460:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003462:	432c      	orrs	r4, r5
 8003464:	6194      	str	r4, [r2, #24]
 8003466:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003468:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346a:	402a      	ands	r2, r5
 800346c:	9205      	str	r2, [sp, #20]
 800346e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <HAL_GPIO_Init+0x154>)
 8003472:	00a4      	lsls	r4, r4, #2
 8003474:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003476:	220f      	movs	r2, #15
 8003478:	3502      	adds	r5, #2
 800347a:	401d      	ands	r5, r3
 800347c:	00ad      	lsls	r5, r5, #2
 800347e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8003480:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003482:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003484:	2200      	movs	r2, #0
 8003486:	42b8      	cmp	r0, r7
 8003488:	d008      	beq.n	800349c <HAL_GPIO_Init+0xf8>
 800348a:	4f1c      	ldr	r7, [pc, #112]	; (80034fc <HAL_GPIO_Init+0x158>)
 800348c:	3201      	adds	r2, #1
 800348e:	42b8      	cmp	r0, r7
 8003490:	d004      	beq.n	800349c <HAL_GPIO_Init+0xf8>
 8003492:	4f1b      	ldr	r7, [pc, #108]	; (8003500 <HAL_GPIO_Init+0x15c>)
 8003494:	3201      	adds	r2, #1
 8003496:	42b8      	cmp	r0, r7
 8003498:	d000      	beq.n	800349c <HAL_GPIO_Init+0xf8>
 800349a:	3203      	adds	r2, #3
 800349c:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800349e:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a0:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034a2:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 80034a6:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80034a8:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80034aa:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 80034ac:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80034ae:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b0:	02ff      	lsls	r7, r7, #11
 80034b2:	d401      	bmi.n	80034b8 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 80034b4:	0035      	movs	r5, r6
 80034b6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034b8:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80034ba:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80034bc:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80034be:	9d00      	ldr	r5, [sp, #0]
 80034c0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034c2:	02bf      	lsls	r7, r7, #10
 80034c4:	d401      	bmi.n	80034ca <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 80034c6:	0035      	movs	r5, r6
 80034c8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034ca:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80034cc:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80034ce:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80034d0:	9d00      	ldr	r5, [sp, #0]
 80034d2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034d4:	03bf      	lsls	r7, r7, #14
 80034d6:	d401      	bmi.n	80034dc <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 80034d8:	0035      	movs	r5, r6
 80034da:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034dc:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80034de:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80034e0:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80034e2:	9e00      	ldr	r6, [sp, #0]
 80034e4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034e6:	03ff      	lsls	r7, r7, #15
 80034e8:	d401      	bmi.n	80034ee <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 80034ea:	4025      	ands	r5, r4
 80034ec:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80034ee:	6016      	str	r6, [r2, #0]
    position++;
 80034f0:	3301      	adds	r3, #1
 80034f2:	e75a      	b.n	80033aa <HAL_GPIO_Init+0x6>
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40010000 	.word	0x40010000
 80034fc:	48000400 	.word	0x48000400
 8003500:	48000800 	.word	0x48000800
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003508:	2a00      	cmp	r2, #0
 800350a:	d001      	beq.n	8003510 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800350c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800350e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003510:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003512:	e7fc      	b.n	800350e <HAL_GPIO_WritePin+0x6>

08003514 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003514:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003516:	0013      	movs	r3, r2
 8003518:	400b      	ands	r3, r1
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	4391      	bics	r1, r2
 800351e:	430b      	orrs	r3, r1
 8003520:	6183      	str	r3, [r0, #24]
}
 8003522:	4770      	bx	lr

08003524 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003524:	6803      	ldr	r3, [r0, #0]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	0792      	lsls	r2, r2, #30
 800352a:	d501      	bpl.n	8003530 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003530:	2201      	movs	r2, #1
 8003532:	6999      	ldr	r1, [r3, #24]
 8003534:	4211      	tst	r1, r2
 8003536:	d102      	bne.n	800353e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003538:	6999      	ldr	r1, [r3, #24]
 800353a:	430a      	orrs	r2, r1
 800353c:	619a      	str	r2, [r3, #24]
  }
}
 800353e:	4770      	bx	lr

08003540 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003540:	b530      	push	{r4, r5, lr}
 8003542:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003544:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003546:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003548:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800354a:	0589      	lsls	r1, r1, #22
 800354c:	431a      	orrs	r2, r3
 800354e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <I2C_TransferConfig+0x28>)
 8003552:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003554:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003556:	0d64      	lsrs	r4, r4, #21
 8003558:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800355a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800355c:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800355e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003560:	432a      	orrs	r2, r5
 8003562:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003564:	bd30      	pop	{r4, r5, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	03ff63ff 	.word	0x03ff63ff

0800356c <I2C_IsErrorOccurred>:
{
 800356c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800356e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8003570:	6802      	ldr	r2, [r0, #0]
{
 8003572:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8003574:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003576:	2310      	movs	r3, #16
 8003578:	000f      	movs	r7, r1
{
 800357a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800357c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003580:	4219      	tst	r1, r3
 8003582:	d00e      	beq.n	80035a2 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003584:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8003588:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	423a      	tst	r2, r7
 8003592:	d163      	bne.n	800365c <I2C_IsErrorOccurred+0xf0>
 8003594:	9a01      	ldr	r2, [sp, #4]
 8003596:	2a00      	cmp	r2, #0
 8003598:	d031      	beq.n	80035fe <I2C_IsErrorOccurred+0x92>
    error_code |= HAL_I2C_ERROR_AF;
 800359a:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800359c:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800359e:	9b00      	ldr	r3, [sp, #0]
 80035a0:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035a2:	2280      	movs	r2, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80035a4:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035a6:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 80035a8:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035aa:	4213      	tst	r3, r2
 80035ac:	d002      	beq.n	80035b4 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 80035ae:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035b0:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80035b2:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	00d2      	lsls	r2, r2, #3
 80035b8:	4213      	tst	r3, r2
 80035ba:	d003      	beq.n	80035c4 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 80035bc:	2108      	movs	r1, #8
    status = HAL_ERROR;
 80035be:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 80035c0:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035c2:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	0092      	lsls	r2, r2, #2
 80035c8:	4213      	tst	r3, r2
 80035ca:	d04c      	beq.n	8003666 <I2C_IsErrorOccurred+0xfa>
    error_code |= HAL_I2C_ERROR_ARLO;
 80035cc:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035ce:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80035d0:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 80035d2:	0020      	movs	r0, r4
 80035d4:	f7ff ffa6 	bl	8003524 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80035d8:	686b      	ldr	r3, [r5, #4]
 80035da:	4a24      	ldr	r2, [pc, #144]	; (800366c <I2C_IsErrorOccurred+0x100>)
    __HAL_UNLOCK(hi2c);
 80035dc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80035de:	4013      	ands	r3, r2
 80035e0:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 80035e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80035e6:	433b      	orrs	r3, r7
 80035e8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	0023      	movs	r3, r4
 80035ec:	3341      	adds	r3, #65	; 0x41
 80035ee:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	0022      	movs	r2, r4
 80035f2:	2300      	movs	r3, #0
 80035f4:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80035f6:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80035fa:	7023      	strb	r3, [r4, #0]
 80035fc:	e035      	b.n	800366a <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 80035fe:	1c72      	adds	r2, r6, #1
 8003600:	d0c5      	beq.n	800358e <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7ff fe25 	bl	8003250 <HAL_GetTick>
 8003606:	1b40      	subs	r0, r0, r5
 8003608:	42b0      	cmp	r0, r6
 800360a:	d801      	bhi.n	8003610 <I2C_IsErrorOccurred+0xa4>
 800360c:	2e00      	cmp	r6, #0
 800360e:	d1bd      	bne.n	800358c <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8003610:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003612:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8003614:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003616:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003618:	7811      	ldrb	r1, [r2, #0]
 800361a:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800361c:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 800361e:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	0209      	lsls	r1, r1, #8
 8003624:	420a      	tst	r2, r1
 8003626:	d00c      	beq.n	8003642 <I2C_IsErrorOccurred+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800362c:	4210      	tst	r0, r2
 800362e:	d108      	bne.n	8003642 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003630:	4661      	mov	r1, ip
 8003632:	2920      	cmp	r1, #32
 8003634:	d005      	beq.n	8003642 <I2C_IsErrorOccurred+0xd6>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	430a      	orrs	r2, r1
 800363a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800363c:	f7ff fe08 	bl	8003250 <HAL_GetTick>
 8003640:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	423b      	tst	r3, r7
 8003648:	d1a0      	bne.n	800358c <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800364a:	f7ff fe01 	bl	8003250 <HAL_GetTick>
 800364e:	1b40      	subs	r0, r0, r5
 8003650:	2819      	cmp	r0, #25
 8003652:	d9f6      	bls.n	8003642 <I2C_IsErrorOccurred+0xd6>
              status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003656:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	e797      	b.n	800358c <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 800365c:	9a01      	ldr	r2, [sp, #4]
 800365e:	2a00      	cmp	r2, #0
 8003660:	d19b      	bne.n	800359a <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003662:	61df      	str	r7, [r3, #28]
 8003664:	e799      	b.n	800359a <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8003666:	2800      	cmp	r0, #0
 8003668:	d1b3      	bne.n	80035d2 <I2C_IsErrorOccurred+0x66>
}
 800366a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800366c:	fe00e800 	.word	0xfe00e800

08003670 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	0004      	movs	r4, r0
 8003674:	000d      	movs	r5, r1
 8003676:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003678:	2702      	movs	r7, #2
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	423b      	tst	r3, r7
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003682:	2000      	movs	r0, #0
}
 8003684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003686:	0032      	movs	r2, r6
 8003688:	0029      	movs	r1, r5
 800368a:	0020      	movs	r0, r4
 800368c:	f7ff ff6e 	bl	800356c <I2C_IsErrorOccurred>
 8003690:	2800      	cmp	r0, #0
 8003692:	d118      	bne.n	80036c6 <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8003694:	1c6b      	adds	r3, r5, #1
 8003696:	d0f0      	beq.n	800367a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003698:	f7ff fdda 	bl	8003250 <HAL_GetTick>
 800369c:	1b80      	subs	r0, r0, r6
 800369e:	42a8      	cmp	r0, r5
 80036a0:	d801      	bhi.n	80036a6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	d1e9      	bne.n	800367a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	001a      	movs	r2, r3
 80036ac:	403a      	ands	r2, r7
 80036ae:	423b      	tst	r3, r7
 80036b0:	d1e3      	bne.n	800367a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b2:	2120      	movs	r1, #32
 80036b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80036bc:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80036be:	3341      	adds	r3, #65	; 0x41
 80036c0:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80036c4:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80036c6:	2001      	movs	r0, #1
 80036c8:	e7dc      	b.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080036ca <I2C_WaitOnFlagUntilTimeout>:
{
 80036ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036cc:	0004      	movs	r4, r0
 80036ce:	000d      	movs	r5, r1
 80036d0:	0017      	movs	r7, r2
 80036d2:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	6993      	ldr	r3, [r2, #24]
 80036d8:	402b      	ands	r3, r5
 80036da:	1b5b      	subs	r3, r3, r5
 80036dc:	4259      	negs	r1, r3
 80036de:	414b      	adcs	r3, r1
 80036e0:	42bb      	cmp	r3, r7
 80036e2:	d001      	beq.n	80036e8 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80036e4:	2000      	movs	r0, #0
 80036e6:	e01f      	b.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	1c73      	adds	r3, r6, #1
 80036ea:	d0f4      	beq.n	80036d6 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7ff fdb0 	bl	8003250 <HAL_GetTick>
 80036f0:	9b06      	ldr	r3, [sp, #24]
 80036f2:	1ac0      	subs	r0, r0, r3
 80036f4:	42b0      	cmp	r0, r6
 80036f6:	d801      	bhi.n	80036fc <I2C_WaitOnFlagUntilTimeout+0x32>
 80036f8:	2e00      	cmp	r6, #0
 80036fa:	d1eb      	bne.n	80036d4 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	402b      	ands	r3, r5
 8003702:	1b5b      	subs	r3, r3, r5
 8003704:	425a      	negs	r2, r3
 8003706:	4153      	adcs	r3, r2
 8003708:	42bb      	cmp	r3, r7
 800370a:	d1e3      	bne.n	80036d4 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	2220      	movs	r2, #32
 800370e:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8003710:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	4313      	orrs	r3, r2
 8003714:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003716:	0023      	movs	r3, r4
 8003718:	3341      	adds	r3, #65	; 0x41
 800371a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	0022      	movs	r2, r4
 800371e:	2300      	movs	r3, #0
 8003720:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8003722:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8003726:	7023      	strb	r3, [r4, #0]
}
 8003728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800372a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372c:	0004      	movs	r4, r0
 800372e:	000e      	movs	r6, r1
 8003730:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003732:	2520      	movs	r5, #32
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	422b      	tst	r3, r5
 800373a:	d001      	beq.n	8003740 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800373c:	2000      	movs	r0, #0
}
 800373e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003740:	003a      	movs	r2, r7
 8003742:	0031      	movs	r1, r6
 8003744:	0020      	movs	r0, r4
 8003746:	f7ff ff11 	bl	800356c <I2C_IsErrorOccurred>
 800374a:	2800      	cmp	r0, #0
 800374c:	d115      	bne.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7ff fd7f 	bl	8003250 <HAL_GetTick>
 8003752:	1bc0      	subs	r0, r0, r7
 8003754:	42b0      	cmp	r0, r6
 8003756:	d801      	bhi.n	800375c <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003758:	2e00      	cmp	r6, #0
 800375a:	d1eb      	bne.n	8003734 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	001a      	movs	r2, r3
 8003762:	402a      	ands	r2, r5
 8003764:	422b      	tst	r3, r5
 8003766:	d1e5      	bne.n	8003734 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800376a:	432b      	orrs	r3, r5
 800376c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800376e:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003770:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003772:	3341      	adds	r3, #65	; 0x41
 8003774:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003778:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800377a:	2001      	movs	r0, #1
 800377c:	e7df      	b.n	800373e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
	...

08003780 <HAL_I2C_Init>:
{
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003784:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003786:	2c00      	cmp	r4, #0
 8003788:	d03f      	beq.n	800380a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378a:	0025      	movs	r5, r4
 800378c:	3541      	adds	r5, #65	; 0x41
 800378e:	782b      	ldrb	r3, [r5, #0]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003796:	0023      	movs	r3, r4
 8003798:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800379a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800379c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800379e:	f7ff faf5 	bl	8002d8c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80037a4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037aa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ae:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80037b0:	438a      	bics	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037b4:	491a      	ldr	r1, [pc, #104]	; (8003820 <HAL_I2C_Init+0xa0>)
 80037b6:	6862      	ldr	r2, [r4, #4]
 80037b8:	400a      	ands	r2, r1
 80037ba:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	4919      	ldr	r1, [pc, #100]	; (8003824 <HAL_I2C_Init+0xa4>)
 80037c0:	400a      	ands	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c4:	2801      	cmp	r0, #1
 80037c6:	d121      	bne.n	800380c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	0212      	lsls	r2, r2, #8
 80037cc:	4332      	orrs	r2, r6
 80037ce:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037d0:	6858      	ldr	r0, [r3, #4]
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <HAL_I2C_Init+0xa8>)
 80037d4:	4302      	orrs	r2, r0
 80037d6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037d8:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037da:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037dc:	400a      	ands	r2, r1
 80037de:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e0:	6961      	ldr	r1, [r4, #20]
 80037e2:	6922      	ldr	r2, [r4, #16]
 80037e4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037e6:	69a1      	ldr	r1, [r4, #24]
 80037e8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037ea:	430a      	orrs	r2, r1
 80037ec:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ee:	6a21      	ldr	r1, [r4, #32]
 80037f0:	69e2      	ldr	r2, [r4, #28]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80037f6:	2201      	movs	r2, #1
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003802:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003804:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	3442      	adds	r4, #66	; 0x42
 8003808:	7020      	strb	r0, [r4, #0]
}
 800380a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800380c:	2284      	movs	r2, #132	; 0x84
 800380e:	0212      	lsls	r2, r2, #8
 8003810:	4332      	orrs	r2, r6
 8003812:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003814:	2802      	cmp	r0, #2
 8003816:	d1db      	bne.n	80037d0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	e7d7      	b.n	80037d0 <HAL_I2C_Init+0x50>
 8003820:	f0ffffff 	.word	0xf0ffffff
 8003824:	ffff7fff 	.word	0xffff7fff
 8003828:	02008000 	.word	0x02008000

0800382c <HAL_I2C_Mem_Write>:
{
 800382c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	9304      	str	r3, [sp, #16]
 8003832:	ab0e      	add	r3, sp, #56	; 0x38
 8003834:	9203      	str	r2, [sp, #12]
 8003836:	cb04      	ldmia	r3!, {r2}
 8003838:	0004      	movs	r4, r0
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	9205      	str	r2, [sp, #20]
 800383e:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003840:	0003      	movs	r3, r0
 8003842:	3341      	adds	r3, #65	; 0x41
 8003844:	9307      	str	r3, [sp, #28]
 8003846:	781b      	ldrb	r3, [r3, #0]
{
 8003848:	000f      	movs	r7, r1
    return HAL_BUSY;
 800384a:	2002      	movs	r0, #2
{
 800384c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800384e:	2b20      	cmp	r3, #32
 8003850:	d108      	bne.n	8003864 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 8003852:	2a00      	cmp	r2, #0
 8003854:	d002      	beq.n	800385c <HAL_I2C_Mem_Write+0x30>
 8003856:	9b06      	ldr	r3, [sp, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003862:	2001      	movs	r0, #1
}
 8003864:	b009      	add	sp, #36	; 0x24
 8003866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003868:	0023      	movs	r3, r4
 800386a:	3340      	adds	r3, #64	; 0x40
 800386c:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800386e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8003870:	2a01      	cmp	r2, #1
 8003872:	d0f7      	beq.n	8003864 <HAL_I2C_Mem_Write+0x38>
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003878:	f7ff fcea 	bl	8003250 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800387c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800387e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003880:	9000      	str	r0, [sp, #0]
 8003882:	2319      	movs	r3, #25
 8003884:	2201      	movs	r2, #1
 8003886:	0020      	movs	r0, r4
 8003888:	0209      	lsls	r1, r1, #8
 800388a:	f7ff ff1e 	bl	80036ca <I2C_WaitOnFlagUntilTimeout>
 800388e:	2800      	cmp	r0, #0
 8003890:	d1e7      	bne.n	8003862 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003892:	2321      	movs	r3, #33	; 0x21
 8003894:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003896:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003898:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800389a:	0023      	movs	r3, r4
 800389c:	3342      	adds	r3, #66	; 0x42
 800389e:	9307      	str	r3, [sp, #28]
 80038a0:	2340      	movs	r3, #64	; 0x40
 80038a2:	9a07      	ldr	r2, [sp, #28]
 80038a4:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 80038a6:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80038aa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80038ac:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 80038ae:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80038b0:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038b2:	466b      	mov	r3, sp
 80038b4:	7c1a      	ldrb	r2, [r3, #16]
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_I2C_Mem_Write+0x1bc>)
 80038b8:	0020      	movs	r0, r4
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	045b      	lsls	r3, r3, #17
 80038c0:	f7ff fe3e 	bl	8003540 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c4:	002a      	movs	r2, r5
 80038c6:	0031      	movs	r1, r6
 80038c8:	0020      	movs	r0, r4
 80038ca:	f7ff fed1 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d129      	bne.n	8003926 <HAL_I2C_Mem_Write+0xfa>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038d2:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038d4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038d6:	2a01      	cmp	r2, #1
 80038d8:	d116      	bne.n	8003908 <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038da:	466a      	mov	r2, sp
 80038dc:	7b12      	ldrb	r2, [r2, #12]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038e0:	0033      	movs	r3, r6
 80038e2:	2200      	movs	r2, #0
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	0020      	movs	r0, r4
 80038e8:	9500      	str	r5, [sp, #0]
 80038ea:	f7ff feee 	bl	80036ca <I2C_WaitOnFlagUntilTimeout>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d119      	bne.n	8003926 <HAL_I2C_Mem_Write+0xfa>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	d81a      	bhi.n	800392e <HAL_I2C_Mem_Write+0x102>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038f8:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 80038fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038fc:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 80038fe:	b292      	uxth	r2, r2
 8003900:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	9000      	str	r0, [sp, #0]
 8003906:	e017      	b.n	8003938 <HAL_I2C_Mem_Write+0x10c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003908:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390a:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800390c:	0a12      	lsrs	r2, r2, #8
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003910:	0020      	movs	r0, r4
 8003912:	002a      	movs	r2, r5
 8003914:	f7ff feac 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 8003918:	2800      	cmp	r0, #0
 800391a:	d104      	bne.n	8003926 <HAL_I2C_Mem_Write+0xfa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800391c:	466b      	mov	r3, sp
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	7b1b      	ldrb	r3, [r3, #12]
 8003922:	6293      	str	r3, [r2, #40]	; 0x28
 8003924:	e7dc      	b.n	80038e0 <HAL_I2C_Mem_Write+0xb4>
      __HAL_UNLOCK(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	3440      	adds	r4, #64	; 0x40
 800392a:	7023      	strb	r3, [r4, #0]
 800392c:	e799      	b.n	8003862 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800392e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003930:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003932:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003934:	045b      	lsls	r3, r3, #17
 8003936:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003938:	0039      	movs	r1, r7
 800393a:	0020      	movs	r0, r4
 800393c:	f7ff fe00 	bl	8003540 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003940:	002a      	movs	r2, r5
 8003942:	0031      	movs	r1, r6
 8003944:	0020      	movs	r0, r4
 8003946:	f7ff fe93 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 800394a:	2800      	cmp	r0, #0
 800394c:	d000      	beq.n	8003950 <HAL_I2C_Mem_Write+0x124>
 800394e:	e788      	b.n	8003862 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003956:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003958:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800395a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800395c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800395e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003960:	3b01      	subs	r3, #1
 8003962:	b29b      	uxth	r3, r3
 8003964:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003966:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003968:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800396a:	b292      	uxth	r2, r2
 800396c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <HAL_I2C_Mem_Write+0x176>
 8003972:	2a00      	cmp	r2, #0
 8003974:	d115      	bne.n	80039a2 <HAL_I2C_Mem_Write+0x176>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003976:	0033      	movs	r3, r6
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	0020      	movs	r0, r4
 800397c:	9500      	str	r5, [sp, #0]
 800397e:	f7ff fea4 	bl	80036ca <I2C_WaitOnFlagUntilTimeout>
 8003982:	2800      	cmp	r0, #0
 8003984:	d000      	beq.n	8003988 <HAL_I2C_Mem_Write+0x15c>
 8003986:	e76c      	b.n	8003862 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003988:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800398a:	2bff      	cmp	r3, #255	; 0xff
 800398c:	d923      	bls.n	80039d6 <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800398e:	23ff      	movs	r3, #255	; 0xff
 8003990:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	22ff      	movs	r2, #255	; 0xff
 8003996:	9000      	str	r0, [sp, #0]
 8003998:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800399a:	0039      	movs	r1, r7
 800399c:	0020      	movs	r0, r4
 800399e:	f7ff fdcf 	bl	8003540 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80039a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1cb      	bne.n	8003940 <HAL_I2C_Mem_Write+0x114>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a8:	002a      	movs	r2, r5
 80039aa:	0031      	movs	r1, r6
 80039ac:	0020      	movs	r0, r4
 80039ae:	f7ff febc 	bl	800372a <I2C_WaitOnSTOPFlagUntilTimeout>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d000      	beq.n	80039b8 <HAL_I2C_Mem_Write+0x18c>
 80039b6:	e754      	b.n	8003862 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b8:	2120      	movs	r1, #32
 80039ba:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80039bc:	4d0b      	ldr	r5, [pc, #44]	; (80039ec <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039be:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	402a      	ands	r2, r5
 80039c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	0023      	movs	r3, r4
 80039c8:	3341      	adds	r3, #65	; 0x41
 80039ca:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039cc:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 80039ce:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d0:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80039d2:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80039d4:	e746      	b.n	8003864 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039d6:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80039d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039da:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80039dc:	b292      	uxth	r2, r2
 80039de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	9000      	str	r0, [sp, #0]
 80039e4:	e7d9      	b.n	800399a <HAL_I2C_Mem_Write+0x16e>
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	80002000 	.word	0x80002000
 80039ec:	fe00e800 	.word	0xfe00e800

080039f0 <HAL_I2C_Mem_Read>:
{
 80039f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	9304      	str	r3, [sp, #16]
 80039f6:	ab0e      	add	r3, sp, #56	; 0x38
 80039f8:	9203      	str	r2, [sp, #12]
 80039fa:	cb04      	ldmia	r3!, {r2}
 80039fc:	0004      	movs	r4, r0
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	9205      	str	r2, [sp, #20]
 8003a02:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a04:	0003      	movs	r3, r0
 8003a06:	3341      	adds	r3, #65	; 0x41
 8003a08:	9307      	str	r3, [sp, #28]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
{
 8003a0c:	000f      	movs	r7, r1
    return HAL_BUSY;
 8003a0e:	2002      	movs	r0, #2
{
 8003a10:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d108      	bne.n	8003a28 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 8003a16:	2a00      	cmp	r2, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x30>
 8003a1a:	9b06      	ldr	r3, [sp, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d105      	bne.n	8003a2c <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003a26:	2001      	movs	r0, #1
}
 8003a28:	b009      	add	sp, #36	; 0x24
 8003a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003a2c:	0023      	movs	r3, r4
 8003a2e:	3340      	adds	r3, #64	; 0x40
 8003a30:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8003a32:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8003a34:	2a01      	cmp	r2, #1
 8003a36:	d0f7      	beq.n	8003a28 <HAL_I2C_Mem_Read+0x38>
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003a3c:	f7ff fc08 	bl	8003250 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	2319      	movs	r3, #25
 8003a44:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003a46:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	0020      	movs	r0, r4
 8003a4c:	0209      	lsls	r1, r1, #8
 8003a4e:	f7ff fe3c 	bl	80036ca <I2C_WaitOnFlagUntilTimeout>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d1e7      	bne.n	8003a26 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a56:	2222      	movs	r2, #34	; 0x22
 8003a58:	9907      	ldr	r1, [sp, #28]
 8003a5a:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a5c:	0022      	movs	r2, r4
 8003a5e:	3242      	adds	r2, #66	; 0x42
 8003a60:	9207      	str	r2, [sp, #28]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	9907      	ldr	r1, [sp, #28]
 8003a66:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 8003a68:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003a6c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a6e:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a70:	494f      	ldr	r1, [pc, #316]	; (8003bb0 <HAL_I2C_Mem_Read+0x1c0>)
    hi2c->XferCount = Size;
 8003a72:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a74:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8003a76:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a78:	7c12      	ldrb	r2, [r2, #16]
 8003a7a:	0020      	movs	r0, r4
 8003a7c:	9100      	str	r1, [sp, #0]
 8003a7e:	0039      	movs	r1, r7
 8003a80:	f7ff fd5e 	bl	8003540 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a84:	002a      	movs	r2, r5
 8003a86:	0031      	movs	r1, r6
 8003a88:	0020      	movs	r0, r4
 8003a8a:	f7ff fdf1 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d12a      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0xf8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a92:	9a04      	ldr	r2, [sp, #16]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a94:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a96:	2a01      	cmp	r2, #1
 8003a98:	d117      	bne.n	8003aca <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9a:	466a      	mov	r2, sp
 8003a9c:	7b12      	ldrb	r2, [r2, #12]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa0:	0033      	movs	r3, r6
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	9500      	str	r5, [sp, #0]
 8003aaa:	f7ff fe0e 	bl	80036ca <I2C_WaitOnFlagUntilTimeout>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d11a      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0xf8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ab4:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <HAL_I2C_Mem_Read+0x1c4>)
 8003ab6:	2aff      	cmp	r2, #255	; 0xff
 8003ab8:	d81a      	bhi.n	8003af0 <HAL_I2C_Mem_Read+0x100>
      hi2c->XferSize = hi2c->XferCount;
 8003aba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003abc:	b292      	uxth	r2, r2
 8003abe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	049b      	lsls	r3, r3, #18
 8003ac8:	e017      	b.n	8003afa <HAL_I2C_Mem_Read+0x10a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aca:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003acc:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ace:	0a12      	lsrs	r2, r2, #8
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad2:	0020      	movs	r0, r4
 8003ad4:	002a      	movs	r2, r5
 8003ad6:	f7ff fdcb 	bl	8003670 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ade:	466b      	mov	r3, sp
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	7b1b      	ldrb	r3, [r3, #12]
 8003ae4:	6293      	str	r3, [r2, #40]	; 0x28
 8003ae6:	e7db      	b.n	8003aa0 <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	3440      	adds	r4, #64	; 0x40
 8003aec:	7023      	strb	r3, [r4, #0]
 8003aee:	e79a      	b.n	8003a26 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af0:	22ff      	movs	r2, #255	; 0xff
 8003af2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003afa:	0039      	movs	r1, r7
 8003afc:	0020      	movs	r0, r4
 8003afe:	f7ff fd1f 	bl	8003540 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b02:	0033      	movs	r3, r6
 8003b04:	2200      	movs	r2, #0
 8003b06:	2104      	movs	r1, #4
 8003b08:	0020      	movs	r0, r4
 8003b0a:	9500      	str	r5, [sp, #0]
 8003b0c:	f7ff fddd 	bl	80036ca <I2C_WaitOnFlagUntilTimeout>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d000      	beq.n	8003b16 <HAL_I2C_Mem_Read+0x126>
 8003b14:	e787      	b.n	8003a26 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b1c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003b20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003b22:	3301      	adds	r3, #1
 8003b24:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b28:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b32:	b292      	uxth	r2, r2
 8003b34:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_I2C_Mem_Read+0x17a>
 8003b3a:	2a00      	cmp	r2, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_I2C_Mem_Read+0x17a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b3e:	0033      	movs	r3, r6
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	0020      	movs	r0, r4
 8003b44:	9500      	str	r5, [sp, #0]
 8003b46:	f7ff fdc0 	bl	80036ca <I2C_WaitOnFlagUntilTimeout>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d000      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x160>
 8003b4e:	e76a      	b.n	8003a26 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b52:	2bff      	cmp	r3, #255	; 0xff
 8003b54:	d923      	bls.n	8003b9e <HAL_I2C_Mem_Read+0x1ae>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b56:	23ff      	movs	r3, #255	; 0xff
 8003b58:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	22ff      	movs	r2, #255	; 0xff
 8003b5e:	9000      	str	r0, [sp, #0]
 8003b60:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b62:	0039      	movs	r1, r7
 8003b64:	0020      	movs	r0, r4
 8003b66:	f7ff fceb 	bl	8003540 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003b6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1c8      	bne.n	8003b02 <HAL_I2C_Mem_Read+0x112>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b70:	002a      	movs	r2, r5
 8003b72:	0031      	movs	r1, r6
 8003b74:	0020      	movs	r0, r4
 8003b76:	f7ff fdd8 	bl	800372a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d000      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x190>
 8003b7e:	e752      	b.n	8003a26 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b80:	2120      	movs	r1, #32
 8003b82:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003b84:	4d0c      	ldr	r5, [pc, #48]	; (8003bb8 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b86:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	402a      	ands	r2, r5
 8003b8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	0023      	movs	r3, r4
 8003b90:	3341      	adds	r3, #65	; 0x41
 8003b92:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b94:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 8003b96:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b98:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003b9a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003b9c:	e744      	b.n	8003a28 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b9e:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8003ba0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ba2:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	9000      	str	r0, [sp, #0]
 8003bac:	e7d9      	b.n	8003b62 <HAL_I2C_Mem_Read+0x172>
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	80002000 	.word	0x80002000
 8003bb4:	80002400 	.word	0x80002400
 8003bb8:	fe00e800 	.word	0xfe00e800

08003bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	0004      	movs	r4, r0
 8003bc0:	3441      	adds	r4, #65	; 0x41
 8003bc2:	7822      	ldrb	r2, [r4, #0]
{
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003bc8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	b2d6      	uxtb	r6, r2
 8003bcc:	2a20      	cmp	r2, #32
 8003bce:	d118      	bne.n	8003c02 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003bd0:	001d      	movs	r5, r3
 8003bd2:	3540      	adds	r5, #64	; 0x40
 8003bd4:	782a      	ldrb	r2, [r5, #0]
 8003bd6:	2a01      	cmp	r2, #1
 8003bd8:	d013      	beq.n	8003c02 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bda:	2224      	movs	r2, #36	; 0x24
 8003bdc:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3a23      	subs	r2, #35	; 0x23
 8003be2:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003be4:	4807      	ldr	r0, [pc, #28]	; (8003c04 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003be6:	4391      	bics	r1, r2
 8003be8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8003bee:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	4339      	orrs	r1, r7
 8003bf6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003c00:	7028      	strb	r0, [r5, #0]
  }
}
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c04:	ffffefff 	.word	0xffffefff

08003c08 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	0002      	movs	r2, r0
{
 8003c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0c:	3241      	adds	r2, #65	; 0x41
 8003c0e:	7814      	ldrb	r4, [r2, #0]
{
 8003c10:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c12:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c16:	2c20      	cmp	r4, #32
 8003c18:	d117      	bne.n	8003c4a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003c1a:	001c      	movs	r4, r3
 8003c1c:	3440      	adds	r4, #64	; 0x40
 8003c1e:	7826      	ldrb	r6, [r4, #0]
 8003c20:	2e01      	cmp	r6, #1
 8003c22:	d012      	beq.n	8003c4a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c24:	3022      	adds	r0, #34	; 0x22
 8003c26:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3823      	subs	r0, #35	; 0x23
 8003c2c:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8003c2e:	4f07      	ldr	r7, [pc, #28]	; (8003c4c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003c30:	4386      	bics	r6, r0
 8003c32:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003c34:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8003c36:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003c38:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003c3a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8003c3c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	4308      	orrs	r0, r1
 8003c42:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8003c44:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003c46:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003c48:	7020      	strb	r0, [r4, #0]
  }
}
 8003c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c4c:	fffff0ff 	.word	0xfffff0ff

08003c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c52:	0004      	movs	r4, r0
 8003c54:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d045      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	6803      	ldr	r3, [r0, #0]
 8003c5c:	07db      	lsls	r3, r3, #31
 8003c5e:	d42f      	bmi.n	8003cc0 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	079b      	lsls	r3, r3, #30
 8003c64:	d500      	bpl.n	8003c68 <HAL_RCC_OscConfig+0x18>
 8003c66:	e081      	b.n	8003d6c <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	071b      	lsls	r3, r3, #28
 8003c6c:	d500      	bpl.n	8003c70 <HAL_RCC_OscConfig+0x20>
 8003c6e:	e0bc      	b.n	8003dea <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	075b      	lsls	r3, r3, #29
 8003c74:	d500      	bpl.n	8003c78 <HAL_RCC_OscConfig+0x28>
 8003c76:	e0df      	b.n	8003e38 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	06db      	lsls	r3, r3, #27
 8003c7c:	d51a      	bpl.n	8003cb4 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c7e:	6962      	ldr	r2, [r4, #20]
 8003c80:	2304      	movs	r3, #4
 8003c82:	4db4      	ldr	r5, [pc, #720]	; (8003f54 <HAL_RCC_OscConfig+0x304>)
 8003c84:	2a01      	cmp	r2, #1
 8003c86:	d000      	beq.n	8003c8a <HAL_RCC_OscConfig+0x3a>
 8003c88:	e148      	b.n	8003f1c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c8a:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c8c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003c92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003c94:	431a      	orrs	r2, r3
 8003c96:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003c98:	f7ff fada 	bl	8003250 <HAL_GetTick>
 8003c9c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003ca0:	423b      	tst	r3, r7
 8003ca2:	d100      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x56>
 8003ca4:	e133      	b.n	8003f0e <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ca6:	21f8      	movs	r1, #248	; 0xf8
 8003ca8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003caa:	69a3      	ldr	r3, [r4, #24]
 8003cac:	438a      	bics	r2, r1
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb4:	6a23      	ldr	r3, [r4, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d000      	beq.n	8003cbc <HAL_RCC_OscConfig+0x6c>
 8003cba:	e157      	b.n	8003f6c <HAL_RCC_OscConfig+0x31c>
        }
      }
    }
  }

  return HAL_OK;
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e02a      	b.n	8003d16 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cc0:	220c      	movs	r2, #12
 8003cc2:	4da4      	ldr	r5, [pc, #656]	; (8003f54 <HAL_RCC_OscConfig+0x304>)
 8003cc4:	686b      	ldr	r3, [r5, #4]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d006      	beq.n	8003cda <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ccc:	686b      	ldr	r3, [r5, #4]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d10a      	bne.n	8003cea <HAL_RCC_OscConfig+0x9a>
 8003cd4:	686b      	ldr	r3, [r5, #4]
 8003cd6:	03db      	lsls	r3, r3, #15
 8003cd8:	d507      	bpl.n	8003cea <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cda:	682b      	ldr	r3, [r5, #0]
 8003cdc:	039b      	lsls	r3, r3, #14
 8003cde:	d5bf      	bpl.n	8003c60 <HAL_RCC_OscConfig+0x10>
 8003ce0:	6863      	ldr	r3, [r4, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1bc      	bne.n	8003c60 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cea:	6863      	ldr	r3, [r4, #4]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d114      	bne.n	8003d1a <HAL_RCC_OscConfig+0xca>
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	682a      	ldr	r2, [r5, #0]
 8003cf4:	025b      	lsls	r3, r3, #9
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cfa:	f7ff faa9 	bl	8003250 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003d00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	02bf      	lsls	r7, r7, #10
 8003d04:	682b      	ldr	r3, [r5, #0]
 8003d06:	423b      	tst	r3, r7
 8003d08:	d1aa      	bne.n	8003c60 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d0a:	f7ff faa1 	bl	8003250 <HAL_GetTick>
 8003d0e:	1b80      	subs	r0, r0, r6
 8003d10:	2864      	cmp	r0, #100	; 0x64
 8003d12:	d9f7      	bls.n	8003d04 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8003d14:	2003      	movs	r0, #3
}
 8003d16:	b005      	add	sp, #20
 8003d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <HAL_RCC_OscConfig+0xfc>
 8003d1e:	682b      	ldr	r3, [r5, #0]
 8003d20:	4a8d      	ldr	r2, [pc, #564]	; (8003f58 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d24:	4013      	ands	r3, r2
 8003d26:	602b      	str	r3, [r5, #0]
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	4a8c      	ldr	r2, [pc, #560]	; (8003f5c <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2c:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2e:	4013      	ands	r3, r2
 8003d30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d32:	f7ff fa8d 	bl	8003250 <HAL_GetTick>
 8003d36:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	423b      	tst	r3, r7
 8003d3c:	d100      	bne.n	8003d40 <HAL_RCC_OscConfig+0xf0>
 8003d3e:	e78f      	b.n	8003c60 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d40:	f7ff fa86 	bl	8003250 <HAL_GetTick>
 8003d44:	1b80      	subs	r0, r0, r6
 8003d46:	2864      	cmp	r0, #100	; 0x64
 8003d48:	d9f6      	bls.n	8003d38 <HAL_RCC_OscConfig+0xe8>
 8003d4a:	e7e3      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0x10c>
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	682a      	ldr	r2, [r5, #0]
 8003d54:	02db      	lsls	r3, r3, #11
 8003d56:	4313      	orrs	r3, r2
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	e7c9      	b.n	8003cf0 <HAL_RCC_OscConfig+0xa0>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	4a7e      	ldr	r2, [pc, #504]	; (8003f58 <HAL_RCC_OscConfig+0x308>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	4a7d      	ldr	r2, [pc, #500]	; (8003f5c <HAL_RCC_OscConfig+0x30c>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	e7c5      	b.n	8003cf8 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d6c:	220c      	movs	r2, #12
 8003d6e:	4d79      	ldr	r5, [pc, #484]	; (8003f54 <HAL_RCC_OscConfig+0x304>)
 8003d70:	686b      	ldr	r3, [r5, #4]
 8003d72:	4213      	tst	r3, r2
 8003d74:	d006      	beq.n	8003d84 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d76:	686b      	ldr	r3, [r5, #4]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d110      	bne.n	8003da0 <HAL_RCC_OscConfig+0x150>
 8003d7e:	686b      	ldr	r3, [r5, #4]
 8003d80:	03db      	lsls	r3, r3, #15
 8003d82:	d40d      	bmi.n	8003da0 <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	079b      	lsls	r3, r3, #30
 8003d88:	d502      	bpl.n	8003d90 <HAL_RCC_OscConfig+0x140>
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d1aa      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	21f8      	movs	r1, #248	; 0xf8
 8003d92:	682a      	ldr	r2, [r5, #0]
 8003d94:	6923      	ldr	r3, [r4, #16]
 8003d96:	438a      	bics	r2, r1
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	e763      	b.n	8003c68 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da0:	68e2      	ldr	r2, [r4, #12]
 8003da2:	2301      	movs	r3, #1
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d00f      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8003da8:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003daa:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003dac:	4313      	orrs	r3, r2
 8003dae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003db0:	f7ff fa4e 	bl	8003250 <HAL_GetTick>
 8003db4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	423b      	tst	r3, r7
 8003dba:	d1e9      	bne.n	8003d90 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dbc:	f7ff fa48 	bl	8003250 <HAL_GetTick>
 8003dc0:	1b80      	subs	r0, r0, r6
 8003dc2:	2802      	cmp	r0, #2
 8003dc4:	d9f7      	bls.n	8003db6 <HAL_RCC_OscConfig+0x166>
 8003dc6:	e7a5      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8003dc8:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003dcc:	439a      	bics	r2, r3
 8003dce:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003dd0:	f7ff fa3e 	bl	8003250 <HAL_GetTick>
 8003dd4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	423b      	tst	r3, r7
 8003dda:	d100      	bne.n	8003dde <HAL_RCC_OscConfig+0x18e>
 8003ddc:	e744      	b.n	8003c68 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dde:	f7ff fa37 	bl	8003250 <HAL_GetTick>
 8003de2:	1b80      	subs	r0, r0, r6
 8003de4:	2802      	cmp	r0, #2
 8003de6:	d9f6      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x186>
 8003de8:	e794      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dea:	69e2      	ldr	r2, [r4, #28]
 8003dec:	2301      	movs	r3, #1
 8003dee:	4d59      	ldr	r5, [pc, #356]	; (8003f54 <HAL_RCC_OscConfig+0x304>)
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d010      	beq.n	8003e16 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8003df4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003dfc:	f7ff fa28 	bl	8003250 <HAL_GetTick>
 8003e00:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e04:	423b      	tst	r3, r7
 8003e06:	d000      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1ba>
 8003e08:	e732      	b.n	8003c70 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7ff fa21 	bl	8003250 <HAL_GetTick>
 8003e0e:	1b80      	subs	r0, r0, r6
 8003e10:	2802      	cmp	r0, #2
 8003e12:	d9f6      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1b2>
 8003e14:	e77e      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8003e16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003e1a:	439a      	bics	r2, r3
 8003e1c:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003e1e:	f7ff fa17 	bl	8003250 <HAL_GetTick>
 8003e22:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e26:	423b      	tst	r3, r7
 8003e28:	d100      	bne.n	8003e2c <HAL_RCC_OscConfig+0x1dc>
 8003e2a:	e721      	b.n	8003c70 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2c:	f7ff fa10 	bl	8003250 <HAL_GetTick>
 8003e30:	1b80      	subs	r0, r0, r6
 8003e32:	2802      	cmp	r0, #2
 8003e34:	d9f6      	bls.n	8003e24 <HAL_RCC_OscConfig+0x1d4>
 8003e36:	e76d      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e38:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003e3a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3c:	4d45      	ldr	r5, [pc, #276]	; (8003f54 <HAL_RCC_OscConfig+0x304>)
 8003e3e:	0552      	lsls	r2, r2, #21
 8003e40:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003e42:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e44:	4213      	tst	r3, r2
 8003e46:	d108      	bne.n	8003e5a <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e48:	69eb      	ldr	r3, [r5, #28]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61eb      	str	r3, [r5, #28]
 8003e4e:	69eb      	ldr	r3, [r5, #28]
 8003e50:	4013      	ands	r3, r2
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	2780      	movs	r7, #128	; 0x80
 8003e5c:	4e40      	ldr	r6, [pc, #256]	; (8003f60 <HAL_RCC_OscConfig+0x310>)
 8003e5e:	007f      	lsls	r7, r7, #1
 8003e60:	6833      	ldr	r3, [r6, #0]
 8003e62:	423b      	tst	r3, r7
 8003e64:	d015      	beq.n	8003e92 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e66:	68a3      	ldr	r3, [r4, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d122      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x262>
 8003e6c:	6a2a      	ldr	r2, [r5, #32]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003e72:	f7ff f9ed 	bl	8003250 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e76:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003e78:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	6a2b      	ldr	r3, [r5, #32]
 8003e7c:	423b      	tst	r3, r7
 8003e7e:	d03f      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8003e80:	9b00      	ldr	r3, [sp, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d000      	beq.n	8003e88 <HAL_RCC_OscConfig+0x238>
 8003e86:	e6f7      	b.n	8003c78 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	69eb      	ldr	r3, [r5, #28]
 8003e8a:	4a36      	ldr	r2, [pc, #216]	; (8003f64 <HAL_RCC_OscConfig+0x314>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61eb      	str	r3, [r5, #28]
 8003e90:	e6f2      	b.n	8003c78 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e92:	6833      	ldr	r3, [r6, #0]
 8003e94:	433b      	orrs	r3, r7
 8003e96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003e98:	f7ff f9da 	bl	8003250 <HAL_GetTick>
 8003e9c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	6833      	ldr	r3, [r6, #0]
 8003ea0:	423b      	tst	r3, r7
 8003ea2:	d1e0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7ff f9d4 	bl	8003250 <HAL_GetTick>
 8003ea8:	9b01      	ldr	r3, [sp, #4]
 8003eaa:	1ac0      	subs	r0, r0, r3
 8003eac:	2864      	cmp	r0, #100	; 0x64
 8003eae:	d9f6      	bls.n	8003e9e <HAL_RCC_OscConfig+0x24e>
 8003eb0:	e730      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d114      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x292>
 8003eb8:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eba:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	4393      	bics	r3, r2
 8003ebe:	622b      	str	r3, [r5, #32]
 8003ec0:	6a2b      	ldr	r3, [r5, #32]
 8003ec2:	3203      	adds	r2, #3
 8003ec4:	4393      	bics	r3, r2
 8003ec6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003ec8:	f7ff f9c2 	bl	8003250 <HAL_GetTick>
 8003ecc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ece:	6a2b      	ldr	r3, [r5, #32]
 8003ed0:	423b      	tst	r3, r7
 8003ed2:	d0d5      	beq.n	8003e80 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7ff f9bc 	bl	8003250 <HAL_GetTick>
 8003ed8:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <HAL_RCC_OscConfig+0x318>)
 8003eda:	1b80      	subs	r0, r0, r6
 8003edc:	4298      	cmp	r0, r3
 8003ede:	d9f6      	bls.n	8003ece <HAL_RCC_OscConfig+0x27e>
 8003ee0:	e718      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d105      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2a2>
 8003ee6:	6a29      	ldr	r1, [r5, #32]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	430b      	orrs	r3, r1
 8003eec:	622b      	str	r3, [r5, #32]
 8003eee:	6a2b      	ldr	r3, [r5, #32]
 8003ef0:	e7bd      	b.n	8003e6e <HAL_RCC_OscConfig+0x21e>
 8003ef2:	6a2b      	ldr	r3, [r5, #32]
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	622b      	str	r3, [r5, #32]
 8003efa:	6a2b      	ldr	r3, [r5, #32]
 8003efc:	4393      	bics	r3, r2
 8003efe:	e7b7      	b.n	8003e70 <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7ff f9a6 	bl	8003250 <HAL_GetTick>
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <HAL_RCC_OscConfig+0x318>)
 8003f06:	1b80      	subs	r0, r0, r6
 8003f08:	4298      	cmp	r0, r3
 8003f0a:	d9b6      	bls.n	8003e7a <HAL_RCC_OscConfig+0x22a>
 8003f0c:	e702      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f0e:	f7ff f99f 	bl	8003250 <HAL_GetTick>
 8003f12:	1b80      	subs	r0, r0, r6
 8003f14:	2802      	cmp	r0, #2
 8003f16:	d800      	bhi.n	8003f1a <HAL_RCC_OscConfig+0x2ca>
 8003f18:	e6c1      	b.n	8003c9e <HAL_RCC_OscConfig+0x4e>
 8003f1a:	e6fb      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f1c:	3205      	adds	r2, #5
 8003f1e:	d103      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f20:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003f22:	439a      	bics	r2, r3
 8003f24:	636a      	str	r2, [r5, #52]	; 0x34
 8003f26:	e6be      	b.n	8003ca6 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f28:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f2a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f2c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003f2e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f30:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003f32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003f34:	4393      	bics	r3, r2
 8003f36:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003f38:	f7ff f98a 	bl	8003250 <HAL_GetTick>
 8003f3c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003f40:	423b      	tst	r3, r7
 8003f42:	d100      	bne.n	8003f46 <HAL_RCC_OscConfig+0x2f6>
 8003f44:	e6b6      	b.n	8003cb4 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f46:	f7ff f983 	bl	8003250 <HAL_GetTick>
 8003f4a:	1b80      	subs	r0, r0, r6
 8003f4c:	2802      	cmp	r0, #2
 8003f4e:	d9f6      	bls.n	8003f3e <HAL_RCC_OscConfig+0x2ee>
 8003f50:	e6e0      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	40021000 	.word	0x40021000
 8003f58:	fffeffff 	.word	0xfffeffff
 8003f5c:	fffbffff 	.word	0xfffbffff
 8003f60:	40007000 	.word	0x40007000
 8003f64:	efffffff 	.word	0xefffffff
 8003f68:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f6c:	210c      	movs	r1, #12
 8003f6e:	4d34      	ldr	r5, [pc, #208]	; (8004040 <HAL_RCC_OscConfig+0x3f0>)
 8003f70:	686a      	ldr	r2, [r5, #4]
 8003f72:	400a      	ands	r2, r1
 8003f74:	2a08      	cmp	r2, #8
 8003f76:	d047      	beq.n	8004008 <HAL_RCC_OscConfig+0x3b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f78:	4a32      	ldr	r2, [pc, #200]	; (8004044 <HAL_RCC_OscConfig+0x3f4>)
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d132      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_PLL_DISABLE();
 8003f7e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f80:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4013      	ands	r3, r2
 8003f84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f86:	f7ff f963 	bl	8003250 <HAL_GetTick>
 8003f8a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8c:	04bf      	lsls	r7, r7, #18
 8003f8e:	682b      	ldr	r3, [r5, #0]
 8003f90:	423b      	tst	r3, r7
 8003f92:	d121      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f94:	220f      	movs	r2, #15
 8003f96:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f98:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f9e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003fa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fa8:	686a      	ldr	r2, [r5, #4]
 8003faa:	430b      	orrs	r3, r1
 8003fac:	4926      	ldr	r1, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x3f8>)
 8003fae:	400a      	ands	r2, r1
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	682a      	ldr	r2, [r5, #0]
 8003fb8:	045b      	lsls	r3, r3, #17
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003fbe:	f7ff f947 	bl	8003250 <HAL_GetTick>
 8003fc2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	4233      	tst	r3, r6
 8003fc8:	d000      	beq.n	8003fcc <HAL_RCC_OscConfig+0x37c>
 8003fca:	e677      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7ff f940 	bl	8003250 <HAL_GetTick>
 8003fd0:	1b00      	subs	r0, r0, r4
 8003fd2:	2802      	cmp	r0, #2
 8003fd4:	d9f6      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x374>
 8003fd6:	e69d      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7ff f93a 	bl	8003250 <HAL_GetTick>
 8003fdc:	1b80      	subs	r0, r0, r6
 8003fde:	2802      	cmp	r0, #2
 8003fe0:	d9d5      	bls.n	8003f8e <HAL_RCC_OscConfig+0x33e>
 8003fe2:	e697      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8003fe4:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003fe8:	4013      	ands	r3, r2
 8003fea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003fec:	f7ff f930 	bl	8003250 <HAL_GetTick>
 8003ff0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff2:	04b6      	lsls	r6, r6, #18
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	4233      	tst	r3, r6
 8003ff8:	d100      	bne.n	8003ffc <HAL_RCC_OscConfig+0x3ac>
 8003ffa:	e65f      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7ff f928 	bl	8003250 <HAL_GetTick>
 8004000:	1b00      	subs	r0, r0, r4
 8004002:	2802      	cmp	r0, #2
 8004004:	d9f6      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x3a4>
 8004006:	e685      	b.n	8003d14 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8004008:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800400a:	2b01      	cmp	r3, #1
 800400c:	d100      	bne.n	8004010 <HAL_RCC_OscConfig+0x3c0>
 800400e:	e682      	b.n	8003d16 <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8004012:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004014:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004016:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8004018:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	4019      	ands	r1, r3
 800401c:	4281      	cmp	r1, r0
 800401e:	d000      	beq.n	8004022 <HAL_RCC_OscConfig+0x3d2>
 8004020:	e661      	b.n	8003ce6 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004022:	210f      	movs	r1, #15
 8004024:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004028:	428a      	cmp	r2, r1
 800402a:	d000      	beq.n	800402e <HAL_RCC_OscConfig+0x3de>
 800402c:	e65b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800402e:	22f0      	movs	r2, #240	; 0xf0
 8004030:	0392      	lsls	r2, r2, #14
 8004032:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004034:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004036:	4293      	cmp	r3, r2
 8004038:	d100      	bne.n	800403c <HAL_RCC_OscConfig+0x3ec>
 800403a:	e63f      	b.n	8003cbc <HAL_RCC_OscConfig+0x6c>
 800403c:	e653      	b.n	8003ce6 <HAL_RCC_OscConfig+0x96>
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	40021000 	.word	0x40021000
 8004044:	feffffff 	.word	0xfeffffff
 8004048:	ffc2ffff 	.word	0xffc2ffff

0800404c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800404c:	220c      	movs	r2, #12
{
 800404e:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8004050:	4d0c      	ldr	r5, [pc, #48]	; (8004084 <HAL_RCC_GetSysClockFreq+0x38>)
 8004052:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004054:	401a      	ands	r2, r3
 8004056:	2a08      	cmp	r2, #8
 8004058:	d111      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800405a:	200f      	movs	r0, #15
 800405c:	490a      	ldr	r1, [pc, #40]	; (8004088 <HAL_RCC_GetSysClockFreq+0x3c>)
 800405e:	0c9a      	lsrs	r2, r3, #18
 8004060:	4002      	ands	r2, r0
 8004062:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004064:	6aea      	ldr	r2, [r5, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004066:	03db      	lsls	r3, r3, #15
 8004068:	d507      	bpl.n	800407a <HAL_RCC_GetSysClockFreq+0x2e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800406a:	4908      	ldr	r1, [pc, #32]	; (800408c <HAL_RCC_GetSysClockFreq+0x40>)
 800406c:	4002      	ands	r2, r0
 800406e:	5c89      	ldrb	r1, [r1, r2]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004070:	4807      	ldr	r0, [pc, #28]	; (8004090 <HAL_RCC_GetSysClockFreq+0x44>)
 8004072:	f7fc f867 	bl	8000144 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004076:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004078:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800407a:	4806      	ldr	r0, [pc, #24]	; (8004094 <HAL_RCC_GetSysClockFreq+0x48>)
 800407c:	e7fb      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 800407e:	4804      	ldr	r0, [pc, #16]	; (8004090 <HAL_RCC_GetSysClockFreq+0x44>)
  return sysclockfreq;
 8004080:	e7fa      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x2c>
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	40021000 	.word	0x40021000
 8004088:	08006328 	.word	0x08006328
 800408c:	08006338 	.word	0x08006338
 8004090:	007a1200 	.word	0x007a1200
 8004094:	003d0900 	.word	0x003d0900

08004098 <HAL_RCC_ClockConfig>:
{
 8004098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409a:	0004      	movs	r4, r0
 800409c:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800409e:	2800      	cmp	r0, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80040a2:	2001      	movs	r0, #1
}
 80040a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a6:	2201      	movs	r2, #1
 80040a8:	4d37      	ldr	r5, [pc, #220]	; (8004188 <HAL_RCC_ClockConfig+0xf0>)
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	4013      	ands	r3, r2
 80040ae:	428b      	cmp	r3, r1
 80040b0:	d31c      	bcc.n	80040ec <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	0793      	lsls	r3, r2, #30
 80040b6:	d422      	bmi.n	80040fe <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b8:	07d2      	lsls	r2, r2, #31
 80040ba:	d42f      	bmi.n	800411c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040bc:	2301      	movs	r3, #1
 80040be:	682a      	ldr	r2, [r5, #0]
 80040c0:	401a      	ands	r2, r3
 80040c2:	42b2      	cmp	r2, r6
 80040c4:	d851      	bhi.n	800416a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	4d30      	ldr	r5, [pc, #192]	; (800418c <HAL_RCC_ClockConfig+0xf4>)
 80040ca:	075b      	lsls	r3, r3, #29
 80040cc:	d454      	bmi.n	8004178 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040ce:	f7ff ffbd 	bl	800404c <HAL_RCC_GetSysClockFreq>
 80040d2:	686b      	ldr	r3, [r5, #4]
 80040d4:	4a2e      	ldr	r2, [pc, #184]	; (8004190 <HAL_RCC_ClockConfig+0xf8>)
 80040d6:	061b      	lsls	r3, r3, #24
 80040d8:	0f1b      	lsrs	r3, r3, #28
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	492d      	ldr	r1, [pc, #180]	; (8004194 <HAL_RCC_ClockConfig+0xfc>)
 80040de:	40d8      	lsrs	r0, r3
 80040e0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7ff f874 	bl	80031d0 <HAL_InitTick>
  return HAL_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e7db      	b.n	80040a4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	4393      	bics	r3, r2
 80040f0:	430b      	orrs	r3, r1
 80040f2:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	4013      	ands	r3, r2
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d1d2      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xa>
 80040fc:	e7d9      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fe:	4923      	ldr	r1, [pc, #140]	; (800418c <HAL_RCC_ClockConfig+0xf4>)
 8004100:	0753      	lsls	r3, r2, #29
 8004102:	d504      	bpl.n	800410e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004104:	23e0      	movs	r3, #224	; 0xe0
 8004106:	6848      	ldr	r0, [r1, #4]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4303      	orrs	r3, r0
 800410c:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410e:	20f0      	movs	r0, #240	; 0xf0
 8004110:	684b      	ldr	r3, [r1, #4]
 8004112:	4383      	bics	r3, r0
 8004114:	68a0      	ldr	r0, [r4, #8]
 8004116:	4303      	orrs	r3, r0
 8004118:	604b      	str	r3, [r1, #4]
 800411a:	e7cd      	b.n	80040b8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411c:	4f1b      	ldr	r7, [pc, #108]	; (800418c <HAL_RCC_ClockConfig+0xf4>)
 800411e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004120:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	2a01      	cmp	r2, #1
 8004124:	d119      	bne.n	800415a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	039b      	lsls	r3, r3, #14
 8004128:	d5bb      	bpl.n	80040a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412a:	2103      	movs	r1, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	438b      	bics	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8004134:	f7ff f88c 	bl	8003250 <HAL_GetTick>
 8004138:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	230c      	movs	r3, #12
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	401a      	ands	r2, r3
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d0b9      	beq.n	80040bc <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7ff f882 	bl	8003250 <HAL_GetTick>
 800414c:	9b01      	ldr	r3, [sp, #4]
 800414e:	1ac0      	subs	r0, r0, r3
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_RCC_ClockConfig+0x100>)
 8004152:	4298      	cmp	r0, r3
 8004154:	d9f1      	bls.n	800413a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8004156:	2003      	movs	r0, #3
 8004158:	e7a4      	b.n	80040a4 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415a:	2a02      	cmp	r2, #2
 800415c:	d102      	bne.n	8004164 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	019b      	lsls	r3, r3, #6
 8004160:	d4e3      	bmi.n	800412a <HAL_RCC_ClockConfig+0x92>
 8004162:	e79e      	b.n	80040a2 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	079b      	lsls	r3, r3, #30
 8004166:	d4e0      	bmi.n	800412a <HAL_RCC_ClockConfig+0x92>
 8004168:	e79b      	b.n	80040a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	682a      	ldr	r2, [r5, #0]
 800416c:	439a      	bics	r2, r3
 800416e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004170:	682a      	ldr	r2, [r5, #0]
 8004172:	421a      	tst	r2, r3
 8004174:	d0a7      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x2e>
 8004176:	e794      	b.n	80040a2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004178:	686b      	ldr	r3, [r5, #4]
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <HAL_RCC_ClockConfig+0x104>)
 800417c:	4013      	ands	r3, r2
 800417e:	68e2      	ldr	r2, [r4, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	606b      	str	r3, [r5, #4]
 8004184:	e7a3      	b.n	80040ce <HAL_RCC_ClockConfig+0x36>
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	40022000 	.word	0x40022000
 800418c:	40021000 	.word	0x40021000
 8004190:	08006310 	.word	0x08006310
 8004194:	20000000 	.word	0x20000000
 8004198:	00001388 	.word	0x00001388
 800419c:	fffff8ff 	.word	0xfffff8ff

080041a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4905      	ldr	r1, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041a8:	055b      	lsls	r3, r3, #21
 80041aa:	0f5b      	lsrs	r3, r3, #29
 80041ac:	5ccb      	ldrb	r3, [r1, r3]
 80041ae:	6810      	ldr	r0, [r2, #0]
 80041b0:	40d8      	lsrs	r0, r3
}    
 80041b2:	4770      	bx	lr
 80041b4:	40021000 	.word	0x40021000
 80041b8:	20000000 	.word	0x20000000
 80041bc:	08006320 	.word	0x08006320

080041c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c2:	6803      	ldr	r3, [r0, #0]
{
 80041c4:	0005      	movs	r5, r0
 80041c6:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041c8:	03db      	lsls	r3, r3, #15
 80041ca:	d52b      	bpl.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041cc:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d0:	4c38      	ldr	r4, [pc, #224]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80041d2:	0552      	lsls	r2, r2, #21
 80041d4:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80041d6:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d8:	4213      	tst	r3, r2
 80041da:	d108      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041dc:	69e3      	ldr	r3, [r4, #28]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61e3      	str	r3, [r4, #28]
 80041e2:	69e3      	ldr	r3, [r4, #28]
 80041e4:	4013      	ands	r3, r2
 80041e6:	9303      	str	r3, [sp, #12]
 80041e8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80041ea:	2301      	movs	r3, #1
 80041ec:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	2780      	movs	r7, #128	; 0x80
 80041f0:	4e31      	ldr	r6, [pc, #196]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80041f2:	007f      	lsls	r7, r7, #1
 80041f4:	6833      	ldr	r3, [r6, #0]
 80041f6:	423b      	tst	r3, r7
 80041f8:	d029      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041fa:	6a21      	ldr	r1, [r4, #32]
 80041fc:	22c0      	movs	r2, #192	; 0xc0
 80041fe:	0008      	movs	r0, r1
 8004200:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004202:	686b      	ldr	r3, [r5, #4]
 8004204:	4e2d      	ldr	r6, [pc, #180]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004206:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004208:	4211      	tst	r1, r2
 800420a:	d132      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800420c:	6a23      	ldr	r3, [r4, #32]
 800420e:	686a      	ldr	r2, [r5, #4]
 8004210:	4033      	ands	r3, r6
 8004212:	4313      	orrs	r3, r2
 8004214:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004216:	9b00      	ldr	r3, [sp, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d103      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421c:	69e3      	ldr	r3, [r4, #28]
 800421e:	4a28      	ldr	r2, [pc, #160]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004220:	4013      	ands	r3, r2
 8004222:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004224:	682a      	ldr	r2, [r5, #0]
 8004226:	07d3      	lsls	r3, r2, #31
 8004228:	d506      	bpl.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800422a:	2003      	movs	r0, #3
 800422c:	4921      	ldr	r1, [pc, #132]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800422e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004230:	4383      	bics	r3, r0
 8004232:	68a8      	ldr	r0, [r5, #8]
 8004234:	4303      	orrs	r3, r0
 8004236:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004238:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423a:	0692      	lsls	r2, r2, #26
 800423c:	d517      	bpl.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xae>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800423e:	2110      	movs	r1, #16
 8004240:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8004242:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004244:	438b      	bics	r3, r1
 8004246:	68e9      	ldr	r1, [r5, #12]
 8004248:	430b      	orrs	r3, r1
 800424a:	6313      	str	r3, [r2, #48]	; 0x30
 800424c:	e00f      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xae>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424e:	6833      	ldr	r3, [r6, #0]
 8004250:	433b      	orrs	r3, r7
 8004252:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004254:	f7fe fffc 	bl	8003250 <HAL_GetTick>
 8004258:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	6833      	ldr	r3, [r6, #0]
 800425c:	423b      	tst	r3, r7
 800425e:	d1cc      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004260:	f7fe fff6 	bl	8003250 <HAL_GetTick>
 8004264:	9b01      	ldr	r3, [sp, #4]
 8004266:	1ac0      	subs	r0, r0, r3
 8004268:	2864      	cmp	r0, #100	; 0x64
 800426a:	d9f6      	bls.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9a>
          return HAL_TIMEOUT;
 800426c:	2003      	movs	r0, #3
}
 800426e:	b005      	add	sp, #20
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004272:	4013      	ands	r3, r2
 8004274:	4283      	cmp	r3, r0
 8004276:	d0c9      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004278:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427a:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800427c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800427e:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8004280:	0252      	lsls	r2, r2, #9
 8004282:	4302      	orrs	r2, r0
 8004284:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004286:	6a22      	ldr	r2, [r4, #32]
 8004288:	480e      	ldr	r0, [pc, #56]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800428a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800428c:	4002      	ands	r2, r0
 800428e:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8004290:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004292:	07db      	lsls	r3, r3, #31
 8004294:	d5ba      	bpl.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8004296:	f7fe ffdb 	bl	8003250 <HAL_GetTick>
 800429a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	2202      	movs	r2, #2
 800429e:	6a23      	ldr	r3, [r4, #32]
 80042a0:	4213      	tst	r3, r2
 80042a2:	d1b3      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fe ffd4 	bl	8003250 <HAL_GetTick>
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80042aa:	1bc0      	subs	r0, r0, r7
 80042ac:	4298      	cmp	r0, r3
 80042ae:	d9f5      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80042b0:	e7dc      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
 80042bc:	fffffcff 	.word	0xfffffcff
 80042c0:	efffffff 	.word	0xefffffff
 80042c4:	fffeffff 	.word	0xfffeffff
 80042c8:	00001388 	.word	0x00001388

080042cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042cc:	0002      	movs	r2, r0
{
 80042ce:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80042d0:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80042d2:	323d      	adds	r2, #61	; 0x3d
 80042d4:	7811      	ldrb	r1, [r2, #0]
 80042d6:	4281      	cmp	r1, r0
 80042d8:	d119      	bne.n	800430e <HAL_TIM_Base_Start_IT+0x42>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042da:	2102      	movs	r1, #2
 80042dc:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	4302      	orrs	r2, r0
 80042e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e6:	4a0d      	ldr	r2, [pc, #52]	; (800431c <HAL_TIM_Base_Start_IT+0x50>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d006      	beq.n	80042fa <HAL_TIM_Base_Start_IT+0x2e>
 80042ec:	2280      	movs	r2, #128	; 0x80
 80042ee:	05d2      	lsls	r2, r2, #23
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d002      	beq.n	80042fa <HAL_TIM_Base_Start_IT+0x2e>
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <HAL_TIM_Base_Start_IT+0x54>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10a      	bne.n	8004310 <HAL_TIM_Base_Start_IT+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fa:	2107      	movs	r1, #7
 80042fc:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80042fe:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004300:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	2a06      	cmp	r2, #6
 8004304:	d003      	beq.n	800430e <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8004306:	2201      	movs	r2, #1
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4302      	orrs	r2, r0
 8004314:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004316:	2000      	movs	r0, #0
 8004318:	e7f9      	b.n	800430e <HAL_TIM_Base_Start_IT+0x42>
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400

08004324 <HAL_TIM_OC_DelayElapsedCallback>:
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_IC_CaptureCallback>:
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004328:	4770      	bx	lr

0800432a <HAL_TIM_TriggerCallback>:
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800432c:	2202      	movs	r2, #2
 800432e:	6803      	ldr	r3, [r0, #0]
{
 8004330:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004332:	6919      	ldr	r1, [r3, #16]
{
 8004334:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004336:	4211      	tst	r1, r2
 8004338:	d00e      	beq.n	8004358 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433a:	68d9      	ldr	r1, [r3, #12]
 800433c:	4211      	tst	r1, r2
 800433e:	d00b      	beq.n	8004358 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004340:	3a05      	subs	r2, #5
 8004342:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004344:	3204      	adds	r2, #4
 8004346:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	079b      	lsls	r3, r3, #30
 800434c:	d100      	bne.n	8004350 <HAL_TIM_IRQHandler+0x24>
 800434e:	e079      	b.n	8004444 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004350:	f7ff ffe9 	bl	8004326 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004354:	2300      	movs	r3, #0
 8004356:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004358:	2204      	movs	r2, #4
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	4211      	tst	r1, r2
 8004360:	d010      	beq.n	8004384 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004362:	68d9      	ldr	r1, [r3, #12]
 8004364:	4211      	tst	r1, r2
 8004366:	d00d      	beq.n	8004384 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004368:	3a09      	subs	r2, #9
 800436a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436c:	3207      	adds	r2, #7
 800436e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	23c0      	movs	r3, #192	; 0xc0
 8004374:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004378:	421a      	tst	r2, r3
 800437a:	d069      	beq.n	8004450 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 800437c:	f7ff ffd3 	bl	8004326 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004380:	2300      	movs	r3, #0
 8004382:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004384:	2208      	movs	r2, #8
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	6919      	ldr	r1, [r3, #16]
 800438a:	4211      	tst	r1, r2
 800438c:	d00e      	beq.n	80043ac <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800438e:	68d9      	ldr	r1, [r3, #12]
 8004390:	4211      	tst	r1, r2
 8004392:	d00b      	beq.n	80043ac <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004394:	3a11      	subs	r2, #17
 8004396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004398:	320d      	adds	r2, #13
 800439a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800439c:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a0:	079b      	lsls	r3, r3, #30
 80043a2:	d05b      	beq.n	800445c <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80043a4:	f7ff ffbf 	bl	8004326 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a8:	2300      	movs	r3, #0
 80043aa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ac:	2210      	movs	r2, #16
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	6919      	ldr	r1, [r3, #16]
 80043b2:	4211      	tst	r1, r2
 80043b4:	d010      	beq.n	80043d8 <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	4211      	tst	r1, r2
 80043ba:	d00d      	beq.n	80043d8 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043bc:	3a21      	subs	r2, #33	; 0x21
 80043be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c0:	3219      	adds	r2, #25
 80043c2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	23c0      	movs	r3, #192	; 0xc0
 80043c8:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043cc:	421a      	tst	r2, r3
 80043ce:	d04b      	beq.n	8004468 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80043d0:	f7ff ffa9 	bl	8004326 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d4:	2300      	movs	r3, #0
 80043d6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d8:	2201      	movs	r2, #1
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	6919      	ldr	r1, [r3, #16]
 80043de:	4211      	tst	r1, r2
 80043e0:	d007      	beq.n	80043f2 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e2:	68d9      	ldr	r1, [r3, #12]
 80043e4:	4211      	tst	r1, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e8:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ea:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ee:	f7fe fd7d 	bl	8002eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	6919      	ldr	r1, [r3, #16]
 80043f8:	4211      	tst	r1, r2
 80043fa:	d008      	beq.n	800440e <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fc:	68d9      	ldr	r1, [r3, #12]
 80043fe:	4211      	tst	r1, r2
 8004400:	d005      	beq.n	800440e <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004402:	3a02      	subs	r2, #2
 8004404:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004406:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004408:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800440a:	f000 f8a4 	bl	8004556 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	6919      	ldr	r1, [r3, #16]
 8004414:	4211      	tst	r1, r2
 8004416:	d007      	beq.n	8004428 <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004418:	68d9      	ldr	r1, [r3, #12]
 800441a:	4211      	tst	r1, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800441e:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004420:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004422:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004424:	f7ff ff81 	bl	800432a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004428:	2220      	movs	r2, #32
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	6919      	ldr	r1, [r3, #16]
 800442e:	4211      	tst	r1, r2
 8004430:	d007      	beq.n	8004442 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004432:	68d9      	ldr	r1, [r3, #12]
 8004434:	4211      	tst	r1, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004438:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800443c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800443e:	f000 f889 	bl	8004554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004442:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004444:	f7ff ff6e 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004448:	0020      	movs	r0, r4
 800444a:	f7ff ff6d 	bl	8004328 <HAL_TIM_PWM_PulseFinishedCallback>
 800444e:	e781      	b.n	8004354 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004450:	f7ff ff68 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	0020      	movs	r0, r4
 8004456:	f7ff ff67 	bl	8004328 <HAL_TIM_PWM_PulseFinishedCallback>
 800445a:	e791      	b.n	8004380 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445c:	f7ff ff62 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	0020      	movs	r0, r4
 8004462:	f7ff ff61 	bl	8004328 <HAL_TIM_PWM_PulseFinishedCallback>
 8004466:	e79f      	b.n	80043a8 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004468:	f7ff ff5c 	bl	8004324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	0020      	movs	r0, r4
 800446e:	f7ff ff5b 	bl	8004328 <HAL_TIM_PWM_PulseFinishedCallback>
 8004472:	e7af      	b.n	80043d4 <HAL_TIM_IRQHandler+0xa8>

08004474 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <TIM_Base_SetConfig+0x78>)
{
 8004476:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004478:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800447a:	4290      	cmp	r0, r2
 800447c:	d006      	beq.n	800448c <TIM_Base_SetConfig+0x18>
 800447e:	2480      	movs	r4, #128	; 0x80
 8004480:	05e4      	lsls	r4, r4, #23
 8004482:	42a0      	cmp	r0, r4
 8004484:	d002      	beq.n	800448c <TIM_Base_SetConfig+0x18>
 8004486:	4c1a      	ldr	r4, [pc, #104]	; (80044f0 <TIM_Base_SetConfig+0x7c>)
 8004488:	42a0      	cmp	r0, r4
 800448a:	d10c      	bne.n	80044a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	2470      	movs	r4, #112	; 0x70
 800448e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004490:	684c      	ldr	r4, [r1, #4]
 8004492:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004494:	4290      	cmp	r0, r2
 8004496:	d00f      	beq.n	80044b8 <TIM_Base_SetConfig+0x44>
 8004498:	2480      	movs	r4, #128	; 0x80
 800449a:	05e4      	lsls	r4, r4, #23
 800449c:	42a0      	cmp	r0, r4
 800449e:	d00b      	beq.n	80044b8 <TIM_Base_SetConfig+0x44>
 80044a0:	4c13      	ldr	r4, [pc, #76]	; (80044f0 <TIM_Base_SetConfig+0x7c>)
 80044a2:	42a0      	cmp	r0, r4
 80044a4:	d008      	beq.n	80044b8 <TIM_Base_SetConfig+0x44>
 80044a6:	4c13      	ldr	r4, [pc, #76]	; (80044f4 <TIM_Base_SetConfig+0x80>)
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d005      	beq.n	80044b8 <TIM_Base_SetConfig+0x44>
 80044ac:	4c12      	ldr	r4, [pc, #72]	; (80044f8 <TIM_Base_SetConfig+0x84>)
 80044ae:	42a0      	cmp	r0, r4
 80044b0:	d002      	beq.n	80044b8 <TIM_Base_SetConfig+0x44>
 80044b2:	4c12      	ldr	r4, [pc, #72]	; (80044fc <TIM_Base_SetConfig+0x88>)
 80044b4:	42a0      	cmp	r0, r4
 80044b6:	d103      	bne.n	80044c0 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b8:	4c11      	ldr	r4, [pc, #68]	; (8004500 <TIM_Base_SetConfig+0x8c>)
 80044ba:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044bc:	68cb      	ldr	r3, [r1, #12]
 80044be:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c0:	2480      	movs	r4, #128	; 0x80
 80044c2:	43a3      	bics	r3, r4
 80044c4:	694c      	ldr	r4, [r1, #20]
 80044c6:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80044c8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ca:	688b      	ldr	r3, [r1, #8]
 80044cc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044ce:	680b      	ldr	r3, [r1, #0]
 80044d0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d2:	4290      	cmp	r0, r2
 80044d4:	d005      	beq.n	80044e2 <TIM_Base_SetConfig+0x6e>
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <TIM_Base_SetConfig+0x84>)
 80044d8:	4298      	cmp	r0, r3
 80044da:	d002      	beq.n	80044e2 <TIM_Base_SetConfig+0x6e>
 80044dc:	4b07      	ldr	r3, [pc, #28]	; (80044fc <TIM_Base_SetConfig+0x88>)
 80044de:	4298      	cmp	r0, r3
 80044e0:	d101      	bne.n	80044e6 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e2:	690b      	ldr	r3, [r1, #16]
 80044e4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e6:	2301      	movs	r3, #1
 80044e8:	6143      	str	r3, [r0, #20]
}
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40002000 	.word	0x40002000
 80044f8:	40014400 	.word	0x40014400
 80044fc:	40014800 	.word	0x40014800
 8004500:	fffffcff 	.word	0xfffffcff

08004504 <HAL_TIM_Base_Init>:
{
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004508:	2001      	movs	r0, #1
  if (htim == NULL)
 800450a:	2c00      	cmp	r4, #0
 800450c:	d021      	beq.n	8004552 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	0025      	movs	r5, r4
 8004510:	353d      	adds	r5, #61	; 0x3d
 8004512:	782b      	ldrb	r3, [r5, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800451a:	0023      	movs	r3, r4
 800451c:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800451e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004520:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004522:	f7fe fdb7 	bl	8003094 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004526:	2302      	movs	r3, #2
 8004528:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	1d21      	adds	r1, r4, #4
 800452e:	f7ff ffa1 	bl	8004474 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004532:	0022      	movs	r2, r4
 8004534:	2301      	movs	r3, #1
  return HAL_OK;
 8004536:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004538:	3246      	adds	r2, #70	; 0x46
 800453a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453c:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	3a08      	subs	r2, #8
 8004540:	7013      	strb	r3, [r2, #0]
 8004542:	7053      	strb	r3, [r2, #1]
 8004544:	7093      	strb	r3, [r2, #2]
 8004546:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	7113      	strb	r3, [r2, #4]
 800454a:	7153      	strb	r3, [r2, #5]
 800454c:	7193      	strb	r3, [r2, #6]
 800454e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004550:	702b      	strb	r3, [r5, #0]
}
 8004552:	bd70      	pop	{r4, r5, r6, pc}

08004554 <HAL_TIMEx_CommutCallback>:
 8004554:	4770      	bx	lr

08004556 <HAL_TIMEx_BreakCallback>:
 8004556:	4770      	bx	lr

08004558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004558:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800455a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455e:	2201      	movs	r2, #1
 8004560:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004564:	6801      	ldr	r1, [r0, #0]
 8004566:	4d12      	ldr	r5, [pc, #72]	; (80045b0 <UART_EndRxTransfer+0x58>)
 8004568:	680b      	ldr	r3, [r1, #0]
 800456a:	402b      	ands	r3, r5
 800456c:	600b      	str	r3, [r1, #0]
 800456e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004572:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457a:	6801      	ldr	r1, [r0, #0]
 800457c:	688b      	ldr	r3, [r1, #8]
 800457e:	4393      	bics	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
 8004582:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004586:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004588:	4293      	cmp	r3, r2
 800458a:	d10a      	bne.n	80045a2 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004590:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004594:	2410      	movs	r4, #16
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	43a3      	bics	r3, r4
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045a2:	2220      	movs	r2, #32
 80045a4:	1d03      	adds	r3, r0, #4
 80045a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a8:	2300      	movs	r3, #0
 80045aa:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ac:	6683      	str	r3, [r0, #104]	; 0x68
}
 80045ae:	bd30      	pop	{r4, r5, pc}
 80045b0:	fffffedf 	.word	0xfffffedf

080045b4 <UART_TxISR_16BIT.part.0>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 80045b4:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	2201      	movs	r2, #1
 80045bc:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045c0:	2580      	movs	r5, #128	; 0x80
 80045c2:	6801      	ldr	r1, [r0, #0]
 80045c4:	680b      	ldr	r3, [r1, #0]
 80045c6:	43ab      	bics	r3, r5
 80045c8:	600b      	str	r3, [r1, #0]
 80045ca:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045d6:	2340      	movs	r3, #64	; 0x40
 80045d8:	6802      	ldr	r2, [r0, #0]
 80045da:	6810      	ldr	r0, [r2, #0]
 80045dc:	4303      	orrs	r3, r0
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80045e4:	bd30      	pop	{r4, r5, pc}

080045e6 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045e6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80045e8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045ea:	2b21      	cmp	r3, #33	; 0x21
 80045ec:	d106      	bne.n	80045fc <UART_TxISR_8BIT+0x16>
    if (huart->TxXferCount == 0U)
 80045ee:	0002      	movs	r2, r0
 80045f0:	3252      	adds	r2, #82	; 0x52
 80045f2:	8813      	ldrh	r3, [r2, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <UART_TxISR_8BIT+0x18>
 80045f8:	f7ff ffdc 	bl	80045b4 <UART_TxISR_16BIT.part.0>
}
 80045fc:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80045fe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004600:	6801      	ldr	r1, [r0, #0]
 8004602:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 8004604:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004606:	850c      	strh	r4, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004608:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800460a:	8813      	ldrh	r3, [r2, #0]
 800460c:	3b01      	subs	r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]
}
 8004612:	e7f3      	b.n	80045fc <UART_TxISR_8BIT+0x16>

08004614 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004614:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8004616:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004618:	2b21      	cmp	r3, #33	; 0x21
 800461a:	d106      	bne.n	800462a <UART_TxISR_16BIT+0x16>
  {
    if (huart->TxXferCount == 0U)
 800461c:	0001      	movs	r1, r0
 800461e:	3152      	adds	r1, #82	; 0x52
 8004620:	880b      	ldrh	r3, [r1, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <UART_TxISR_16BIT+0x18>
 8004626:	f7ff ffc5 	bl	80045b4 <UART_TxISR_16BIT.part.0>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800462a:	bd10      	pop	{r4, pc}
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800462c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800462e:	6804      	ldr	r4, [r0, #0]
 8004630:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 8004632:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004634:	05db      	lsls	r3, r3, #23
 8004636:	0ddb      	lsrs	r3, r3, #23
 8004638:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800463a:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800463c:	880b      	ldrh	r3, [r1, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	800b      	strh	r3, [r1, #0]
}
 8004644:	e7f1      	b.n	800462a <UART_TxISR_16BIT+0x16>
	...

08004648 <HAL_UART_Transmit_IT>:
{
 8004648:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800464a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 800464c:	0003      	movs	r3, r0
    return HAL_BUSY;
 800464e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004650:	2c20      	cmp	r4, #32
 8004652:	d131      	bne.n	80046b8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8004654:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004656:	2900      	cmp	r1, #0
 8004658:	d02e      	beq.n	80046b8 <HAL_UART_Transmit_IT+0x70>
 800465a:	2a00      	cmp	r2, #0
 800465c:	d02c      	beq.n	80046b8 <HAL_UART_Transmit_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465e:	2080      	movs	r0, #128	; 0x80
 8004660:	689c      	ldr	r4, [r3, #8]
 8004662:	0140      	lsls	r0, r0, #5
 8004664:	4284      	cmp	r4, r0
 8004666:	d105      	bne.n	8004674 <HAL_UART_Transmit_IT+0x2c>
 8004668:	6918      	ldr	r0, [r3, #16]
 800466a:	2800      	cmp	r0, #0
 800466c:	d102      	bne.n	8004674 <HAL_UART_Transmit_IT+0x2c>
      return HAL_ERROR;
 800466e:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8004670:	4201      	tst	r1, r0
 8004672:	d121      	bne.n	80046b8 <HAL_UART_Transmit_IT+0x70>
    huart->pTxBuffPtr  = pData;
 8004674:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004676:	0019      	movs	r1, r3
 8004678:	3150      	adds	r1, #80	; 0x50
 800467a:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 800467c:	804a      	strh	r2, [r1, #2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467e:	001a      	movs	r2, r3
 8004680:	2100      	movs	r1, #0
 8004682:	3208      	adds	r2, #8
 8004684:	67d1      	str	r1, [r2, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004686:	2221      	movs	r2, #33	; 0x21
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	2180      	movs	r1, #128	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468a:	67da      	str	r2, [r3, #124]	; 0x7c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	0149      	lsls	r1, r1, #5
      huart->TxISR = UART_TxISR_8BIT;
 800468e:	4a0b      	ldr	r2, [pc, #44]	; (80046bc <HAL_UART_Transmit_IT+0x74>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004690:	428c      	cmp	r4, r1
 8004692:	d103      	bne.n	800469c <HAL_UART_Transmit_IT+0x54>
 8004694:	6919      	ldr	r1, [r3, #16]
 8004696:	2900      	cmp	r1, #0
 8004698:	d100      	bne.n	800469c <HAL_UART_Transmit_IT+0x54>
      huart->TxISR = UART_TxISR_16BIT;
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <HAL_UART_Transmit_IT+0x78>)
 800469c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a2:	2201      	movs	r2, #1
 80046a4:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	6810      	ldr	r0, [r2, #0]
 80046ae:	4303      	orrs	r3, r0
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80046b6:	2000      	movs	r0, #0
}
 80046b8:	bd10      	pop	{r4, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	080045e7 	.word	0x080045e7
 80046c0:	08004615 	.word	0x08004615

080046c4 <HAL_UART_TxCpltCallback>:
 80046c4:	4770      	bx	lr

080046c6 <HAL_UART_ErrorCallback>:
 80046c6:	4770      	bx	lr

080046c8 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	0002      	movs	r2, r0
{
 80046ce:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80046d0:	325a      	adds	r2, #90	; 0x5a
 80046d2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80046d4:	3a08      	subs	r2, #8
 80046d6:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80046d8:	f7ff fff5 	bl	80046c6 <HAL_UART_ErrorCallback>
}
 80046dc:	bd10      	pop	{r4, pc}

080046de <HAL_UARTEx_RxEventCallback>:
}
 80046de:	4770      	bx	lr

080046e0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046e0:	6802      	ldr	r2, [r0, #0]
{
 80046e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046e4:	69d3      	ldr	r3, [r2, #28]
{
 80046e6:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046e8:	48a7      	ldr	r0, [pc, #668]	; (8004988 <HAL_UART_IRQHandler+0x2a8>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ea:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046ec:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 80046ee:	4203      	tst	r3, r0
 80046f0:	d10b      	bne.n	800470a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046f2:	2020      	movs	r0, #32
 80046f4:	4203      	tst	r3, r0
 80046f6:	d100      	bne.n	80046fa <HAL_UART_IRQHandler+0x1a>
 80046f8:	e080      	b.n	80047fc <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046fa:	4201      	tst	r1, r0
 80046fc:	d100      	bne.n	8004700 <HAL_UART_IRQHandler+0x20>
 80046fe:	e07d      	b.n	80047fc <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8004700:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      huart->TxISR(huart);
 8004702:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8004704:	2b00      	cmp	r3, #0
 8004706:	d16f      	bne.n	80047e8 <HAL_UART_IRQHandler+0x108>
 8004708:	e06f      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800470a:	2001      	movs	r0, #1
 800470c:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800470e:	4d9f      	ldr	r5, [pc, #636]	; (800498c <HAL_UART_IRQHandler+0x2ac>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004710:	4007      	ands	r7, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004712:	400d      	ands	r5, r1
 8004714:	433d      	orrs	r5, r7
 8004716:	d100      	bne.n	800471a <HAL_UART_IRQHandler+0x3a>
 8004718:	e070      	b.n	80047fc <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800471a:	0025      	movs	r5, r4
 800471c:	3508      	adds	r5, #8
 800471e:	4203      	tst	r3, r0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0x4e>
 8004722:	05ce      	lsls	r6, r1, #23
 8004724:	d503      	bpl.n	800472e <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004726:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004728:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800472a:	4330      	orrs	r0, r6
 800472c:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800472e:	2002      	movs	r0, #2
 8004730:	4203      	tst	r3, r0
 8004732:	d006      	beq.n	8004742 <HAL_UART_IRQHandler+0x62>
 8004734:	2f00      	cmp	r7, #0
 8004736:	d004      	beq.n	8004742 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004738:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800473a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800473c:	1800      	adds	r0, r0, r0
 800473e:	4330      	orrs	r0, r6
 8004740:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004742:	2004      	movs	r0, #4
 8004744:	4203      	tst	r3, r0
 8004746:	d006      	beq.n	8004756 <HAL_UART_IRQHandler+0x76>
 8004748:	2f00      	cmp	r7, #0
 800474a:	d004      	beq.n	8004756 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800474c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800474e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8004750:	3802      	subs	r0, #2
 8004752:	4330      	orrs	r0, r6
 8004754:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004756:	2008      	movs	r0, #8
 8004758:	4203      	tst	r3, r0
 800475a:	d007      	beq.n	800476c <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800475c:	2620      	movs	r6, #32
 800475e:	400e      	ands	r6, r1
 8004760:	433e      	orrs	r6, r7
 8004762:	d003      	beq.n	800476c <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004764:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004766:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8004768:	4330      	orrs	r0, r6
 800476a:	67e8      	str	r0, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800476c:	2080      	movs	r0, #128	; 0x80
 800476e:	0100      	lsls	r0, r0, #4
 8004770:	4203      	tst	r3, r0
 8004772:	d006      	beq.n	8004782 <HAL_UART_IRQHandler+0xa2>
 8004774:	014e      	lsls	r6, r1, #5
 8004776:	d504      	bpl.n	8004782 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004778:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800477a:	2220      	movs	r2, #32
 800477c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800477e:	4302      	orrs	r2, r0
 8004780:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004782:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8004784:	2a00      	cmp	r2, #0
 8004786:	d030      	beq.n	80047ea <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004788:	2220      	movs	r2, #32
 800478a:	4213      	tst	r3, r2
 800478c:	d006      	beq.n	800479c <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800478e:	4211      	tst	r1, r2
 8004790:	d004      	beq.n	800479c <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8004792:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8004798:	0020      	movs	r0, r4
 800479a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800479c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800479e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a0:	2740      	movs	r7, #64	; 0x40
 80047a2:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047a4:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a6:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047a8:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80047aa:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ac:	431e      	orrs	r6, r3
 80047ae:	d021      	beq.n	80047f4 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 80047b0:	f7ff fed2 	bl	8004558 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	423b      	tst	r3, r7
 80047ba:	d017      	beq.n	80047ec <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c0:	2301      	movs	r3, #1
 80047c2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	6893      	ldr	r3, [r2, #8]
 80047ca:	43bb      	bics	r3, r7
 80047cc:	6093      	str	r3, [r2, #8]
 80047ce:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80047d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d009      	beq.n	80047ec <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047d8:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <HAL_UART_IRQHandler+0x2b0>)
 80047da:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047dc:	f7fe fdbe 	bl	800335c <HAL_DMA_Abort_IT>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d002      	beq.n	80047ea <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80047e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047e8:	4798      	blx	r3
}
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80047ec:	0020      	movs	r0, r4
 80047ee:	f7ff ff6a 	bl	80046c6 <HAL_UART_ErrorCallback>
 80047f2:	e7fa      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80047f4:	f7ff ff67 	bl	80046c6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f8:	67ee      	str	r6, [r5, #124]	; 0x7c
 80047fa:	e7f6      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80047fe:	2801      	cmp	r0, #1
 8004800:	d000      	beq.n	8004804 <HAL_UART_IRQHandler+0x124>
 8004802:	e095      	b.n	8004930 <HAL_UART_IRQHandler+0x250>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004804:	2510      	movs	r5, #16
 8004806:	422b      	tst	r3, r5
 8004808:	d100      	bne.n	800480c <HAL_UART_IRQHandler+0x12c>
 800480a:	e091      	b.n	8004930 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800480c:	4229      	tst	r1, r5
 800480e:	d100      	bne.n	8004812 <HAL_UART_IRQHandler+0x132>
 8004810:	e08e      	b.n	8004930 <HAL_UART_IRQHandler+0x250>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004812:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	6893      	ldr	r3, [r2, #8]
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	001e      	movs	r6, r3
 800481a:	400e      	ands	r6, r1
 800481c:	420b      	tst	r3, r1
 800481e:	d04f      	beq.n	80048c0 <HAL_UART_IRQHandler+0x1e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004820:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0de      	beq.n	80047ea <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800482c:	0026      	movs	r6, r4
 800482e:	3658      	adds	r6, #88	; 0x58
 8004830:	8837      	ldrh	r7, [r6, #0]
 8004832:	429f      	cmp	r7, r3
 8004834:	d9d9      	bls.n	80047ea <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8004836:	0027      	movs	r7, r4
 8004838:	375a      	adds	r7, #90	; 0x5a
 800483a:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800483c:	6993      	ldr	r3, [r2, #24]
 800483e:	2b20      	cmp	r3, #32
 8004840:	d032      	beq.n	80048a8 <HAL_UART_IRQHandler+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004842:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004846:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	4d51      	ldr	r5, [pc, #324]	; (8004994 <HAL_UART_IRQHandler+0x2b4>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	402b      	ands	r3, r5
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004858:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	6893      	ldr	r3, [r2, #8]
 8004864:	4383      	bics	r3, r0
 8004866:	6093      	str	r3, [r2, #8]
 8004868:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004870:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004874:	0023      	movs	r3, r4
 8004876:	cb80      	ldmia	r3!, {r7}
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	438a      	bics	r2, r1
 800487c:	60ba      	str	r2, [r7, #8]
 800487e:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 8004882:	2220      	movs	r2, #32
 8004884:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	2300      	movs	r3, #0
 8004888:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	3512      	adds	r5, #18
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	35ff      	adds	r5, #255	; 0xff
 800489a:	43ab      	bics	r3, r5
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80048a4:	f7fe fd3c 	bl	8003320 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048a8:	2302      	movs	r3, #2
 80048aa:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ac:	0023      	movs	r3, r4
 80048ae:	335a      	adds	r3, #90	; 0x5a
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	8831      	ldrh	r1, [r6, #0]
 80048b4:	1ac9      	subs	r1, r1, r3
 80048b6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048b8:	0020      	movs	r0, r4
 80048ba:	f7ff ff10 	bl	80046de <HAL_UARTEx_RxEventCallback>
 80048be:	e794      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048c0:	0023      	movs	r3, r4
 80048c2:	0022      	movs	r2, r4
 80048c4:	3358      	adds	r3, #88	; 0x58
 80048c6:	325a      	adds	r2, #90	; 0x5a
 80048c8:	8819      	ldrh	r1, [r3, #0]
 80048ca:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 80048cc:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048ce:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d100      	bne.n	80048d6 <HAL_UART_IRQHandler+0x1f6>
 80048d4:	e789      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048d6:	1ac9      	subs	r1, r1, r3
 80048d8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80048da:	2900      	cmp	r1, #0
 80048dc:	d100      	bne.n	80048e0 <HAL_UART_IRQHandler+0x200>
 80048de:	e784      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e4:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	4d2b      	ldr	r5, [pc, #172]	; (8004998 <HAL_UART_IRQHandler+0x2b8>)
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	402b      	ands	r3, r5
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fa:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	0023      	movs	r3, r4
 8004900:	cb80      	ldmia	r3!, {r7}
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4382      	bics	r2, r0
 8004906:	60ba      	str	r2, [r7, #8]
 8004908:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 800490c:	2220      	movs	r2, #32
 800490e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	6626      	str	r6, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8004912:	66a6      	str	r6, [r4, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004914:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491c:	2010      	movs	r0, #16
 800491e:	6822      	ldr	r2, [r4, #0]
 8004920:	6813      	ldr	r3, [r2, #0]
 8004922:	4383      	bics	r3, r0
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	f386 8810 	msr	PRIMASK, r6
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800492a:	2302      	movs	r3, #2
 800492c:	6663      	str	r3, [r4, #100]	; 0x64
 800492e:	e7c3      	b.n	80048b8 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004930:	2080      	movs	r0, #128	; 0x80
 8004932:	0340      	lsls	r0, r0, #13
 8004934:	4203      	tst	r3, r0
 8004936:	d006      	beq.n	8004946 <HAL_UART_IRQHandler+0x266>
 8004938:	0276      	lsls	r6, r6, #9
 800493a:	d504      	bpl.n	8004946 <HAL_UART_IRQHandler+0x266>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800493c:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800493e:	0020      	movs	r0, r4
 8004940:	f000 f9f6 	bl	8004d30 <HAL_UARTEx_WakeupCallback>
    return;
 8004944:	e751      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	4213      	tst	r3, r2
 800494a:	d003      	beq.n	8004954 <HAL_UART_IRQHandler+0x274>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800494c:	4211      	tst	r1, r2
 800494e:	d001      	beq.n	8004954 <HAL_UART_IRQHandler+0x274>
    if (huart->TxISR != NULL)
 8004950:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004952:	e6d6      	b.n	8004702 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004954:	2240      	movs	r2, #64	; 0x40
 8004956:	4213      	tst	r3, r2
 8004958:	d100      	bne.n	800495c <HAL_UART_IRQHandler+0x27c>
 800495a:	e746      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
 800495c:	4211      	tst	r1, r2
 800495e:	d100      	bne.n	8004962 <HAL_UART_IRQHandler+0x282>
 8004960:	e743      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004966:	2301      	movs	r3, #1
 8004968:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800496c:	6821      	ldr	r1, [r4, #0]
 800496e:	680b      	ldr	r3, [r1, #0]
 8004970:	4393      	bics	r3, r2
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004978:	2320      	movs	r3, #32
 800497a:	67e3      	str	r3, [r4, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800497c:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800497e:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8004980:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_TxCpltCallback(huart);
 8004982:	f7ff fe9f 	bl	80046c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004986:	e730      	b.n	80047ea <HAL_UART_IRQHandler+0x10a>
 8004988:	0000080f 	.word	0x0000080f
 800498c:	04000120 	.word	0x04000120
 8004990:	080046c9 	.word	0x080046c9
 8004994:	fffffeff 	.word	0xfffffeff
 8004998:	fffffedf 	.word	0xfffffedf

0800499c <UART_SetConfig>:
{
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a0:	6925      	ldr	r5, [r4, #16]
 80049a2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049a4:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a6:	432a      	orrs	r2, r5
 80049a8:	6965      	ldr	r5, [r4, #20]
 80049aa:	69c3      	ldr	r3, [r0, #28]
 80049ac:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ae:	6808      	ldr	r0, [r1, #0]
 80049b0:	4d38      	ldr	r5, [pc, #224]	; (8004a94 <UART_SetConfig+0xf8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b4:	4028      	ands	r0, r5
 80049b6:	4302      	orrs	r2, r0
 80049b8:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ba:	684a      	ldr	r2, [r1, #4]
 80049bc:	4836      	ldr	r0, [pc, #216]	; (8004a98 <UART_SetConfig+0xfc>)
  tmpreg |= huart->Init.OneBitSampling;
 80049be:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c0:	4002      	ands	r2, r0
 80049c2:	68e0      	ldr	r0, [r4, #12]
 80049c4:	4302      	orrs	r2, r0
 80049c6:	604a      	str	r2, [r1, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049c8:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ca:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80049cc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ce:	4d33      	ldr	r5, [pc, #204]	; (8004a9c <UART_SetConfig+0x100>)
 80049d0:	4028      	ands	r0, r5
 80049d2:	4302      	orrs	r2, r0
 80049d4:	608a      	str	r2, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d6:	2103      	movs	r1, #3
 80049d8:	4a31      	ldr	r2, [pc, #196]	; (8004aa0 <UART_SetConfig+0x104>)
 80049da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049dc:	400a      	ands	r2, r1
 80049de:	2180      	movs	r1, #128	; 0x80
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0209      	lsls	r1, r1, #8
 80049e4:	2a02      	cmp	r2, #2
 80049e6:	d849      	bhi.n	8004a7c <UART_SetConfig+0xe0>
 80049e8:	482e      	ldr	r0, [pc, #184]	; (8004aa4 <UART_SetConfig+0x108>)
 80049ea:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d123      	bne.n	8004a38 <UART_SetConfig+0x9c>
    switch (clocksource)
 80049f0:	2808      	cmp	r0, #8
 80049f2:	d815      	bhi.n	8004a20 <UART_SetConfig+0x84>
 80049f4:	f7fb fb92 	bl	800011c <__gnu_thumb1_case_uqi>
 80049f8:	14081444 	.word	0x14081444
 80049fc:	14141405 	.word	0x14141405
 8004a00:	09          	.byte	0x09
 8004a01:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8004a02:	f7ff fb23 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8004a06:	e03d      	b.n	8004a84 <UART_SetConfig+0xe8>
    switch (clocksource)
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <UART_SetConfig+0x10c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0a:	6861      	ldr	r1, [r4, #4]
 8004a0c:	0058      	lsls	r0, r3, #1
 8004a0e:	084b      	lsrs	r3, r1, #1
 8004a10:	18c0      	adds	r0, r0, r3
 8004a12:	f7fb fb97 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a16:	0002      	movs	r2, r0
 8004a18:	4b24      	ldr	r3, [pc, #144]	; (8004aac <UART_SetConfig+0x110>)
 8004a1a:	3a10      	subs	r2, #16
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d901      	bls.n	8004a24 <UART_SetConfig+0x88>
    switch (clocksource)
 8004a20:	2001      	movs	r0, #1
 8004a22:	e032      	b.n	8004a8a <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a24:	230f      	movs	r3, #15
 8004a26:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a28:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2a:	439a      	bics	r2, r3
 8004a2c:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a2e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	4303      	orrs	r3, r0
 8004a34:	60d3      	str	r3, [r2, #12]
 8004a36:	e027      	b.n	8004a88 <UART_SetConfig+0xec>
    switch (clocksource)
 8004a38:	2808      	cmp	r0, #8
 8004a3a:	d8f1      	bhi.n	8004a20 <UART_SetConfig+0x84>
 8004a3c:	f7fb fb64 	bl	8000108 <__gnu_thumb1_case_sqi>
 8004a40:	f01cf014 	.word	0xf01cf014
 8004a44:	f0f0f019 	.word	0xf0f0f019
 8004a48:	05          	.byte	0x05
 8004a49:	00          	.byte	0x00
 8004a4a:	2080      	movs	r0, #128	; 0x80
 8004a4c:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a4e:	6861      	ldr	r1, [r4, #4]
 8004a50:	084b      	lsrs	r3, r1, #1
 8004a52:	1818      	adds	r0, r3, r0
 8004a54:	f7fb fb76 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a58:	0002      	movs	r2, r0
 8004a5a:	4b14      	ldr	r3, [pc, #80]	; (8004aac <UART_SetConfig+0x110>)
 8004a5c:	3a10      	subs	r2, #16
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d8de      	bhi.n	8004a20 <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	60d8      	str	r0, [r3, #12]
 8004a66:	e00f      	b.n	8004a88 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a68:	f7ff fb9a 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d00b      	beq.n	8004a88 <UART_SetConfig+0xec>
 8004a70:	e7ed      	b.n	8004a4e <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8004a72:	f7ff faeb 	bl	800404c <HAL_RCC_GetSysClockFreq>
        break;
 8004a76:	e7f9      	b.n	8004a6c <UART_SetConfig+0xd0>
        pclk = (uint32_t) HSI_VALUE;
 8004a78:	480b      	ldr	r0, [pc, #44]	; (8004aa8 <UART_SetConfig+0x10c>)
 8004a7a:	e7e8      	b.n	8004a4e <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	d1f3      	bne.n	8004a68 <UART_SetConfig+0xcc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7ff fb8e 	bl	80041a0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8004a84:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8004a86:	d1c0      	bne.n	8004a0a <UART_SetConfig+0x6e>
 8004a88:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004a8e:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004a90:	bd70      	pop	{r4, r5, r6, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	ffff69f3 	.word	0xffff69f3
 8004a98:	ffffcfff 	.word	0xffffcfff
 8004a9c:	fffff4ff 	.word	0xfffff4ff
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	08006348 	.word	0x08006348
 8004aa8:	007a1200 	.word	0x007a1200
 8004aac:	0000ffef 	.word	0x0000ffef

08004ab0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004ab2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ab4:	07da      	lsls	r2, r3, #31
 8004ab6:	d506      	bpl.n	8004ac6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab8:	6801      	ldr	r1, [r0, #0]
 8004aba:	4c28      	ldr	r4, [pc, #160]	; (8004b5c <UART_AdvFeatureConfig+0xac>)
 8004abc:	684a      	ldr	r2, [r1, #4]
 8004abe:	4022      	ands	r2, r4
 8004ac0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004ac2:	4322      	orrs	r2, r4
 8004ac4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ac6:	079a      	lsls	r2, r3, #30
 8004ac8:	d506      	bpl.n	8004ad8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aca:	6801      	ldr	r1, [r0, #0]
 8004acc:	4c24      	ldr	r4, [pc, #144]	; (8004b60 <UART_AdvFeatureConfig+0xb0>)
 8004ace:	684a      	ldr	r2, [r1, #4]
 8004ad0:	4022      	ands	r2, r4
 8004ad2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004ad4:	4322      	orrs	r2, r4
 8004ad6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad8:	075a      	lsls	r2, r3, #29
 8004ada:	d506      	bpl.n	8004aea <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004adc:	6801      	ldr	r1, [r0, #0]
 8004ade:	4c21      	ldr	r4, [pc, #132]	; (8004b64 <UART_AdvFeatureConfig+0xb4>)
 8004ae0:	684a      	ldr	r2, [r1, #4]
 8004ae2:	4022      	ands	r2, r4
 8004ae4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004ae6:	4322      	orrs	r2, r4
 8004ae8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aea:	071a      	lsls	r2, r3, #28
 8004aec:	d506      	bpl.n	8004afc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aee:	6801      	ldr	r1, [r0, #0]
 8004af0:	4c1d      	ldr	r4, [pc, #116]	; (8004b68 <UART_AdvFeatureConfig+0xb8>)
 8004af2:	684a      	ldr	r2, [r1, #4]
 8004af4:	4022      	ands	r2, r4
 8004af6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004af8:	4322      	orrs	r2, r4
 8004afa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004afc:	06da      	lsls	r2, r3, #27
 8004afe:	d506      	bpl.n	8004b0e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b00:	6801      	ldr	r1, [r0, #0]
 8004b02:	4c1a      	ldr	r4, [pc, #104]	; (8004b6c <UART_AdvFeatureConfig+0xbc>)
 8004b04:	688a      	ldr	r2, [r1, #8]
 8004b06:	4022      	ands	r2, r4
 8004b08:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004b0a:	4322      	orrs	r2, r4
 8004b0c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b0e:	069a      	lsls	r2, r3, #26
 8004b10:	d506      	bpl.n	8004b20 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b12:	6801      	ldr	r1, [r0, #0]
 8004b14:	4c16      	ldr	r4, [pc, #88]	; (8004b70 <UART_AdvFeatureConfig+0xc0>)
 8004b16:	688a      	ldr	r2, [r1, #8]
 8004b18:	4022      	ands	r2, r4
 8004b1a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004b1c:	4322      	orrs	r2, r4
 8004b1e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	065a      	lsls	r2, r3, #25
 8004b22:	d510      	bpl.n	8004b46 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b24:	6801      	ldr	r1, [r0, #0]
 8004b26:	4d13      	ldr	r5, [pc, #76]	; (8004b74 <UART_AdvFeatureConfig+0xc4>)
 8004b28:	684a      	ldr	r2, [r1, #4]
 8004b2a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004b2c:	402a      	ands	r2, r5
 8004b2e:	4322      	orrs	r2, r4
 8004b30:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0352      	lsls	r2, r2, #13
 8004b36:	4294      	cmp	r4, r2
 8004b38:	d105      	bne.n	8004b46 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b3a:	684a      	ldr	r2, [r1, #4]
 8004b3c:	4c0e      	ldr	r4, [pc, #56]	; (8004b78 <UART_AdvFeatureConfig+0xc8>)
 8004b3e:	4022      	ands	r2, r4
 8004b40:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004b42:	4322      	orrs	r2, r4
 8004b44:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	d506      	bpl.n	8004b58 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4a:	6802      	ldr	r2, [r0, #0]
 8004b4c:	490b      	ldr	r1, [pc, #44]	; (8004b7c <UART_AdvFeatureConfig+0xcc>)
 8004b4e:	6853      	ldr	r3, [r2, #4]
 8004b50:	400b      	ands	r3, r1
 8004b52:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6053      	str	r3, [r2, #4]
}
 8004b58:	bd30      	pop	{r4, r5, pc}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	fffdffff 	.word	0xfffdffff
 8004b60:	fffeffff 	.word	0xfffeffff
 8004b64:	fffbffff 	.word	0xfffbffff
 8004b68:	ffff7fff 	.word	0xffff7fff
 8004b6c:	ffffefff 	.word	0xffffefff
 8004b70:	ffffdfff 	.word	0xffffdfff
 8004b74:	ffefffff 	.word	0xffefffff
 8004b78:	ff9fffff 	.word	0xff9fffff
 8004b7c:	fff7ffff 	.word	0xfff7ffff

08004b80 <UART_WaitOnFlagUntilTimeout>:
{
 8004b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b82:	0004      	movs	r4, r0
 8004b84:	000d      	movs	r5, r1
 8004b86:	0017      	movs	r7, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b88:	2608      	movs	r6, #8
{
 8004b8a:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8c:	6822      	ldr	r2, [r4, #0]
 8004b8e:	69d3      	ldr	r3, [r2, #28]
 8004b90:	402b      	ands	r3, r5
 8004b92:	1b5b      	subs	r3, r3, r5
 8004b94:	4259      	negs	r1, r3
 8004b96:	414b      	adcs	r3, r1
 8004b98:	42bb      	cmp	r3, r7
 8004b9a:	d001      	beq.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x20>
  return HAL_OK;
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e021      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8004ba0:	9b08      	ldr	r3, [sp, #32]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	d0f3      	beq.n	8004b8e <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba6:	f7fe fb53 	bl	8003250 <HAL_GetTick>
 8004baa:	9b00      	ldr	r3, [sp, #0]
 8004bac:	1ac0      	subs	r0, r0, r3
 8004bae:	9b08      	ldr	r3, [sp, #32]
 8004bb0:	4298      	cmp	r0, r3
 8004bb2:	d828      	bhi.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x86>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d026      	beq.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bb8:	2104      	movs	r1, #4
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	420a      	tst	r2, r1
 8004bc0:	d0e4      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	0011      	movs	r1, r2
 8004bc6:	4031      	ands	r1, r6
 8004bc8:	9101      	str	r1, [sp, #4]
 8004bca:	4232      	tst	r2, r6
 8004bcc:	d00b      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x66>
           UART_EndRxTransfer(huart);
 8004bce:	0020      	movs	r0, r4
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bd0:	621e      	str	r6, [r3, #32]
           UART_EndRxTransfer(huart);
 8004bd2:	f7ff fcc1 	bl	8004558 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bd6:	0023      	movs	r3, r4
 8004bd8:	3308      	adds	r3, #8
 8004bda:	67de      	str	r6, [r3, #124]	; 0x7c
           __HAL_UNLOCK(huart);
 8004bdc:	2300      	movs	r3, #0
           return HAL_ERROR;
 8004bde:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 8004be0:	3478      	adds	r4, #120	; 0x78
 8004be2:	7023      	strb	r3, [r4, #0]
}
 8004be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	69d9      	ldr	r1, [r3, #28]
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	4211      	tst	r1, r2
 8004bee:	d0cd      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf0:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004bf2:	0020      	movs	r0, r4
 8004bf4:	f7ff fcb0 	bl	8004558 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf8:	0023      	movs	r3, r4
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	67da      	str	r2, [r3, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004c00:	9b01      	ldr	r3, [sp, #4]
 8004c02:	3478      	adds	r4, #120	; 0x78
 8004c04:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004c06:	2003      	movs	r0, #3
 8004c08:	e7ec      	b.n	8004be4 <UART_WaitOnFlagUntilTimeout+0x64>
	...

08004c0c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	0003      	movs	r3, r0
{
 8004c0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	2500      	movs	r5, #0
{
 8004c12:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	3308      	adds	r3, #8
 8004c16:	67dd      	str	r5, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004c18:	f7fe fb1a 	bl	8003250 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c1c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8004c1e:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	071b      	lsls	r3, r3, #28
 8004c24:	d51d      	bpl.n	8004c62 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <UART_CheckIdleState+0xb8>)
 8004c2a:	002a      	movs	r2, r5
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	0389      	lsls	r1, r1, #14
 8004c30:	0003      	movs	r3, r0
 8004c32:	0020      	movs	r0, r4
 8004c34:	f7ff ffa4 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8004c38:	42a8      	cmp	r0, r5
 8004c3a:	d012      	beq.n	8004c62 <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c40:	2301      	movs	r3, #1
 8004c42:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c46:	2080      	movs	r0, #128	; 0x80
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	4383      	bics	r3, r0
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8004c54:	2320      	movs	r3, #32
 8004c56:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004c58:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	3478      	adds	r4, #120	; 0x78
 8004c5e:	7023      	strb	r3, [r4, #0]
}
 8004c60:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c62:	0025      	movs	r5, r4
 8004c64:	cd08      	ldmia	r5!, {r3}
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	075b      	lsls	r3, r3, #29
 8004c6a:	d523      	bpl.n	8004cb4 <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <UART_CheckIdleState+0xb8>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	0020      	movs	r0, r4
 8004c76:	0033      	movs	r3, r6
 8004c78:	03c9      	lsls	r1, r1, #15
 8004c7a:	f7ff ff81 	bl	8004b80 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d018      	beq.n	8004cb4 <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c82:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c86:	2201      	movs	r2, #1
 8004c88:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8c:	6821      	ldr	r1, [r4, #0]
 8004c8e:	4e0e      	ldr	r6, [pc, #56]	; (8004cc8 <UART_CheckIdleState+0xbc>)
 8004c90:	680b      	ldr	r3, [r1, #0]
 8004c92:	4033      	ands	r3, r6
 8004c94:	600b      	str	r3, [r1, #0]
 8004c96:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca2:	6821      	ldr	r1, [r4, #0]
 8004ca4:	688b      	ldr	r3, [r1, #8]
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
 8004caa:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	67eb      	str	r3, [r5, #124]	; 0x7c
 8004cb2:	e7d1      	b.n	8004c58 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8004cb4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cba:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cbc:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cbe:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8004cc0:	e7cb      	b.n	8004c5a <UART_CheckIdleState+0x4e>
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	01ffffff 	.word	0x01ffffff
 8004cc8:	fffffedf 	.word	0xfffffedf

08004ccc <HAL_UART_Init>:
{
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004cd2:	2001      	movs	r0, #1
}
 8004cd4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8004cdc:	0002      	movs	r2, r0
 8004cde:	3278      	adds	r2, #120	; 0x78
 8004ce0:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004ce2:	f7fe fa0f 	bl	8003104 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ce6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004ce8:	2101      	movs	r1, #1
 8004cea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004cec:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004cee:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cf0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004cf2:	438b      	bics	r3, r1
 8004cf4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cf6:	f7ff fe51 	bl	800499c <UART_SetConfig>
 8004cfa:	2801      	cmp	r0, #1
 8004cfc:	d0e9      	beq.n	8004cd2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004d04:	0020      	movs	r0, r4
 8004d06:	f7ff fed3 	bl	8004ab0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	4907      	ldr	r1, [pc, #28]	; (8004d2c <HAL_UART_Init+0x60>)
 8004d0e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004d10:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d12:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d14:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004d1e:	2201      	movs	r2, #1
 8004d20:	6819      	ldr	r1, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004d26:	f7ff ff71 	bl	8004c0c <UART_CheckIdleState>
 8004d2a:	e7d3      	b.n	8004cd4 <HAL_UART_Init+0x8>
 8004d2c:	ffffb7ff 	.word	0xffffb7ff

08004d30 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d30:	4770      	bx	lr
	...

08004d34 <srand>:
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <srand+0x48>)
 8004d36:	b570      	push	{r4, r5, r6, lr}
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	0004      	movs	r4, r0
 8004d3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d116      	bne.n	8004d70 <srand+0x3c>
 8004d42:	2018      	movs	r0, #24
 8004d44:	f000 fb8e 	bl	8005464 <malloc>
 8004d48:	1e02      	subs	r2, r0, #0
 8004d4a:	6328      	str	r0, [r5, #48]	; 0x30
 8004d4c:	d104      	bne.n	8004d58 <srand+0x24>
 8004d4e:	2146      	movs	r1, #70	; 0x46
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <srand+0x4c>)
 8004d52:	480c      	ldr	r0, [pc, #48]	; (8004d84 <srand+0x50>)
 8004d54:	f000 fb1e 	bl	8005394 <__assert_func>
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <srand+0x54>)
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	6003      	str	r3, [r0, #0]
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <srand+0x58>)
 8004d60:	6043      	str	r3, [r0, #4]
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <srand+0x5c>)
 8004d64:	6083      	str	r3, [r0, #8]
 8004d66:	230b      	movs	r3, #11
 8004d68:	8183      	strh	r3, [r0, #12]
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	6110      	str	r0, [r2, #16]
 8004d6e:	6151      	str	r1, [r2, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004d74:	611c      	str	r4, [r3, #16]
 8004d76:	615a      	str	r2, [r3, #20]
 8004d78:	bd70      	pop	{r4, r5, r6, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	20000064 	.word	0x20000064
 8004d80:	0800634b 	.word	0x0800634b
 8004d84:	08006362 	.word	0x08006362
 8004d88:	abcd330e 	.word	0xabcd330e
 8004d8c:	e66d1234 	.word	0xe66d1234
 8004d90:	0005deec 	.word	0x0005deec

08004d94 <rand>:
 8004d94:	4b16      	ldr	r3, [pc, #88]	; (8004df0 <rand+0x5c>)
 8004d96:	b510      	push	{r4, lr}
 8004d98:	681c      	ldr	r4, [r3, #0]
 8004d9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d116      	bne.n	8004dce <rand+0x3a>
 8004da0:	2018      	movs	r0, #24
 8004da2:	f000 fb5f 	bl	8005464 <malloc>
 8004da6:	1e02      	subs	r2, r0, #0
 8004da8:	6320      	str	r0, [r4, #48]	; 0x30
 8004daa:	d104      	bne.n	8004db6 <rand+0x22>
 8004dac:	2152      	movs	r1, #82	; 0x52
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <rand+0x60>)
 8004db0:	4811      	ldr	r0, [pc, #68]	; (8004df8 <rand+0x64>)
 8004db2:	f000 faef 	bl	8005394 <__assert_func>
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <rand+0x68>)
 8004db8:	2100      	movs	r1, #0
 8004dba:	6003      	str	r3, [r0, #0]
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <rand+0x6c>)
 8004dbe:	6043      	str	r3, [r0, #4]
 8004dc0:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <rand+0x70>)
 8004dc2:	6083      	str	r3, [r0, #8]
 8004dc4:	230b      	movs	r3, #11
 8004dc6:	8183      	strh	r3, [r0, #12]
 8004dc8:	2001      	movs	r0, #1
 8004dca:	6110      	str	r0, [r2, #16]
 8004dcc:	6151      	str	r1, [r2, #20]
 8004dce:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8004dd0:	4a0d      	ldr	r2, [pc, #52]	; (8004e08 <rand+0x74>)
 8004dd2:	6920      	ldr	r0, [r4, #16]
 8004dd4:	6961      	ldr	r1, [r4, #20]
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <rand+0x78>)
 8004dd8:	f7fb fb68 	bl	80004ac <__aeabi_lmul>
 8004ddc:	2201      	movs	r2, #1
 8004dde:	2300      	movs	r3, #0
 8004de0:	1880      	adds	r0, r0, r2
 8004de2:	4159      	adcs	r1, r3
 8004de4:	6120      	str	r0, [r4, #16]
 8004de6:	6161      	str	r1, [r4, #20]
 8004de8:	0048      	lsls	r0, r1, #1
 8004dea:	0840      	lsrs	r0, r0, #1
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	20000064 	.word	0x20000064
 8004df4:	0800634b 	.word	0x0800634b
 8004df8:	08006362 	.word	0x08006362
 8004dfc:	abcd330e 	.word	0xabcd330e
 8004e00:	e66d1234 	.word	0xe66d1234
 8004e04:	0005deec 	.word	0x0005deec
 8004e08:	4c957f2d 	.word	0x4c957f2d
 8004e0c:	5851f42d 	.word	0x5851f42d

08004e10 <std>:
 8004e10:	2300      	movs	r3, #0
 8004e12:	b510      	push	{r4, lr}
 8004e14:	0004      	movs	r4, r0
 8004e16:	6003      	str	r3, [r0, #0]
 8004e18:	6043      	str	r3, [r0, #4]
 8004e1a:	6083      	str	r3, [r0, #8]
 8004e1c:	8181      	strh	r1, [r0, #12]
 8004e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e20:	81c2      	strh	r2, [r0, #14]
 8004e22:	6103      	str	r3, [r0, #16]
 8004e24:	6143      	str	r3, [r0, #20]
 8004e26:	6183      	str	r3, [r0, #24]
 8004e28:	0019      	movs	r1, r3
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	305c      	adds	r0, #92	; 0x5c
 8004e2e:	f000 fa25 	bl	800527c <memset>
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <std+0x50>)
 8004e34:	6224      	str	r4, [r4, #32]
 8004e36:	6263      	str	r3, [r4, #36]	; 0x24
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <std+0x54>)
 8004e3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <std+0x58>)
 8004e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <std+0x5c>)
 8004e42:	6323      	str	r3, [r4, #48]	; 0x30
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <std+0x60>)
 8004e46:	429c      	cmp	r4, r3
 8004e48:	d005      	beq.n	8004e56 <std+0x46>
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <std+0x64>)
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	d002      	beq.n	8004e56 <std+0x46>
 8004e50:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <std+0x68>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d103      	bne.n	8004e5e <std+0x4e>
 8004e56:	0020      	movs	r0, r4
 8004e58:	3058      	adds	r0, #88	; 0x58
 8004e5a:	f000 fa8f 	bl	800537c <__retarget_lock_init_recursive>
 8004e5e:	bd10      	pop	{r4, pc}
 8004e60:	08005099 	.word	0x08005099
 8004e64:	080050c1 	.word	0x080050c1
 8004e68:	080050f9 	.word	0x080050f9
 8004e6c:	08005125 	.word	0x08005125
 8004e70:	20000214 	.word	0x20000214
 8004e74:	2000027c 	.word	0x2000027c
 8004e78:	200002e4 	.word	0x200002e4

08004e7c <stdio_exit_handler>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4a03      	ldr	r2, [pc, #12]	; (8004e8c <stdio_exit_handler+0x10>)
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <stdio_exit_handler+0x14>)
 8004e82:	4804      	ldr	r0, [pc, #16]	; (8004e94 <stdio_exit_handler+0x18>)
 8004e84:	f000 f86c 	bl	8004f60 <_fwalk_sglue>
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	2000000c 	.word	0x2000000c
 8004e90:	08005cb9 	.word	0x08005cb9
 8004e94:	20000018 	.word	0x20000018

08004e98 <cleanup_stdio>:
 8004e98:	6841      	ldr	r1, [r0, #4]
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <cleanup_stdio+0x30>)
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	0004      	movs	r4, r0
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d001      	beq.n	8004ea8 <cleanup_stdio+0x10>
 8004ea4:	f000 ff08 	bl	8005cb8 <_fflush_r>
 8004ea8:	68a1      	ldr	r1, [r4, #8]
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <cleanup_stdio+0x34>)
 8004eac:	4299      	cmp	r1, r3
 8004eae:	d002      	beq.n	8004eb6 <cleanup_stdio+0x1e>
 8004eb0:	0020      	movs	r0, r4
 8004eb2:	f000 ff01 	bl	8005cb8 <_fflush_r>
 8004eb6:	68e1      	ldr	r1, [r4, #12]
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <cleanup_stdio+0x38>)
 8004eba:	4299      	cmp	r1, r3
 8004ebc:	d002      	beq.n	8004ec4 <cleanup_stdio+0x2c>
 8004ebe:	0020      	movs	r0, r4
 8004ec0:	f000 fefa 	bl	8005cb8 <_fflush_r>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	20000214 	.word	0x20000214
 8004ecc:	2000027c 	.word	0x2000027c
 8004ed0:	200002e4 	.word	0x200002e4

08004ed4 <global_stdio_init.part.0>:
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <global_stdio_init.part.0+0x28>)
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <global_stdio_init.part.0+0x2c>)
 8004eda:	2104      	movs	r1, #4
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	4809      	ldr	r0, [pc, #36]	; (8004f04 <global_stdio_init.part.0+0x30>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f7ff ff95 	bl	8004e10 <std>
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2109      	movs	r1, #9
 8004eea:	4807      	ldr	r0, [pc, #28]	; (8004f08 <global_stdio_init.part.0+0x34>)
 8004eec:	f7ff ff90 	bl	8004e10 <std>
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	2112      	movs	r1, #18
 8004ef4:	4805      	ldr	r0, [pc, #20]	; (8004f0c <global_stdio_init.part.0+0x38>)
 8004ef6:	f7ff ff8b 	bl	8004e10 <std>
 8004efa:	bd10      	pop	{r4, pc}
 8004efc:	2000034c 	.word	0x2000034c
 8004f00:	08004e7d 	.word	0x08004e7d
 8004f04:	20000214 	.word	0x20000214
 8004f08:	2000027c 	.word	0x2000027c
 8004f0c:	200002e4 	.word	0x200002e4

08004f10 <__sfp_lock_acquire>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	4802      	ldr	r0, [pc, #8]	; (8004f1c <__sfp_lock_acquire+0xc>)
 8004f14:	f000 fa33 	bl	800537e <__retarget_lock_acquire_recursive>
 8004f18:	bd10      	pop	{r4, pc}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	20000355 	.word	0x20000355

08004f20 <__sfp_lock_release>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4802      	ldr	r0, [pc, #8]	; (8004f2c <__sfp_lock_release+0xc>)
 8004f24:	f000 fa2c 	bl	8005380 <__retarget_lock_release_recursive>
 8004f28:	bd10      	pop	{r4, pc}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	20000355 	.word	0x20000355

08004f30 <__sinit>:
 8004f30:	b510      	push	{r4, lr}
 8004f32:	0004      	movs	r4, r0
 8004f34:	f7ff ffec 	bl	8004f10 <__sfp_lock_acquire>
 8004f38:	6a23      	ldr	r3, [r4, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <__sinit+0x14>
 8004f3e:	f7ff ffef 	bl	8004f20 <__sfp_lock_release>
 8004f42:	bd10      	pop	{r4, pc}
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <__sinit+0x28>)
 8004f46:	6223      	str	r3, [r4, #32]
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <__sinit+0x2c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f6      	bne.n	8004f3e <__sinit+0xe>
 8004f50:	f7ff ffc0 	bl	8004ed4 <global_stdio_init.part.0>
 8004f54:	e7f3      	b.n	8004f3e <__sinit+0xe>
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	08004e99 	.word	0x08004e99
 8004f5c:	2000034c 	.word	0x2000034c

08004f60 <_fwalk_sglue>:
 8004f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f62:	0014      	movs	r4, r2
 8004f64:	2600      	movs	r6, #0
 8004f66:	9000      	str	r0, [sp, #0]
 8004f68:	9101      	str	r1, [sp, #4]
 8004f6a:	68a5      	ldr	r5, [r4, #8]
 8004f6c:	6867      	ldr	r7, [r4, #4]
 8004f6e:	3f01      	subs	r7, #1
 8004f70:	d504      	bpl.n	8004f7c <_fwalk_sglue+0x1c>
 8004f72:	6824      	ldr	r4, [r4, #0]
 8004f74:	2c00      	cmp	r4, #0
 8004f76:	d1f8      	bne.n	8004f6a <_fwalk_sglue+0xa>
 8004f78:	0030      	movs	r0, r6
 8004f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f7c:	89ab      	ldrh	r3, [r5, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d908      	bls.n	8004f94 <_fwalk_sglue+0x34>
 8004f82:	220e      	movs	r2, #14
 8004f84:	5eab      	ldrsh	r3, [r5, r2]
 8004f86:	3301      	adds	r3, #1
 8004f88:	d004      	beq.n	8004f94 <_fwalk_sglue+0x34>
 8004f8a:	0029      	movs	r1, r5
 8004f8c:	9800      	ldr	r0, [sp, #0]
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	4798      	blx	r3
 8004f92:	4306      	orrs	r6, r0
 8004f94:	3568      	adds	r5, #104	; 0x68
 8004f96:	e7ea      	b.n	8004f6e <_fwalk_sglue+0xe>

08004f98 <_puts_r>:
 8004f98:	6a03      	ldr	r3, [r0, #32]
 8004f9a:	b570      	push	{r4, r5, r6, lr}
 8004f9c:	0005      	movs	r5, r0
 8004f9e:	000e      	movs	r6, r1
 8004fa0:	6884      	ldr	r4, [r0, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <_puts_r+0x12>
 8004fa6:	f7ff ffc3 	bl	8004f30 <__sinit>
 8004faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fac:	07db      	lsls	r3, r3, #31
 8004fae:	d405      	bmi.n	8004fbc <_puts_r+0x24>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	059b      	lsls	r3, r3, #22
 8004fb4:	d402      	bmi.n	8004fbc <_puts_r+0x24>
 8004fb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb8:	f000 f9e1 	bl	800537e <__retarget_lock_acquire_recursive>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	071b      	lsls	r3, r3, #28
 8004fc0:	d502      	bpl.n	8004fc8 <_puts_r+0x30>
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11f      	bne.n	8005008 <_puts_r+0x70>
 8004fc8:	0021      	movs	r1, r4
 8004fca:	0028      	movs	r0, r5
 8004fcc:	f000 f8f2 	bl	80051b4 <__swsetup_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d019      	beq.n	8005008 <_puts_r+0x70>
 8004fd4:	2501      	movs	r5, #1
 8004fd6:	426d      	negs	r5, r5
 8004fd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fda:	07db      	lsls	r3, r3, #31
 8004fdc:	d405      	bmi.n	8004fea <_puts_r+0x52>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	059b      	lsls	r3, r3, #22
 8004fe2:	d402      	bmi.n	8004fea <_puts_r+0x52>
 8004fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fe6:	f000 f9cb 	bl	8005380 <__retarget_lock_release_recursive>
 8004fea:	0028      	movs	r0, r5
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
 8004fee:	3601      	adds	r6, #1
 8004ff0:	60a3      	str	r3, [r4, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da04      	bge.n	8005000 <_puts_r+0x68>
 8004ff6:	69a2      	ldr	r2, [r4, #24]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	dc16      	bgt.n	800502a <_puts_r+0x92>
 8004ffc:	290a      	cmp	r1, #10
 8004ffe:	d014      	beq.n	800502a <_puts_r+0x92>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	6022      	str	r2, [r4, #0]
 8005006:	7019      	strb	r1, [r3, #0]
 8005008:	68a3      	ldr	r3, [r4, #8]
 800500a:	7831      	ldrb	r1, [r6, #0]
 800500c:	3b01      	subs	r3, #1
 800500e:	2900      	cmp	r1, #0
 8005010:	d1ed      	bne.n	8004fee <_puts_r+0x56>
 8005012:	60a3      	str	r3, [r4, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	da0f      	bge.n	8005038 <_puts_r+0xa0>
 8005018:	0028      	movs	r0, r5
 800501a:	0022      	movs	r2, r4
 800501c:	310a      	adds	r1, #10
 800501e:	f000 f887 	bl	8005130 <__swbuf_r>
 8005022:	250a      	movs	r5, #10
 8005024:	3001      	adds	r0, #1
 8005026:	d1d7      	bne.n	8004fd8 <_puts_r+0x40>
 8005028:	e7d4      	b.n	8004fd4 <_puts_r+0x3c>
 800502a:	0022      	movs	r2, r4
 800502c:	0028      	movs	r0, r5
 800502e:	f000 f87f 	bl	8005130 <__swbuf_r>
 8005032:	3001      	adds	r0, #1
 8005034:	d1e8      	bne.n	8005008 <_puts_r+0x70>
 8005036:	e7cd      	b.n	8004fd4 <_puts_r+0x3c>
 8005038:	250a      	movs	r5, #10
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	6022      	str	r2, [r4, #0]
 8005040:	701d      	strb	r5, [r3, #0]
 8005042:	e7c9      	b.n	8004fd8 <_puts_r+0x40>

08005044 <puts>:
 8005044:	b510      	push	{r4, lr}
 8005046:	4b03      	ldr	r3, [pc, #12]	; (8005054 <puts+0x10>)
 8005048:	0001      	movs	r1, r0
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	f7ff ffa4 	bl	8004f98 <_puts_r>
 8005050:	bd10      	pop	{r4, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	20000064 	.word	0x20000064

08005058 <siprintf>:
 8005058:	b40e      	push	{r1, r2, r3}
 800505a:	b500      	push	{lr}
 800505c:	490b      	ldr	r1, [pc, #44]	; (800508c <siprintf+0x34>)
 800505e:	b09c      	sub	sp, #112	; 0x70
 8005060:	ab1d      	add	r3, sp, #116	; 0x74
 8005062:	9002      	str	r0, [sp, #8]
 8005064:	9006      	str	r0, [sp, #24]
 8005066:	9107      	str	r1, [sp, #28]
 8005068:	9104      	str	r1, [sp, #16]
 800506a:	4809      	ldr	r0, [pc, #36]	; (8005090 <siprintf+0x38>)
 800506c:	4909      	ldr	r1, [pc, #36]	; (8005094 <siprintf+0x3c>)
 800506e:	cb04      	ldmia	r3!, {r2}
 8005070:	9105      	str	r1, [sp, #20]
 8005072:	6800      	ldr	r0, [r0, #0]
 8005074:	a902      	add	r1, sp, #8
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	f000 fb14 	bl	80056a4 <_svfiprintf_r>
 800507c:	2200      	movs	r2, #0
 800507e:	9b02      	ldr	r3, [sp, #8]
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	b01c      	add	sp, #112	; 0x70
 8005084:	bc08      	pop	{r3}
 8005086:	b003      	add	sp, #12
 8005088:	4718      	bx	r3
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	7fffffff 	.word	0x7fffffff
 8005090:	20000064 	.word	0x20000064
 8005094:	ffff0208 	.word	0xffff0208

08005098 <__sread>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	000c      	movs	r4, r1
 800509c:	250e      	movs	r5, #14
 800509e:	5f49      	ldrsh	r1, [r1, r5]
 80050a0:	f000 f91a 	bl	80052d8 <_read_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	db03      	blt.n	80050b0 <__sread+0x18>
 80050a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050aa:	181b      	adds	r3, r3, r0
 80050ac:	6563      	str	r3, [r4, #84]	; 0x54
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	4a02      	ldr	r2, [pc, #8]	; (80050bc <__sread+0x24>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	e7f9      	b.n	80050ae <__sread+0x16>
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	ffffefff 	.word	0xffffefff

080050c0 <__swrite>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	001f      	movs	r7, r3
 80050c4:	898b      	ldrh	r3, [r1, #12]
 80050c6:	0005      	movs	r5, r0
 80050c8:	000c      	movs	r4, r1
 80050ca:	0016      	movs	r6, r2
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	d505      	bpl.n	80050dc <__swrite+0x1c>
 80050d0:	230e      	movs	r3, #14
 80050d2:	5ec9      	ldrsh	r1, [r1, r3]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2302      	movs	r3, #2
 80050d8:	f000 f8ea 	bl	80052b0 <_lseek_r>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	4a05      	ldr	r2, [pc, #20]	; (80050f4 <__swrite+0x34>)
 80050e0:	0028      	movs	r0, r5
 80050e2:	4013      	ands	r3, r2
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	0032      	movs	r2, r6
 80050e8:	230e      	movs	r3, #14
 80050ea:	5ee1      	ldrsh	r1, [r4, r3]
 80050ec:	003b      	movs	r3, r7
 80050ee:	f000 f907 	bl	8005300 <_write_r>
 80050f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050f4:	ffffefff 	.word	0xffffefff

080050f8 <__sseek>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	000c      	movs	r4, r1
 80050fc:	250e      	movs	r5, #14
 80050fe:	5f49      	ldrsh	r1, [r1, r5]
 8005100:	f000 f8d6 	bl	80052b0 <_lseek_r>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	1c42      	adds	r2, r0, #1
 8005108:	d103      	bne.n	8005112 <__sseek+0x1a>
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <__sseek+0x28>)
 800510c:	4013      	ands	r3, r2
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	bd70      	pop	{r4, r5, r6, pc}
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	0152      	lsls	r2, r2, #5
 8005116:	4313      	orrs	r3, r2
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	6560      	str	r0, [r4, #84]	; 0x54
 800511c:	e7f8      	b.n	8005110 <__sseek+0x18>
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	ffffefff 	.word	0xffffefff

08005124 <__sclose>:
 8005124:	b510      	push	{r4, lr}
 8005126:	230e      	movs	r3, #14
 8005128:	5ec9      	ldrsh	r1, [r1, r3]
 800512a:	f000 f8af 	bl	800528c <_close_r>
 800512e:	bd10      	pop	{r4, pc}

08005130 <__swbuf_r>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	0006      	movs	r6, r0
 8005134:	000d      	movs	r5, r1
 8005136:	0014      	movs	r4, r2
 8005138:	2800      	cmp	r0, #0
 800513a:	d004      	beq.n	8005146 <__swbuf_r+0x16>
 800513c:	6a03      	ldr	r3, [r0, #32]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <__swbuf_r+0x16>
 8005142:	f7ff fef5 	bl	8004f30 <__sinit>
 8005146:	69a3      	ldr	r3, [r4, #24]
 8005148:	60a3      	str	r3, [r4, #8]
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	071b      	lsls	r3, r3, #28
 800514e:	d528      	bpl.n	80051a2 <__swbuf_r+0x72>
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d025      	beq.n	80051a2 <__swbuf_r+0x72>
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	b2ef      	uxtb	r7, r5
 800515c:	1ac0      	subs	r0, r0, r3
 800515e:	6963      	ldr	r3, [r4, #20]
 8005160:	b2ed      	uxtb	r5, r5
 8005162:	4283      	cmp	r3, r0
 8005164:	dc05      	bgt.n	8005172 <__swbuf_r+0x42>
 8005166:	0021      	movs	r1, r4
 8005168:	0030      	movs	r0, r6
 800516a:	f000 fda5 	bl	8005cb8 <_fflush_r>
 800516e:	2800      	cmp	r0, #0
 8005170:	d11d      	bne.n	80051ae <__swbuf_r+0x7e>
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	3001      	adds	r0, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	60a3      	str	r3, [r4, #8]
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	6022      	str	r2, [r4, #0]
 8005180:	701f      	strb	r7, [r3, #0]
 8005182:	6963      	ldr	r3, [r4, #20]
 8005184:	4283      	cmp	r3, r0
 8005186:	d004      	beq.n	8005192 <__swbuf_r+0x62>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	07db      	lsls	r3, r3, #31
 800518c:	d507      	bpl.n	800519e <__swbuf_r+0x6e>
 800518e:	2d0a      	cmp	r5, #10
 8005190:	d105      	bne.n	800519e <__swbuf_r+0x6e>
 8005192:	0021      	movs	r1, r4
 8005194:	0030      	movs	r0, r6
 8005196:	f000 fd8f 	bl	8005cb8 <_fflush_r>
 800519a:	2800      	cmp	r0, #0
 800519c:	d107      	bne.n	80051ae <__swbuf_r+0x7e>
 800519e:	0028      	movs	r0, r5
 80051a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a2:	0021      	movs	r1, r4
 80051a4:	0030      	movs	r0, r6
 80051a6:	f000 f805 	bl	80051b4 <__swsetup_r>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d0d3      	beq.n	8005156 <__swbuf_r+0x26>
 80051ae:	2501      	movs	r5, #1
 80051b0:	426d      	negs	r5, r5
 80051b2:	e7f4      	b.n	800519e <__swbuf_r+0x6e>

080051b4 <__swsetup_r>:
 80051b4:	4b30      	ldr	r3, [pc, #192]	; (8005278 <__swsetup_r+0xc4>)
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	0005      	movs	r5, r0
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	000c      	movs	r4, r1
 80051be:	2800      	cmp	r0, #0
 80051c0:	d004      	beq.n	80051cc <__swsetup_r+0x18>
 80051c2:	6a03      	ldr	r3, [r0, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <__swsetup_r+0x18>
 80051c8:	f7ff feb2 	bl	8004f30 <__sinit>
 80051cc:	230c      	movs	r3, #12
 80051ce:	5ee2      	ldrsh	r2, [r4, r3]
 80051d0:	b293      	uxth	r3, r2
 80051d2:	0711      	lsls	r1, r2, #28
 80051d4:	d423      	bmi.n	800521e <__swsetup_r+0x6a>
 80051d6:	06d9      	lsls	r1, r3, #27
 80051d8:	d407      	bmi.n	80051ea <__swsetup_r+0x36>
 80051da:	2309      	movs	r3, #9
 80051dc:	2001      	movs	r0, #1
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	3337      	adds	r3, #55	; 0x37
 80051e2:	4313      	orrs	r3, r2
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	4240      	negs	r0, r0
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
 80051ea:	075b      	lsls	r3, r3, #29
 80051ec:	d513      	bpl.n	8005216 <__swsetup_r+0x62>
 80051ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d008      	beq.n	8005206 <__swsetup_r+0x52>
 80051f4:	0023      	movs	r3, r4
 80051f6:	3344      	adds	r3, #68	; 0x44
 80051f8:	4299      	cmp	r1, r3
 80051fa:	d002      	beq.n	8005202 <__swsetup_r+0x4e>
 80051fc:	0028      	movs	r0, r5
 80051fe:	f000 f8e7 	bl	80053d0 <_free_r>
 8005202:	2300      	movs	r3, #0
 8005204:	6363      	str	r3, [r4, #52]	; 0x34
 8005206:	2224      	movs	r2, #36	; 0x24
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	4393      	bics	r3, r2
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	2300      	movs	r3, #0
 8005210:	6063      	str	r3, [r4, #4]
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	2308      	movs	r3, #8
 8005218:	89a2      	ldrh	r2, [r4, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <__swsetup_r+0x88>
 8005224:	21a0      	movs	r1, #160	; 0xa0
 8005226:	2280      	movs	r2, #128	; 0x80
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	0089      	lsls	r1, r1, #2
 800522c:	0092      	lsls	r2, r2, #2
 800522e:	400b      	ands	r3, r1
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <__swsetup_r+0x88>
 8005234:	0021      	movs	r1, r4
 8005236:	0028      	movs	r0, r5
 8005238:	f000 fda2 	bl	8005d80 <__smakebuf_r>
 800523c:	220c      	movs	r2, #12
 800523e:	5ea3      	ldrsh	r3, [r4, r2]
 8005240:	2001      	movs	r0, #1
 8005242:	001a      	movs	r2, r3
 8005244:	b299      	uxth	r1, r3
 8005246:	4002      	ands	r2, r0
 8005248:	4203      	tst	r3, r0
 800524a:	d00f      	beq.n	800526c <__swsetup_r+0xb8>
 800524c:	2200      	movs	r2, #0
 800524e:	60a2      	str	r2, [r4, #8]
 8005250:	6962      	ldr	r2, [r4, #20]
 8005252:	4252      	negs	r2, r2
 8005254:	61a2      	str	r2, [r4, #24]
 8005256:	2000      	movs	r0, #0
 8005258:	6922      	ldr	r2, [r4, #16]
 800525a:	4282      	cmp	r2, r0
 800525c:	d1c4      	bne.n	80051e8 <__swsetup_r+0x34>
 800525e:	0609      	lsls	r1, r1, #24
 8005260:	d5c2      	bpl.n	80051e8 <__swsetup_r+0x34>
 8005262:	2240      	movs	r2, #64	; 0x40
 8005264:	4313      	orrs	r3, r2
 8005266:	81a3      	strh	r3, [r4, #12]
 8005268:	3801      	subs	r0, #1
 800526a:	e7bd      	b.n	80051e8 <__swsetup_r+0x34>
 800526c:	0788      	lsls	r0, r1, #30
 800526e:	d400      	bmi.n	8005272 <__swsetup_r+0xbe>
 8005270:	6962      	ldr	r2, [r4, #20]
 8005272:	60a2      	str	r2, [r4, #8]
 8005274:	e7ef      	b.n	8005256 <__swsetup_r+0xa2>
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	20000064 	.word	0x20000064

0800527c <memset>:
 800527c:	0003      	movs	r3, r0
 800527e:	1882      	adds	r2, r0, r2
 8005280:	4293      	cmp	r3, r2
 8005282:	d100      	bne.n	8005286 <memset+0xa>
 8005284:	4770      	bx	lr
 8005286:	7019      	strb	r1, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	e7f9      	b.n	8005280 <memset+0x4>

0800528c <_close_r>:
 800528c:	2300      	movs	r3, #0
 800528e:	b570      	push	{r4, r5, r6, lr}
 8005290:	4d06      	ldr	r5, [pc, #24]	; (80052ac <_close_r+0x20>)
 8005292:	0004      	movs	r4, r0
 8005294:	0008      	movs	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fd feb2 	bl	8003000 <_close>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d103      	bne.n	80052a8 <_close_r+0x1c>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d000      	beq.n	80052a8 <_close_r+0x1c>
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	20000350 	.word	0x20000350

080052b0 <_lseek_r>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	0004      	movs	r4, r0
 80052b4:	0008      	movs	r0, r1
 80052b6:	0011      	movs	r1, r2
 80052b8:	001a      	movs	r2, r3
 80052ba:	2300      	movs	r3, #0
 80052bc:	4d05      	ldr	r5, [pc, #20]	; (80052d4 <_lseek_r+0x24>)
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fd fea8 	bl	8003014 <_lseek>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d103      	bne.n	80052d0 <_lseek_r+0x20>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d000      	beq.n	80052d0 <_lseek_r+0x20>
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	20000350 	.word	0x20000350

080052d8 <_read_r>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	0004      	movs	r4, r0
 80052dc:	0008      	movs	r0, r1
 80052de:	0011      	movs	r1, r2
 80052e0:	001a      	movs	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	4d05      	ldr	r5, [pc, #20]	; (80052fc <_read_r+0x24>)
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	f7fd fe70 	bl	8002fcc <_read>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d103      	bne.n	80052f8 <_read_r+0x20>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d000      	beq.n	80052f8 <_read_r+0x20>
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	20000350 	.word	0x20000350

08005300 <_write_r>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	0004      	movs	r4, r0
 8005304:	0008      	movs	r0, r1
 8005306:	0011      	movs	r1, r2
 8005308:	001a      	movs	r2, r3
 800530a:	2300      	movs	r3, #0
 800530c:	4d05      	ldr	r5, [pc, #20]	; (8005324 <_write_r+0x24>)
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fd fe69 	bl	8002fe6 <_write>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d103      	bne.n	8005320 <_write_r+0x20>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <_write_r+0x20>
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	20000350 	.word	0x20000350

08005328 <__errno>:
 8005328:	4b01      	ldr	r3, [pc, #4]	; (8005330 <__errno+0x8>)
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	4770      	bx	lr
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	20000064 	.word	0x20000064

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	2600      	movs	r6, #0
 8005338:	4c0c      	ldr	r4, [pc, #48]	; (800536c <__libc_init_array+0x38>)
 800533a:	4d0d      	ldr	r5, [pc, #52]	; (8005370 <__libc_init_array+0x3c>)
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	42a6      	cmp	r6, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	2600      	movs	r6, #0
 8005346:	f000 ff79 	bl	800623c <_init>
 800534a:	4c0a      	ldr	r4, [pc, #40]	; (8005374 <__libc_init_array+0x40>)
 800534c:	4d0a      	ldr	r5, [pc, #40]	; (8005378 <__libc_init_array+0x44>)
 800534e:	1b64      	subs	r4, r4, r5
 8005350:	10a4      	asrs	r4, r4, #2
 8005352:	42a6      	cmp	r6, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	00b3      	lsls	r3, r6, #2
 800535a:	58eb      	ldr	r3, [r5, r3]
 800535c:	4798      	blx	r3
 800535e:	3601      	adds	r6, #1
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	00b3      	lsls	r3, r6, #2
 8005364:	58eb      	ldr	r3, [r5, r3]
 8005366:	4798      	blx	r3
 8005368:	3601      	adds	r6, #1
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	0800642c 	.word	0x0800642c
 8005370:	0800642c 	.word	0x0800642c
 8005374:	08006430 	.word	0x08006430
 8005378:	0800642c 	.word	0x0800642c

0800537c <__retarget_lock_init_recursive>:
 800537c:	4770      	bx	lr

0800537e <__retarget_lock_acquire_recursive>:
 800537e:	4770      	bx	lr

08005380 <__retarget_lock_release_recursive>:
 8005380:	4770      	bx	lr

08005382 <memcpy>:
 8005382:	2300      	movs	r3, #0
 8005384:	b510      	push	{r4, lr}
 8005386:	429a      	cmp	r2, r3
 8005388:	d100      	bne.n	800538c <memcpy+0xa>
 800538a:	bd10      	pop	{r4, pc}
 800538c:	5ccc      	ldrb	r4, [r1, r3]
 800538e:	54c4      	strb	r4, [r0, r3]
 8005390:	3301      	adds	r3, #1
 8005392:	e7f8      	b.n	8005386 <memcpy+0x4>

08005394 <__assert_func>:
 8005394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005396:	0014      	movs	r4, r2
 8005398:	001a      	movs	r2, r3
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <__assert_func+0x2c>)
 800539c:	0005      	movs	r5, r0
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	000e      	movs	r6, r1
 80053a2:	68d8      	ldr	r0, [r3, #12]
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <__assert_func+0x30>)
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	d101      	bne.n	80053ae <__assert_func+0x1a>
 80053aa:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <__assert_func+0x34>)
 80053ac:	001c      	movs	r4, r3
 80053ae:	4907      	ldr	r1, [pc, #28]	; (80053cc <__assert_func+0x38>)
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	9402      	str	r4, [sp, #8]
 80053b4:	002b      	movs	r3, r5
 80053b6:	9600      	str	r6, [sp, #0]
 80053b8:	f000 fcaa 	bl	8005d10 <fiprintf>
 80053bc:	f000 fd73 	bl	8005ea6 <abort>
 80053c0:	20000064 	.word	0x20000064
 80053c4:	080063ba 	.word	0x080063ba
 80053c8:	0800630f 	.word	0x0800630f
 80053cc:	080063c7 	.word	0x080063c7

080053d0 <_free_r>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	0005      	movs	r5, r0
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d010      	beq.n	80053fa <_free_r+0x2a>
 80053d8:	1f0c      	subs	r4, r1, #4
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	da00      	bge.n	80053e2 <_free_r+0x12>
 80053e0:	18e4      	adds	r4, r4, r3
 80053e2:	0028      	movs	r0, r5
 80053e4:	f000 f8ec 	bl	80055c0 <__malloc_lock>
 80053e8:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <_free_r+0x90>)
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <_free_r+0x2c>
 80053f0:	6063      	str	r3, [r4, #4]
 80053f2:	6014      	str	r4, [r2, #0]
 80053f4:	0028      	movs	r0, r5
 80053f6:	f000 f8eb 	bl	80055d0 <__malloc_unlock>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d908      	bls.n	8005412 <_free_r+0x42>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	1821      	adds	r1, r4, r0
 8005404:	428b      	cmp	r3, r1
 8005406:	d1f3      	bne.n	80053f0 <_free_r+0x20>
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	1809      	adds	r1, r1, r0
 800540e:	6021      	str	r1, [r4, #0]
 8005410:	e7ee      	b.n	80053f0 <_free_r+0x20>
 8005412:	001a      	movs	r2, r3
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <_free_r+0x4e>
 800541a:	42a3      	cmp	r3, r4
 800541c:	d9f9      	bls.n	8005412 <_free_r+0x42>
 800541e:	6811      	ldr	r1, [r2, #0]
 8005420:	1850      	adds	r0, r2, r1
 8005422:	42a0      	cmp	r0, r4
 8005424:	d10b      	bne.n	800543e <_free_r+0x6e>
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	1809      	adds	r1, r1, r0
 800542a:	1850      	adds	r0, r2, r1
 800542c:	6011      	str	r1, [r2, #0]
 800542e:	4283      	cmp	r3, r0
 8005430:	d1e0      	bne.n	80053f4 <_free_r+0x24>
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	1841      	adds	r1, r0, r1
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	6053      	str	r3, [r2, #4]
 800543c:	e7da      	b.n	80053f4 <_free_r+0x24>
 800543e:	42a0      	cmp	r0, r4
 8005440:	d902      	bls.n	8005448 <_free_r+0x78>
 8005442:	230c      	movs	r3, #12
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	e7d5      	b.n	80053f4 <_free_r+0x24>
 8005448:	6820      	ldr	r0, [r4, #0]
 800544a:	1821      	adds	r1, r4, r0
 800544c:	428b      	cmp	r3, r1
 800544e:	d103      	bne.n	8005458 <_free_r+0x88>
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	1809      	adds	r1, r1, r0
 8005456:	6021      	str	r1, [r4, #0]
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	6054      	str	r4, [r2, #4]
 800545c:	e7ca      	b.n	80053f4 <_free_r+0x24>
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	20000358 	.word	0x20000358

08005464 <malloc>:
 8005464:	b510      	push	{r4, lr}
 8005466:	4b03      	ldr	r3, [pc, #12]	; (8005474 <malloc+0x10>)
 8005468:	0001      	movs	r1, r0
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	f000 f826 	bl	80054bc <_malloc_r>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	20000064 	.word	0x20000064

08005478 <sbrk_aligned>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4e0f      	ldr	r6, [pc, #60]	; (80054b8 <sbrk_aligned+0x40>)
 800547c:	000d      	movs	r5, r1
 800547e:	6831      	ldr	r1, [r6, #0]
 8005480:	0004      	movs	r4, r0
 8005482:	2900      	cmp	r1, #0
 8005484:	d102      	bne.n	800548c <sbrk_aligned+0x14>
 8005486:	f000 fcf1 	bl	8005e6c <_sbrk_r>
 800548a:	6030      	str	r0, [r6, #0]
 800548c:	0029      	movs	r1, r5
 800548e:	0020      	movs	r0, r4
 8005490:	f000 fcec 	bl	8005e6c <_sbrk_r>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d00a      	beq.n	80054ae <sbrk_aligned+0x36>
 8005498:	2303      	movs	r3, #3
 800549a:	1cc5      	adds	r5, r0, #3
 800549c:	439d      	bics	r5, r3
 800549e:	42a8      	cmp	r0, r5
 80054a0:	d007      	beq.n	80054b2 <sbrk_aligned+0x3a>
 80054a2:	1a29      	subs	r1, r5, r0
 80054a4:	0020      	movs	r0, r4
 80054a6:	f000 fce1 	bl	8005e6c <_sbrk_r>
 80054aa:	3001      	adds	r0, #1
 80054ac:	d101      	bne.n	80054b2 <sbrk_aligned+0x3a>
 80054ae:	2501      	movs	r5, #1
 80054b0:	426d      	negs	r5, r5
 80054b2:	0028      	movs	r0, r5
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	2000035c 	.word	0x2000035c

080054bc <_malloc_r>:
 80054bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054be:	2203      	movs	r2, #3
 80054c0:	1ccb      	adds	r3, r1, #3
 80054c2:	4393      	bics	r3, r2
 80054c4:	3308      	adds	r3, #8
 80054c6:	0006      	movs	r6, r0
 80054c8:	001f      	movs	r7, r3
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d238      	bcs.n	8005540 <_malloc_r+0x84>
 80054ce:	270c      	movs	r7, #12
 80054d0:	42b9      	cmp	r1, r7
 80054d2:	d837      	bhi.n	8005544 <_malloc_r+0x88>
 80054d4:	0030      	movs	r0, r6
 80054d6:	f000 f873 	bl	80055c0 <__malloc_lock>
 80054da:	4b38      	ldr	r3, [pc, #224]	; (80055bc <_malloc_r+0x100>)
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	001c      	movs	r4, r3
 80054e2:	2c00      	cmp	r4, #0
 80054e4:	d133      	bne.n	800554e <_malloc_r+0x92>
 80054e6:	0039      	movs	r1, r7
 80054e8:	0030      	movs	r0, r6
 80054ea:	f7ff ffc5 	bl	8005478 <sbrk_aligned>
 80054ee:	0004      	movs	r4, r0
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d15e      	bne.n	80055b2 <_malloc_r+0xf6>
 80054f4:	9b00      	ldr	r3, [sp, #0]
 80054f6:	681c      	ldr	r4, [r3, #0]
 80054f8:	0025      	movs	r5, r4
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	d14e      	bne.n	800559c <_malloc_r+0xe0>
 80054fe:	2c00      	cmp	r4, #0
 8005500:	d051      	beq.n	80055a6 <_malloc_r+0xea>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	0029      	movs	r1, r5
 8005506:	18e3      	adds	r3, r4, r3
 8005508:	0030      	movs	r0, r6
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	f000 fcae 	bl	8005e6c <_sbrk_r>
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	4283      	cmp	r3, r0
 8005514:	d147      	bne.n	80055a6 <_malloc_r+0xea>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	0030      	movs	r0, r6
 800551a:	1aff      	subs	r7, r7, r3
 800551c:	0039      	movs	r1, r7
 800551e:	f7ff ffab 	bl	8005478 <sbrk_aligned>
 8005522:	3001      	adds	r0, #1
 8005524:	d03f      	beq.n	80055a6 <_malloc_r+0xea>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	19db      	adds	r3, r3, r7
 800552a:	6023      	str	r3, [r4, #0]
 800552c:	9b00      	ldr	r3, [sp, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d040      	beq.n	80055b6 <_malloc_r+0xfa>
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	42a2      	cmp	r2, r4
 8005538:	d133      	bne.n	80055a2 <_malloc_r+0xe6>
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	e014      	b.n	800556a <_malloc_r+0xae>
 8005540:	2b00      	cmp	r3, #0
 8005542:	dac5      	bge.n	80054d0 <_malloc_r+0x14>
 8005544:	230c      	movs	r3, #12
 8005546:	2500      	movs	r5, #0
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	0028      	movs	r0, r5
 800554c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800554e:	6821      	ldr	r1, [r4, #0]
 8005550:	1bc9      	subs	r1, r1, r7
 8005552:	d420      	bmi.n	8005596 <_malloc_r+0xda>
 8005554:	290b      	cmp	r1, #11
 8005556:	d918      	bls.n	800558a <_malloc_r+0xce>
 8005558:	19e2      	adds	r2, r4, r7
 800555a:	6027      	str	r7, [r4, #0]
 800555c:	42a3      	cmp	r3, r4
 800555e:	d112      	bne.n	8005586 <_malloc_r+0xca>
 8005560:	9b00      	ldr	r3, [sp, #0]
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	6863      	ldr	r3, [r4, #4]
 8005566:	6011      	str	r1, [r2, #0]
 8005568:	6053      	str	r3, [r2, #4]
 800556a:	0030      	movs	r0, r6
 800556c:	0025      	movs	r5, r4
 800556e:	f000 f82f 	bl	80055d0 <__malloc_unlock>
 8005572:	2207      	movs	r2, #7
 8005574:	350b      	adds	r5, #11
 8005576:	1d23      	adds	r3, r4, #4
 8005578:	4395      	bics	r5, r2
 800557a:	1aea      	subs	r2, r5, r3
 800557c:	429d      	cmp	r5, r3
 800557e:	d0e4      	beq.n	800554a <_malloc_r+0x8e>
 8005580:	1b5b      	subs	r3, r3, r5
 8005582:	50a3      	str	r3, [r4, r2]
 8005584:	e7e1      	b.n	800554a <_malloc_r+0x8e>
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	e7ec      	b.n	8005564 <_malloc_r+0xa8>
 800558a:	6862      	ldr	r2, [r4, #4]
 800558c:	42a3      	cmp	r3, r4
 800558e:	d1d5      	bne.n	800553c <_malloc_r+0x80>
 8005590:	9b00      	ldr	r3, [sp, #0]
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e7e9      	b.n	800556a <_malloc_r+0xae>
 8005596:	0023      	movs	r3, r4
 8005598:	6864      	ldr	r4, [r4, #4]
 800559a:	e7a2      	b.n	80054e2 <_malloc_r+0x26>
 800559c:	002c      	movs	r4, r5
 800559e:	686d      	ldr	r5, [r5, #4]
 80055a0:	e7ab      	b.n	80054fa <_malloc_r+0x3e>
 80055a2:	0013      	movs	r3, r2
 80055a4:	e7c4      	b.n	8005530 <_malloc_r+0x74>
 80055a6:	230c      	movs	r3, #12
 80055a8:	0030      	movs	r0, r6
 80055aa:	6033      	str	r3, [r6, #0]
 80055ac:	f000 f810 	bl	80055d0 <__malloc_unlock>
 80055b0:	e7cb      	b.n	800554a <_malloc_r+0x8e>
 80055b2:	6027      	str	r7, [r4, #0]
 80055b4:	e7d9      	b.n	800556a <_malloc_r+0xae>
 80055b6:	605b      	str	r3, [r3, #4]
 80055b8:	deff      	udf	#255	; 0xff
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	20000358 	.word	0x20000358

080055c0 <__malloc_lock>:
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4802      	ldr	r0, [pc, #8]	; (80055cc <__malloc_lock+0xc>)
 80055c4:	f7ff fedb 	bl	800537e <__retarget_lock_acquire_recursive>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	20000354 	.word	0x20000354

080055d0 <__malloc_unlock>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <__malloc_unlock+0xc>)
 80055d4:	f7ff fed4 	bl	8005380 <__retarget_lock_release_recursive>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	20000354 	.word	0x20000354

080055e0 <__ssputs_r>:
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	b085      	sub	sp, #20
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	9203      	str	r2, [sp, #12]
 80055e8:	688e      	ldr	r6, [r1, #8]
 80055ea:	9a01      	ldr	r2, [sp, #4]
 80055ec:	0007      	movs	r7, r0
 80055ee:	000c      	movs	r4, r1
 80055f0:	680b      	ldr	r3, [r1, #0]
 80055f2:	4296      	cmp	r6, r2
 80055f4:	d831      	bhi.n	800565a <__ssputs_r+0x7a>
 80055f6:	898a      	ldrh	r2, [r1, #12]
 80055f8:	2190      	movs	r1, #144	; 0x90
 80055fa:	00c9      	lsls	r1, r1, #3
 80055fc:	420a      	tst	r2, r1
 80055fe:	d029      	beq.n	8005654 <__ssputs_r+0x74>
 8005600:	2003      	movs	r0, #3
 8005602:	6921      	ldr	r1, [r4, #16]
 8005604:	1a5b      	subs	r3, r3, r1
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	6963      	ldr	r3, [r4, #20]
 800560a:	4343      	muls	r3, r0
 800560c:	0fdd      	lsrs	r5, r3, #31
 800560e:	18ed      	adds	r5, r5, r3
 8005610:	9b01      	ldr	r3, [sp, #4]
 8005612:	9802      	ldr	r0, [sp, #8]
 8005614:	3301      	adds	r3, #1
 8005616:	181b      	adds	r3, r3, r0
 8005618:	106d      	asrs	r5, r5, #1
 800561a:	42ab      	cmp	r3, r5
 800561c:	d900      	bls.n	8005620 <__ssputs_r+0x40>
 800561e:	001d      	movs	r5, r3
 8005620:	0552      	lsls	r2, r2, #21
 8005622:	d529      	bpl.n	8005678 <__ssputs_r+0x98>
 8005624:	0029      	movs	r1, r5
 8005626:	0038      	movs	r0, r7
 8005628:	f7ff ff48 	bl	80054bc <_malloc_r>
 800562c:	1e06      	subs	r6, r0, #0
 800562e:	d02d      	beq.n	800568c <__ssputs_r+0xac>
 8005630:	9a02      	ldr	r2, [sp, #8]
 8005632:	6921      	ldr	r1, [r4, #16]
 8005634:	f7ff fea5 	bl	8005382 <memcpy>
 8005638:	89a2      	ldrh	r2, [r4, #12]
 800563a:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <__ssputs_r+0xc0>)
 800563c:	401a      	ands	r2, r3
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	4313      	orrs	r3, r2
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	9b02      	ldr	r3, [sp, #8]
 8005646:	6126      	str	r6, [r4, #16]
 8005648:	18f6      	adds	r6, r6, r3
 800564a:	6026      	str	r6, [r4, #0]
 800564c:	6165      	str	r5, [r4, #20]
 800564e:	9e01      	ldr	r6, [sp, #4]
 8005650:	1aed      	subs	r5, r5, r3
 8005652:	60a5      	str	r5, [r4, #8]
 8005654:	9b01      	ldr	r3, [sp, #4]
 8005656:	429e      	cmp	r6, r3
 8005658:	d900      	bls.n	800565c <__ssputs_r+0x7c>
 800565a:	9e01      	ldr	r6, [sp, #4]
 800565c:	0032      	movs	r2, r6
 800565e:	9903      	ldr	r1, [sp, #12]
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	f000 fbcb 	bl	8005dfc <memmove>
 8005666:	2000      	movs	r0, #0
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	1b9b      	subs	r3, r3, r6
 800566c:	60a3      	str	r3, [r4, #8]
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	199b      	adds	r3, r3, r6
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	b005      	add	sp, #20
 8005676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005678:	002a      	movs	r2, r5
 800567a:	0038      	movs	r0, r7
 800567c:	f000 fc1a 	bl	8005eb4 <_realloc_r>
 8005680:	1e06      	subs	r6, r0, #0
 8005682:	d1df      	bne.n	8005644 <__ssputs_r+0x64>
 8005684:	0038      	movs	r0, r7
 8005686:	6921      	ldr	r1, [r4, #16]
 8005688:	f7ff fea2 	bl	80053d0 <_free_r>
 800568c:	230c      	movs	r3, #12
 800568e:	2001      	movs	r0, #1
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	89a2      	ldrh	r2, [r4, #12]
 8005694:	3334      	adds	r3, #52	; 0x34
 8005696:	4313      	orrs	r3, r2
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	4240      	negs	r0, r0
 800569c:	e7ea      	b.n	8005674 <__ssputs_r+0x94>
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	fffffb7f 	.word	0xfffffb7f

080056a4 <_svfiprintf_r>:
 80056a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a6:	b0a1      	sub	sp, #132	; 0x84
 80056a8:	9003      	str	r0, [sp, #12]
 80056aa:	001d      	movs	r5, r3
 80056ac:	898b      	ldrh	r3, [r1, #12]
 80056ae:	000f      	movs	r7, r1
 80056b0:	0016      	movs	r6, r2
 80056b2:	061b      	lsls	r3, r3, #24
 80056b4:	d511      	bpl.n	80056da <_svfiprintf_r+0x36>
 80056b6:	690b      	ldr	r3, [r1, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10e      	bne.n	80056da <_svfiprintf_r+0x36>
 80056bc:	2140      	movs	r1, #64	; 0x40
 80056be:	f7ff fefd 	bl	80054bc <_malloc_r>
 80056c2:	6038      	str	r0, [r7, #0]
 80056c4:	6138      	str	r0, [r7, #16]
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d105      	bne.n	80056d6 <_svfiprintf_r+0x32>
 80056ca:	230c      	movs	r3, #12
 80056cc:	9a03      	ldr	r2, [sp, #12]
 80056ce:	3801      	subs	r0, #1
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	b021      	add	sp, #132	; 0x84
 80056d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	2300      	movs	r3, #0
 80056dc:	ac08      	add	r4, sp, #32
 80056de:	6163      	str	r3, [r4, #20]
 80056e0:	3320      	adds	r3, #32
 80056e2:	7663      	strb	r3, [r4, #25]
 80056e4:	3310      	adds	r3, #16
 80056e6:	76a3      	strb	r3, [r4, #26]
 80056e8:	9507      	str	r5, [sp, #28]
 80056ea:	0035      	movs	r5, r6
 80056ec:	782b      	ldrb	r3, [r5, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <_svfiprintf_r+0x52>
 80056f2:	2b25      	cmp	r3, #37	; 0x25
 80056f4:	d148      	bne.n	8005788 <_svfiprintf_r+0xe4>
 80056f6:	1bab      	subs	r3, r5, r6
 80056f8:	9305      	str	r3, [sp, #20]
 80056fa:	42b5      	cmp	r5, r6
 80056fc:	d00b      	beq.n	8005716 <_svfiprintf_r+0x72>
 80056fe:	0032      	movs	r2, r6
 8005700:	0039      	movs	r1, r7
 8005702:	9803      	ldr	r0, [sp, #12]
 8005704:	f7ff ff6c 	bl	80055e0 <__ssputs_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d100      	bne.n	800570e <_svfiprintf_r+0x6a>
 800570c:	e0af      	b.n	800586e <_svfiprintf_r+0x1ca>
 800570e:	6963      	ldr	r3, [r4, #20]
 8005710:	9a05      	ldr	r2, [sp, #20]
 8005712:	189b      	adds	r3, r3, r2
 8005714:	6163      	str	r3, [r4, #20]
 8005716:	782b      	ldrb	r3, [r5, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d100      	bne.n	800571e <_svfiprintf_r+0x7a>
 800571c:	e0a7      	b.n	800586e <_svfiprintf_r+0x1ca>
 800571e:	2201      	movs	r2, #1
 8005720:	2300      	movs	r3, #0
 8005722:	4252      	negs	r2, r2
 8005724:	6062      	str	r2, [r4, #4]
 8005726:	a904      	add	r1, sp, #16
 8005728:	3254      	adds	r2, #84	; 0x54
 800572a:	1852      	adds	r2, r2, r1
 800572c:	1c6e      	adds	r6, r5, #1
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	60e3      	str	r3, [r4, #12]
 8005732:	60a3      	str	r3, [r4, #8]
 8005734:	7013      	strb	r3, [r2, #0]
 8005736:	65a3      	str	r3, [r4, #88]	; 0x58
 8005738:	4b55      	ldr	r3, [pc, #340]	; (8005890 <_svfiprintf_r+0x1ec>)
 800573a:	2205      	movs	r2, #5
 800573c:	0018      	movs	r0, r3
 800573e:	7831      	ldrb	r1, [r6, #0]
 8005740:	9305      	str	r3, [sp, #20]
 8005742:	f000 fba5 	bl	8005e90 <memchr>
 8005746:	1c75      	adds	r5, r6, #1
 8005748:	2800      	cmp	r0, #0
 800574a:	d11f      	bne.n	800578c <_svfiprintf_r+0xe8>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	06d3      	lsls	r3, r2, #27
 8005750:	d504      	bpl.n	800575c <_svfiprintf_r+0xb8>
 8005752:	2353      	movs	r3, #83	; 0x53
 8005754:	a904      	add	r1, sp, #16
 8005756:	185b      	adds	r3, r3, r1
 8005758:	2120      	movs	r1, #32
 800575a:	7019      	strb	r1, [r3, #0]
 800575c:	0713      	lsls	r3, r2, #28
 800575e:	d504      	bpl.n	800576a <_svfiprintf_r+0xc6>
 8005760:	2353      	movs	r3, #83	; 0x53
 8005762:	a904      	add	r1, sp, #16
 8005764:	185b      	adds	r3, r3, r1
 8005766:	212b      	movs	r1, #43	; 0x2b
 8005768:	7019      	strb	r1, [r3, #0]
 800576a:	7833      	ldrb	r3, [r6, #0]
 800576c:	2b2a      	cmp	r3, #42	; 0x2a
 800576e:	d016      	beq.n	800579e <_svfiprintf_r+0xfa>
 8005770:	0035      	movs	r5, r6
 8005772:	2100      	movs	r1, #0
 8005774:	200a      	movs	r0, #10
 8005776:	68e3      	ldr	r3, [r4, #12]
 8005778:	782a      	ldrb	r2, [r5, #0]
 800577a:	1c6e      	adds	r6, r5, #1
 800577c:	3a30      	subs	r2, #48	; 0x30
 800577e:	2a09      	cmp	r2, #9
 8005780:	d94e      	bls.n	8005820 <_svfiprintf_r+0x17c>
 8005782:	2900      	cmp	r1, #0
 8005784:	d111      	bne.n	80057aa <_svfiprintf_r+0x106>
 8005786:	e017      	b.n	80057b8 <_svfiprintf_r+0x114>
 8005788:	3501      	adds	r5, #1
 800578a:	e7af      	b.n	80056ec <_svfiprintf_r+0x48>
 800578c:	9b05      	ldr	r3, [sp, #20]
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	1ac0      	subs	r0, r0, r3
 8005792:	2301      	movs	r3, #1
 8005794:	4083      	lsls	r3, r0
 8005796:	4313      	orrs	r3, r2
 8005798:	002e      	movs	r6, r5
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	e7cc      	b.n	8005738 <_svfiprintf_r+0x94>
 800579e:	9b07      	ldr	r3, [sp, #28]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	9107      	str	r1, [sp, #28]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	db01      	blt.n	80057ae <_svfiprintf_r+0x10a>
 80057aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80057ac:	e004      	b.n	80057b8 <_svfiprintf_r+0x114>
 80057ae:	425b      	negs	r3, r3
 80057b0:	60e3      	str	r3, [r4, #12]
 80057b2:	2302      	movs	r3, #2
 80057b4:	4313      	orrs	r3, r2
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	782b      	ldrb	r3, [r5, #0]
 80057ba:	2b2e      	cmp	r3, #46	; 0x2e
 80057bc:	d10a      	bne.n	80057d4 <_svfiprintf_r+0x130>
 80057be:	786b      	ldrb	r3, [r5, #1]
 80057c0:	2b2a      	cmp	r3, #42	; 0x2a
 80057c2:	d135      	bne.n	8005830 <_svfiprintf_r+0x18c>
 80057c4:	9b07      	ldr	r3, [sp, #28]
 80057c6:	3502      	adds	r5, #2
 80057c8:	1d1a      	adds	r2, r3, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	9207      	str	r2, [sp, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db2b      	blt.n	800582a <_svfiprintf_r+0x186>
 80057d2:	9309      	str	r3, [sp, #36]	; 0x24
 80057d4:	4e2f      	ldr	r6, [pc, #188]	; (8005894 <_svfiprintf_r+0x1f0>)
 80057d6:	2203      	movs	r2, #3
 80057d8:	0030      	movs	r0, r6
 80057da:	7829      	ldrb	r1, [r5, #0]
 80057dc:	f000 fb58 	bl	8005e90 <memchr>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d006      	beq.n	80057f2 <_svfiprintf_r+0x14e>
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	1b80      	subs	r0, r0, r6
 80057e8:	4083      	lsls	r3, r0
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	3501      	adds	r5, #1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	7829      	ldrb	r1, [r5, #0]
 80057f4:	2206      	movs	r2, #6
 80057f6:	4828      	ldr	r0, [pc, #160]	; (8005898 <_svfiprintf_r+0x1f4>)
 80057f8:	1c6e      	adds	r6, r5, #1
 80057fa:	7621      	strb	r1, [r4, #24]
 80057fc:	f000 fb48 	bl	8005e90 <memchr>
 8005800:	2800      	cmp	r0, #0
 8005802:	d03c      	beq.n	800587e <_svfiprintf_r+0x1da>
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <_svfiprintf_r+0x1f8>)
 8005806:	2b00      	cmp	r3, #0
 8005808:	d125      	bne.n	8005856 <_svfiprintf_r+0x1b2>
 800580a:	2207      	movs	r2, #7
 800580c:	9b07      	ldr	r3, [sp, #28]
 800580e:	3307      	adds	r3, #7
 8005810:	4393      	bics	r3, r2
 8005812:	3308      	adds	r3, #8
 8005814:	9307      	str	r3, [sp, #28]
 8005816:	6963      	ldr	r3, [r4, #20]
 8005818:	9a04      	ldr	r2, [sp, #16]
 800581a:	189b      	adds	r3, r3, r2
 800581c:	6163      	str	r3, [r4, #20]
 800581e:	e764      	b.n	80056ea <_svfiprintf_r+0x46>
 8005820:	4343      	muls	r3, r0
 8005822:	0035      	movs	r5, r6
 8005824:	2101      	movs	r1, #1
 8005826:	189b      	adds	r3, r3, r2
 8005828:	e7a6      	b.n	8005778 <_svfiprintf_r+0xd4>
 800582a:	2301      	movs	r3, #1
 800582c:	425b      	negs	r3, r3
 800582e:	e7d0      	b.n	80057d2 <_svfiprintf_r+0x12e>
 8005830:	2300      	movs	r3, #0
 8005832:	200a      	movs	r0, #10
 8005834:	001a      	movs	r2, r3
 8005836:	3501      	adds	r5, #1
 8005838:	6063      	str	r3, [r4, #4]
 800583a:	7829      	ldrb	r1, [r5, #0]
 800583c:	1c6e      	adds	r6, r5, #1
 800583e:	3930      	subs	r1, #48	; 0x30
 8005840:	2909      	cmp	r1, #9
 8005842:	d903      	bls.n	800584c <_svfiprintf_r+0x1a8>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0c5      	beq.n	80057d4 <_svfiprintf_r+0x130>
 8005848:	9209      	str	r2, [sp, #36]	; 0x24
 800584a:	e7c3      	b.n	80057d4 <_svfiprintf_r+0x130>
 800584c:	4342      	muls	r2, r0
 800584e:	0035      	movs	r5, r6
 8005850:	2301      	movs	r3, #1
 8005852:	1852      	adds	r2, r2, r1
 8005854:	e7f1      	b.n	800583a <_svfiprintf_r+0x196>
 8005856:	aa07      	add	r2, sp, #28
 8005858:	9200      	str	r2, [sp, #0]
 800585a:	0021      	movs	r1, r4
 800585c:	003a      	movs	r2, r7
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <_svfiprintf_r+0x1fc>)
 8005860:	9803      	ldr	r0, [sp, #12]
 8005862:	e000      	b.n	8005866 <_svfiprintf_r+0x1c2>
 8005864:	bf00      	nop
 8005866:	9004      	str	r0, [sp, #16]
 8005868:	9b04      	ldr	r3, [sp, #16]
 800586a:	3301      	adds	r3, #1
 800586c:	d1d3      	bne.n	8005816 <_svfiprintf_r+0x172>
 800586e:	89bb      	ldrh	r3, [r7, #12]
 8005870:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005872:	065b      	lsls	r3, r3, #25
 8005874:	d400      	bmi.n	8005878 <_svfiprintf_r+0x1d4>
 8005876:	e72c      	b.n	80056d2 <_svfiprintf_r+0x2e>
 8005878:	2001      	movs	r0, #1
 800587a:	4240      	negs	r0, r0
 800587c:	e729      	b.n	80056d2 <_svfiprintf_r+0x2e>
 800587e:	aa07      	add	r2, sp, #28
 8005880:	9200      	str	r2, [sp, #0]
 8005882:	0021      	movs	r1, r4
 8005884:	003a      	movs	r2, r7
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <_svfiprintf_r+0x1fc>)
 8005888:	9803      	ldr	r0, [sp, #12]
 800588a:	f000 f87b 	bl	8005984 <_printf_i>
 800588e:	e7ea      	b.n	8005866 <_svfiprintf_r+0x1c2>
 8005890:	080063f6 	.word	0x080063f6
 8005894:	080063fc 	.word	0x080063fc
 8005898:	08006400 	.word	0x08006400
 800589c:	00000000 	.word	0x00000000
 80058a0:	080055e1 	.word	0x080055e1

080058a4 <_printf_common>:
 80058a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058a6:	0016      	movs	r6, r2
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	688a      	ldr	r2, [r1, #8]
 80058ac:	690b      	ldr	r3, [r1, #16]
 80058ae:	000c      	movs	r4, r1
 80058b0:	9000      	str	r0, [sp, #0]
 80058b2:	4293      	cmp	r3, r2
 80058b4:	da00      	bge.n	80058b8 <_printf_common+0x14>
 80058b6:	0013      	movs	r3, r2
 80058b8:	0022      	movs	r2, r4
 80058ba:	6033      	str	r3, [r6, #0]
 80058bc:	3243      	adds	r2, #67	; 0x43
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	d001      	beq.n	80058c8 <_printf_common+0x24>
 80058c4:	3301      	adds	r3, #1
 80058c6:	6033      	str	r3, [r6, #0]
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	069b      	lsls	r3, r3, #26
 80058cc:	d502      	bpl.n	80058d4 <_printf_common+0x30>
 80058ce:	6833      	ldr	r3, [r6, #0]
 80058d0:	3302      	adds	r3, #2
 80058d2:	6033      	str	r3, [r6, #0]
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	2306      	movs	r3, #6
 80058d8:	0015      	movs	r5, r2
 80058da:	401d      	ands	r5, r3
 80058dc:	421a      	tst	r2, r3
 80058de:	d027      	beq.n	8005930 <_printf_common+0x8c>
 80058e0:	0023      	movs	r3, r4
 80058e2:	3343      	adds	r3, #67	; 0x43
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	1e5a      	subs	r2, r3, #1
 80058e8:	4193      	sbcs	r3, r2
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	0692      	lsls	r2, r2, #26
 80058ee:	d430      	bmi.n	8005952 <_printf_common+0xae>
 80058f0:	0022      	movs	r2, r4
 80058f2:	9901      	ldr	r1, [sp, #4]
 80058f4:	9800      	ldr	r0, [sp, #0]
 80058f6:	9d08      	ldr	r5, [sp, #32]
 80058f8:	3243      	adds	r2, #67	; 0x43
 80058fa:	47a8      	blx	r5
 80058fc:	3001      	adds	r0, #1
 80058fe:	d025      	beq.n	800594c <_printf_common+0xa8>
 8005900:	2206      	movs	r2, #6
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	2500      	movs	r5, #0
 8005906:	4013      	ands	r3, r2
 8005908:	2b04      	cmp	r3, #4
 800590a:	d105      	bne.n	8005918 <_printf_common+0x74>
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	68e5      	ldr	r5, [r4, #12]
 8005910:	1aed      	subs	r5, r5, r3
 8005912:	43eb      	mvns	r3, r5
 8005914:	17db      	asrs	r3, r3, #31
 8005916:	401d      	ands	r5, r3
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	6922      	ldr	r2, [r4, #16]
 800591c:	4293      	cmp	r3, r2
 800591e:	dd01      	ble.n	8005924 <_printf_common+0x80>
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	18ed      	adds	r5, r5, r3
 8005924:	2600      	movs	r6, #0
 8005926:	42b5      	cmp	r5, r6
 8005928:	d120      	bne.n	800596c <_printf_common+0xc8>
 800592a:	2000      	movs	r0, #0
 800592c:	e010      	b.n	8005950 <_printf_common+0xac>
 800592e:	3501      	adds	r5, #1
 8005930:	68e3      	ldr	r3, [r4, #12]
 8005932:	6832      	ldr	r2, [r6, #0]
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	42ab      	cmp	r3, r5
 8005938:	ddd2      	ble.n	80058e0 <_printf_common+0x3c>
 800593a:	0022      	movs	r2, r4
 800593c:	2301      	movs	r3, #1
 800593e:	9901      	ldr	r1, [sp, #4]
 8005940:	9800      	ldr	r0, [sp, #0]
 8005942:	9f08      	ldr	r7, [sp, #32]
 8005944:	3219      	adds	r2, #25
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	d1f0      	bne.n	800592e <_printf_common+0x8a>
 800594c:	2001      	movs	r0, #1
 800594e:	4240      	negs	r0, r0
 8005950:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005952:	2030      	movs	r0, #48	; 0x30
 8005954:	18e1      	adds	r1, r4, r3
 8005956:	3143      	adds	r1, #67	; 0x43
 8005958:	7008      	strb	r0, [r1, #0]
 800595a:	0021      	movs	r1, r4
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	3145      	adds	r1, #69	; 0x45
 8005960:	7809      	ldrb	r1, [r1, #0]
 8005962:	18a2      	adds	r2, r4, r2
 8005964:	3243      	adds	r2, #67	; 0x43
 8005966:	3302      	adds	r3, #2
 8005968:	7011      	strb	r1, [r2, #0]
 800596a:	e7c1      	b.n	80058f0 <_printf_common+0x4c>
 800596c:	0022      	movs	r2, r4
 800596e:	2301      	movs	r3, #1
 8005970:	9901      	ldr	r1, [sp, #4]
 8005972:	9800      	ldr	r0, [sp, #0]
 8005974:	9f08      	ldr	r7, [sp, #32]
 8005976:	321a      	adds	r2, #26
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	d0e6      	beq.n	800594c <_printf_common+0xa8>
 800597e:	3601      	adds	r6, #1
 8005980:	e7d1      	b.n	8005926 <_printf_common+0x82>
	...

08005984 <_printf_i>:
 8005984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005986:	b08b      	sub	sp, #44	; 0x2c
 8005988:	9206      	str	r2, [sp, #24]
 800598a:	000a      	movs	r2, r1
 800598c:	3243      	adds	r2, #67	; 0x43
 800598e:	9307      	str	r3, [sp, #28]
 8005990:	9005      	str	r0, [sp, #20]
 8005992:	9204      	str	r2, [sp, #16]
 8005994:	7e0a      	ldrb	r2, [r1, #24]
 8005996:	000c      	movs	r4, r1
 8005998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800599a:	2a78      	cmp	r2, #120	; 0x78
 800599c:	d809      	bhi.n	80059b2 <_printf_i+0x2e>
 800599e:	2a62      	cmp	r2, #98	; 0x62
 80059a0:	d80b      	bhi.n	80059ba <_printf_i+0x36>
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d100      	bne.n	80059a8 <_printf_i+0x24>
 80059a6:	e0be      	b.n	8005b26 <_printf_i+0x1a2>
 80059a8:	497c      	ldr	r1, [pc, #496]	; (8005b9c <_printf_i+0x218>)
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	2a58      	cmp	r2, #88	; 0x58
 80059ae:	d100      	bne.n	80059b2 <_printf_i+0x2e>
 80059b0:	e093      	b.n	8005ada <_printf_i+0x156>
 80059b2:	0026      	movs	r6, r4
 80059b4:	3642      	adds	r6, #66	; 0x42
 80059b6:	7032      	strb	r2, [r6, #0]
 80059b8:	e022      	b.n	8005a00 <_printf_i+0x7c>
 80059ba:	0010      	movs	r0, r2
 80059bc:	3863      	subs	r0, #99	; 0x63
 80059be:	2815      	cmp	r0, #21
 80059c0:	d8f7      	bhi.n	80059b2 <_printf_i+0x2e>
 80059c2:	f7fa fbb5 	bl	8000130 <__gnu_thumb1_case_shi>
 80059c6:	0016      	.short	0x0016
 80059c8:	fff6001f 	.word	0xfff6001f
 80059cc:	fff6fff6 	.word	0xfff6fff6
 80059d0:	001ffff6 	.word	0x001ffff6
 80059d4:	fff6fff6 	.word	0xfff6fff6
 80059d8:	fff6fff6 	.word	0xfff6fff6
 80059dc:	003600a3 	.word	0x003600a3
 80059e0:	fff60083 	.word	0xfff60083
 80059e4:	00b4fff6 	.word	0x00b4fff6
 80059e8:	0036fff6 	.word	0x0036fff6
 80059ec:	fff6fff6 	.word	0xfff6fff6
 80059f0:	0087      	.short	0x0087
 80059f2:	0026      	movs	r6, r4
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	3642      	adds	r6, #66	; 0x42
 80059f8:	1d11      	adds	r1, r2, #4
 80059fa:	6019      	str	r1, [r3, #0]
 80059fc:	6813      	ldr	r3, [r2, #0]
 80059fe:	7033      	strb	r3, [r6, #0]
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0a2      	b.n	8005b4a <_printf_i+0x1c6>
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	6809      	ldr	r1, [r1, #0]
 8005a08:	1d02      	adds	r2, r0, #4
 8005a0a:	060d      	lsls	r5, r1, #24
 8005a0c:	d50b      	bpl.n	8005a26 <_printf_i+0xa2>
 8005a0e:	6805      	ldr	r5, [r0, #0]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	da03      	bge.n	8005a1e <_printf_i+0x9a>
 8005a16:	232d      	movs	r3, #45	; 0x2d
 8005a18:	9a04      	ldr	r2, [sp, #16]
 8005a1a:	426d      	negs	r5, r5
 8005a1c:	7013      	strb	r3, [r2, #0]
 8005a1e:	4b5f      	ldr	r3, [pc, #380]	; (8005b9c <_printf_i+0x218>)
 8005a20:	270a      	movs	r7, #10
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	e01b      	b.n	8005a5e <_printf_i+0xda>
 8005a26:	6805      	ldr	r5, [r0, #0]
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	0649      	lsls	r1, r1, #25
 8005a2c:	d5f1      	bpl.n	8005a12 <_printf_i+0x8e>
 8005a2e:	b22d      	sxth	r5, r5
 8005a30:	e7ef      	b.n	8005a12 <_printf_i+0x8e>
 8005a32:	680d      	ldr	r5, [r1, #0]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	1d08      	adds	r0, r1, #4
 8005a38:	6018      	str	r0, [r3, #0]
 8005a3a:	062e      	lsls	r6, r5, #24
 8005a3c:	d501      	bpl.n	8005a42 <_printf_i+0xbe>
 8005a3e:	680d      	ldr	r5, [r1, #0]
 8005a40:	e003      	b.n	8005a4a <_printf_i+0xc6>
 8005a42:	066d      	lsls	r5, r5, #25
 8005a44:	d5fb      	bpl.n	8005a3e <_printf_i+0xba>
 8005a46:	680d      	ldr	r5, [r1, #0]
 8005a48:	b2ad      	uxth	r5, r5
 8005a4a:	4b54      	ldr	r3, [pc, #336]	; (8005b9c <_printf_i+0x218>)
 8005a4c:	2708      	movs	r7, #8
 8005a4e:	9303      	str	r3, [sp, #12]
 8005a50:	2a6f      	cmp	r2, #111	; 0x6f
 8005a52:	d000      	beq.n	8005a56 <_printf_i+0xd2>
 8005a54:	3702      	adds	r7, #2
 8005a56:	0023      	movs	r3, r4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	3343      	adds	r3, #67	; 0x43
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	60a3      	str	r3, [r4, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	db03      	blt.n	8005a6e <_printf_i+0xea>
 8005a66:	2104      	movs	r1, #4
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	438a      	bics	r2, r1
 8005a6c:	6022      	str	r2, [r4, #0]
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	d102      	bne.n	8005a78 <_printf_i+0xf4>
 8005a72:	9e04      	ldr	r6, [sp, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <_printf_i+0x10e>
 8005a78:	9e04      	ldr	r6, [sp, #16]
 8005a7a:	0028      	movs	r0, r5
 8005a7c:	0039      	movs	r1, r7
 8005a7e:	f7fa fbe7 	bl	8000250 <__aeabi_uidivmod>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	3e01      	subs	r6, #1
 8005a86:	5c5b      	ldrb	r3, [r3, r1]
 8005a88:	7033      	strb	r3, [r6, #0]
 8005a8a:	002b      	movs	r3, r5
 8005a8c:	0005      	movs	r5, r0
 8005a8e:	429f      	cmp	r7, r3
 8005a90:	d9f3      	bls.n	8005a7a <_printf_i+0xf6>
 8005a92:	2f08      	cmp	r7, #8
 8005a94:	d109      	bne.n	8005aaa <_printf_i+0x126>
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	07db      	lsls	r3, r3, #31
 8005a9a:	d506      	bpl.n	8005aaa <_printf_i+0x126>
 8005a9c:	6862      	ldr	r2, [r4, #4]
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	dc02      	bgt.n	8005aaa <_printf_i+0x126>
 8005aa4:	2330      	movs	r3, #48	; 0x30
 8005aa6:	3e01      	subs	r6, #1
 8005aa8:	7033      	strb	r3, [r6, #0]
 8005aaa:	9b04      	ldr	r3, [sp, #16]
 8005aac:	1b9b      	subs	r3, r3, r6
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	9b07      	ldr	r3, [sp, #28]
 8005ab2:	0021      	movs	r1, r4
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	9805      	ldr	r0, [sp, #20]
 8005ab8:	9b06      	ldr	r3, [sp, #24]
 8005aba:	aa09      	add	r2, sp, #36	; 0x24
 8005abc:	f7ff fef2 	bl	80058a4 <_printf_common>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d147      	bne.n	8005b54 <_printf_i+0x1d0>
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	4240      	negs	r0, r0
 8005ac8:	b00b      	add	sp, #44	; 0x2c
 8005aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005acc:	2220      	movs	r2, #32
 8005ace:	6809      	ldr	r1, [r1, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	6022      	str	r2, [r4, #0]
 8005ad4:	2278      	movs	r2, #120	; 0x78
 8005ad6:	4932      	ldr	r1, [pc, #200]	; (8005ba0 <_printf_i+0x21c>)
 8005ad8:	9103      	str	r1, [sp, #12]
 8005ada:	0021      	movs	r1, r4
 8005adc:	3145      	adds	r1, #69	; 0x45
 8005ade:	700a      	strb	r2, [r1, #0]
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	c920      	ldmia	r1!, {r5}
 8005ae6:	0610      	lsls	r0, r2, #24
 8005ae8:	d402      	bmi.n	8005af0 <_printf_i+0x16c>
 8005aea:	0650      	lsls	r0, r2, #25
 8005aec:	d500      	bpl.n	8005af0 <_printf_i+0x16c>
 8005aee:	b2ad      	uxth	r5, r5
 8005af0:	6019      	str	r1, [r3, #0]
 8005af2:	07d3      	lsls	r3, r2, #31
 8005af4:	d502      	bpl.n	8005afc <_printf_i+0x178>
 8005af6:	2320      	movs	r3, #32
 8005af8:	4313      	orrs	r3, r2
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	2710      	movs	r7, #16
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	d1a9      	bne.n	8005a56 <_printf_i+0xd2>
 8005b02:	2220      	movs	r2, #32
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	4393      	bics	r3, r2
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	e7a4      	b.n	8005a56 <_printf_i+0xd2>
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	680d      	ldr	r5, [r1, #0]
 8005b10:	1d10      	adds	r0, r2, #4
 8005b12:	6949      	ldr	r1, [r1, #20]
 8005b14:	6018      	str	r0, [r3, #0]
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	062e      	lsls	r6, r5, #24
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0x19c>
 8005b1c:	6019      	str	r1, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <_printf_i+0x1a2>
 8005b20:	066d      	lsls	r5, r5, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0x198>
 8005b24:	8019      	strh	r1, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	9e04      	ldr	r6, [sp, #16]
 8005b2a:	6123      	str	r3, [r4, #16]
 8005b2c:	e7c0      	b.n	8005ab0 <_printf_i+0x12c>
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	1d11      	adds	r1, r2, #4
 8005b32:	6019      	str	r1, [r3, #0]
 8005b34:	6816      	ldr	r6, [r2, #0]
 8005b36:	2100      	movs	r1, #0
 8005b38:	0030      	movs	r0, r6
 8005b3a:	6862      	ldr	r2, [r4, #4]
 8005b3c:	f000 f9a8 	bl	8005e90 <memchr>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d001      	beq.n	8005b48 <_printf_i+0x1c4>
 8005b44:	1b80      	subs	r0, r0, r6
 8005b46:	6060      	str	r0, [r4, #4]
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9a04      	ldr	r2, [sp, #16]
 8005b50:	7013      	strb	r3, [r2, #0]
 8005b52:	e7ad      	b.n	8005ab0 <_printf_i+0x12c>
 8005b54:	0032      	movs	r2, r6
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	9906      	ldr	r1, [sp, #24]
 8005b5a:	9805      	ldr	r0, [sp, #20]
 8005b5c:	9d07      	ldr	r5, [sp, #28]
 8005b5e:	47a8      	blx	r5
 8005b60:	3001      	adds	r0, #1
 8005b62:	d0af      	beq.n	8005ac4 <_printf_i+0x140>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	079b      	lsls	r3, r3, #30
 8005b68:	d415      	bmi.n	8005b96 <_printf_i+0x212>
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	68e0      	ldr	r0, [r4, #12]
 8005b6e:	4298      	cmp	r0, r3
 8005b70:	daaa      	bge.n	8005ac8 <_printf_i+0x144>
 8005b72:	0018      	movs	r0, r3
 8005b74:	e7a8      	b.n	8005ac8 <_printf_i+0x144>
 8005b76:	0022      	movs	r2, r4
 8005b78:	2301      	movs	r3, #1
 8005b7a:	9906      	ldr	r1, [sp, #24]
 8005b7c:	9805      	ldr	r0, [sp, #20]
 8005b7e:	9e07      	ldr	r6, [sp, #28]
 8005b80:	3219      	adds	r2, #25
 8005b82:	47b0      	blx	r6
 8005b84:	3001      	adds	r0, #1
 8005b86:	d09d      	beq.n	8005ac4 <_printf_i+0x140>
 8005b88:	3501      	adds	r5, #1
 8005b8a:	68e3      	ldr	r3, [r4, #12]
 8005b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	42ab      	cmp	r3, r5
 8005b92:	dcf0      	bgt.n	8005b76 <_printf_i+0x1f2>
 8005b94:	e7e9      	b.n	8005b6a <_printf_i+0x1e6>
 8005b96:	2500      	movs	r5, #0
 8005b98:	e7f7      	b.n	8005b8a <_printf_i+0x206>
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	08006407 	.word	0x08006407
 8005ba0:	08006418 	.word	0x08006418

08005ba4 <__sflush_r>:
 8005ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ba6:	898b      	ldrh	r3, [r1, #12]
 8005ba8:	0005      	movs	r5, r0
 8005baa:	000c      	movs	r4, r1
 8005bac:	071a      	lsls	r2, r3, #28
 8005bae:	d45c      	bmi.n	8005c6a <__sflush_r+0xc6>
 8005bb0:	684a      	ldr	r2, [r1, #4]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	dc04      	bgt.n	8005bc0 <__sflush_r+0x1c>
 8005bb6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	dc01      	bgt.n	8005bc0 <__sflush_r+0x1c>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	d0fa      	beq.n	8005bbc <__sflush_r+0x18>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2080      	movs	r0, #128	; 0x80
 8005bca:	682e      	ldr	r6, [r5, #0]
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	001a      	movs	r2, r3
 8005bd0:	0140      	lsls	r0, r0, #5
 8005bd2:	6a21      	ldr	r1, [r4, #32]
 8005bd4:	4002      	ands	r2, r0
 8005bd6:	4203      	tst	r3, r0
 8005bd8:	d034      	beq.n	8005c44 <__sflush_r+0xa0>
 8005bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	075b      	lsls	r3, r3, #29
 8005be0:	d506      	bpl.n	8005bf0 <__sflush_r+0x4c>
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	1ac0      	subs	r0, r0, r3
 8005be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <__sflush_r+0x4c>
 8005bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bee:	1ac0      	subs	r0, r0, r3
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	0028      	movs	r0, r5
 8005bf6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005bf8:	6a21      	ldr	r1, [r4, #32]
 8005bfa:	47b8      	blx	r7
 8005bfc:	89a2      	ldrh	r2, [r4, #12]
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d106      	bne.n	8005c10 <__sflush_r+0x6c>
 8005c02:	6829      	ldr	r1, [r5, #0]
 8005c04:	291d      	cmp	r1, #29
 8005c06:	d82c      	bhi.n	8005c62 <__sflush_r+0xbe>
 8005c08:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <__sflush_r+0x110>)
 8005c0a:	410b      	asrs	r3, r1
 8005c0c:	07db      	lsls	r3, r3, #31
 8005c0e:	d428      	bmi.n	8005c62 <__sflush_r+0xbe>
 8005c10:	2300      	movs	r3, #0
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	04d2      	lsls	r2, r2, #19
 8005c1a:	d505      	bpl.n	8005c28 <__sflush_r+0x84>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <__sflush_r+0x82>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d100      	bne.n	8005c28 <__sflush_r+0x84>
 8005c26:	6560      	str	r0, [r4, #84]	; 0x54
 8005c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c2a:	602e      	str	r6, [r5, #0]
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	d0c5      	beq.n	8005bbc <__sflush_r+0x18>
 8005c30:	0023      	movs	r3, r4
 8005c32:	3344      	adds	r3, #68	; 0x44
 8005c34:	4299      	cmp	r1, r3
 8005c36:	d002      	beq.n	8005c3e <__sflush_r+0x9a>
 8005c38:	0028      	movs	r0, r5
 8005c3a:	f7ff fbc9 	bl	80053d0 <_free_r>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	6360      	str	r0, [r4, #52]	; 0x34
 8005c42:	e7bc      	b.n	8005bbe <__sflush_r+0x1a>
 8005c44:	2301      	movs	r3, #1
 8005c46:	0028      	movs	r0, r5
 8005c48:	47b8      	blx	r7
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	d1c6      	bne.n	8005bdc <__sflush_r+0x38>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0c3      	beq.n	8005bdc <__sflush_r+0x38>
 8005c54:	2b1d      	cmp	r3, #29
 8005c56:	d001      	beq.n	8005c5c <__sflush_r+0xb8>
 8005c58:	2b16      	cmp	r3, #22
 8005c5a:	d101      	bne.n	8005c60 <__sflush_r+0xbc>
 8005c5c:	602e      	str	r6, [r5, #0]
 8005c5e:	e7ad      	b.n	8005bbc <__sflush_r+0x18>
 8005c60:	89a2      	ldrh	r2, [r4, #12]
 8005c62:	2340      	movs	r3, #64	; 0x40
 8005c64:	4313      	orrs	r3, r2
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	e7a9      	b.n	8005bbe <__sflush_r+0x1a>
 8005c6a:	690e      	ldr	r6, [r1, #16]
 8005c6c:	2e00      	cmp	r6, #0
 8005c6e:	d0a5      	beq.n	8005bbc <__sflush_r+0x18>
 8005c70:	680f      	ldr	r7, [r1, #0]
 8005c72:	600e      	str	r6, [r1, #0]
 8005c74:	1bba      	subs	r2, r7, r6
 8005c76:	9201      	str	r2, [sp, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	d100      	bne.n	8005c80 <__sflush_r+0xdc>
 8005c7e:	694a      	ldr	r2, [r1, #20]
 8005c80:	60a2      	str	r2, [r4, #8]
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dd99      	ble.n	8005bbc <__sflush_r+0x18>
 8005c88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c8a:	0032      	movs	r2, r6
 8005c8c:	001f      	movs	r7, r3
 8005c8e:	0028      	movs	r0, r5
 8005c90:	9b01      	ldr	r3, [sp, #4]
 8005c92:	6a21      	ldr	r1, [r4, #32]
 8005c94:	47b8      	blx	r7
 8005c96:	2800      	cmp	r0, #0
 8005c98:	dc06      	bgt.n	8005ca8 <__sflush_r+0x104>
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	89a2      	ldrh	r2, [r4, #12]
 8005ca0:	4240      	negs	r0, r0
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	81a3      	strh	r3, [r4, #12]
 8005ca6:	e78a      	b.n	8005bbe <__sflush_r+0x1a>
 8005ca8:	9b01      	ldr	r3, [sp, #4]
 8005caa:	1836      	adds	r6, r6, r0
 8005cac:	1a1b      	subs	r3, r3, r0
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	e7e7      	b.n	8005c82 <__sflush_r+0xde>
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	dfbffffe 	.word	0xdfbffffe

08005cb8 <_fflush_r>:
 8005cb8:	690b      	ldr	r3, [r1, #16]
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	0005      	movs	r5, r0
 8005cbe:	000c      	movs	r4, r1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <_fflush_r+0x12>
 8005cc4:	2500      	movs	r5, #0
 8005cc6:	0028      	movs	r0, r5
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d004      	beq.n	8005cd8 <_fflush_r+0x20>
 8005cce:	6a03      	ldr	r3, [r0, #32]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <_fflush_r+0x20>
 8005cd4:	f7ff f92c 	bl	8004f30 <__sinit>
 8005cd8:	220c      	movs	r2, #12
 8005cda:	5ea3      	ldrsh	r3, [r4, r2]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f1      	beq.n	8005cc4 <_fflush_r+0xc>
 8005ce0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ce2:	07d2      	lsls	r2, r2, #31
 8005ce4:	d404      	bmi.n	8005cf0 <_fflush_r+0x38>
 8005ce6:	059b      	lsls	r3, r3, #22
 8005ce8:	d402      	bmi.n	8005cf0 <_fflush_r+0x38>
 8005cea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cec:	f7ff fb47 	bl	800537e <__retarget_lock_acquire_recursive>
 8005cf0:	0028      	movs	r0, r5
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	f7ff ff56 	bl	8005ba4 <__sflush_r>
 8005cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfa:	0005      	movs	r5, r0
 8005cfc:	07db      	lsls	r3, r3, #31
 8005cfe:	d4e2      	bmi.n	8005cc6 <_fflush_r+0xe>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	059b      	lsls	r3, r3, #22
 8005d04:	d4df      	bmi.n	8005cc6 <_fflush_r+0xe>
 8005d06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d08:	f7ff fb3a 	bl	8005380 <__retarget_lock_release_recursive>
 8005d0c:	e7db      	b.n	8005cc6 <_fflush_r+0xe>
	...

08005d10 <fiprintf>:
 8005d10:	b40e      	push	{r1, r2, r3}
 8005d12:	b517      	push	{r0, r1, r2, r4, lr}
 8005d14:	4c05      	ldr	r4, [pc, #20]	; (8005d2c <fiprintf+0x1c>)
 8005d16:	ab05      	add	r3, sp, #20
 8005d18:	cb04      	ldmia	r3!, {r2}
 8005d1a:	0001      	movs	r1, r0
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	f000 f91e 	bl	8005f60 <_vfiprintf_r>
 8005d24:	bc1e      	pop	{r1, r2, r3, r4}
 8005d26:	bc08      	pop	{r3}
 8005d28:	b003      	add	sp, #12
 8005d2a:	4718      	bx	r3
 8005d2c:	20000064 	.word	0x20000064

08005d30 <__swhatbuf_r>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	000e      	movs	r6, r1
 8005d34:	001d      	movs	r5, r3
 8005d36:	230e      	movs	r3, #14
 8005d38:	5ec9      	ldrsh	r1, [r1, r3]
 8005d3a:	0014      	movs	r4, r2
 8005d3c:	b096      	sub	sp, #88	; 0x58
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	da0c      	bge.n	8005d5c <__swhatbuf_r+0x2c>
 8005d42:	89b2      	ldrh	r2, [r6, #12]
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	0011      	movs	r1, r2
 8005d48:	4019      	ands	r1, r3
 8005d4a:	421a      	tst	r2, r3
 8005d4c:	d013      	beq.n	8005d76 <__swhatbuf_r+0x46>
 8005d4e:	2100      	movs	r1, #0
 8005d50:	3b40      	subs	r3, #64	; 0x40
 8005d52:	2000      	movs	r0, #0
 8005d54:	6029      	str	r1, [r5, #0]
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	b016      	add	sp, #88	; 0x58
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	466a      	mov	r2, sp
 8005d5e:	f000 f861 	bl	8005e24 <_fstat_r>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	dbed      	blt.n	8005d42 <__swhatbuf_r+0x12>
 8005d66:	23f0      	movs	r3, #240	; 0xf0
 8005d68:	9901      	ldr	r1, [sp, #4]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	4019      	ands	r1, r3
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <__swhatbuf_r+0x4c>)
 8005d70:	18c9      	adds	r1, r1, r3
 8005d72:	424b      	negs	r3, r1
 8005d74:	4159      	adcs	r1, r3
 8005d76:	2380      	movs	r3, #128	; 0x80
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	e7ea      	b.n	8005d52 <__swhatbuf_r+0x22>
 8005d7c:	ffffe000 	.word	0xffffe000

08005d80 <__smakebuf_r>:
 8005d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d82:	2602      	movs	r6, #2
 8005d84:	898b      	ldrh	r3, [r1, #12]
 8005d86:	0005      	movs	r5, r0
 8005d88:	000c      	movs	r4, r1
 8005d8a:	4233      	tst	r3, r6
 8005d8c:	d006      	beq.n	8005d9c <__smakebuf_r+0x1c>
 8005d8e:	0023      	movs	r3, r4
 8005d90:	3347      	adds	r3, #71	; 0x47
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	2301      	movs	r3, #1
 8005d98:	6163      	str	r3, [r4, #20]
 8005d9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005d9c:	466a      	mov	r2, sp
 8005d9e:	ab01      	add	r3, sp, #4
 8005da0:	f7ff ffc6 	bl	8005d30 <__swhatbuf_r>
 8005da4:	9900      	ldr	r1, [sp, #0]
 8005da6:	0007      	movs	r7, r0
 8005da8:	0028      	movs	r0, r5
 8005daa:	f7ff fb87 	bl	80054bc <_malloc_r>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d108      	bne.n	8005dc4 <__smakebuf_r+0x44>
 8005db2:	220c      	movs	r2, #12
 8005db4:	5ea3      	ldrsh	r3, [r4, r2]
 8005db6:	059a      	lsls	r2, r3, #22
 8005db8:	d4ef      	bmi.n	8005d9a <__smakebuf_r+0x1a>
 8005dba:	2203      	movs	r2, #3
 8005dbc:	4393      	bics	r3, r2
 8005dbe:	431e      	orrs	r6, r3
 8005dc0:	81a6      	strh	r6, [r4, #12]
 8005dc2:	e7e4      	b.n	8005d8e <__smakebuf_r+0xe>
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	89a2      	ldrh	r2, [r4, #12]
 8005dc8:	6020      	str	r0, [r4, #0]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	9b00      	ldr	r3, [sp, #0]
 8005dd0:	6120      	str	r0, [r4, #16]
 8005dd2:	6163      	str	r3, [r4, #20]
 8005dd4:	9b01      	ldr	r3, [sp, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <__smakebuf_r+0x74>
 8005dda:	0028      	movs	r0, r5
 8005ddc:	230e      	movs	r3, #14
 8005dde:	5ee1      	ldrsh	r1, [r4, r3]
 8005de0:	f000 f832 	bl	8005e48 <_isatty_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d005      	beq.n	8005df4 <__smakebuf_r+0x74>
 8005de8:	2303      	movs	r3, #3
 8005dea:	89a2      	ldrh	r2, [r4, #12]
 8005dec:	439a      	bics	r2, r3
 8005dee:	3b02      	subs	r3, #2
 8005df0:	4313      	orrs	r3, r2
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	433b      	orrs	r3, r7
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	e7ce      	b.n	8005d9a <__smakebuf_r+0x1a>

08005dfc <memmove>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4288      	cmp	r0, r1
 8005e00:	d902      	bls.n	8005e08 <memmove+0xc>
 8005e02:	188b      	adds	r3, r1, r2
 8005e04:	4298      	cmp	r0, r3
 8005e06:	d303      	bcc.n	8005e10 <memmove+0x14>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e007      	b.n	8005e1c <memmove+0x20>
 8005e0c:	5c8b      	ldrb	r3, [r1, r2]
 8005e0e:	5483      	strb	r3, [r0, r2]
 8005e10:	3a01      	subs	r2, #1
 8005e12:	d2fb      	bcs.n	8005e0c <memmove+0x10>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	5ccc      	ldrb	r4, [r1, r3]
 8005e18:	54c4      	strb	r4, [r0, r3]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d1fa      	bne.n	8005e16 <memmove+0x1a>
 8005e20:	e7f8      	b.n	8005e14 <memmove+0x18>
	...

08005e24 <_fstat_r>:
 8005e24:	2300      	movs	r3, #0
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	4d06      	ldr	r5, [pc, #24]	; (8005e44 <_fstat_r+0x20>)
 8005e2a:	0004      	movs	r4, r0
 8005e2c:	0008      	movs	r0, r1
 8005e2e:	0011      	movs	r1, r2
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	f7fd f8e8 	bl	8003006 <_fstat>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d103      	bne.n	8005e42 <_fstat_r+0x1e>
 8005e3a:	682b      	ldr	r3, [r5, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d000      	beq.n	8005e42 <_fstat_r+0x1e>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	bd70      	pop	{r4, r5, r6, pc}
 8005e44:	20000350 	.word	0x20000350

08005e48 <_isatty_r>:
 8005e48:	2300      	movs	r3, #0
 8005e4a:	b570      	push	{r4, r5, r6, lr}
 8005e4c:	4d06      	ldr	r5, [pc, #24]	; (8005e68 <_isatty_r+0x20>)
 8005e4e:	0004      	movs	r4, r0
 8005e50:	0008      	movs	r0, r1
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	f7fd f8dc 	bl	8003010 <_isatty>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d103      	bne.n	8005e64 <_isatty_r+0x1c>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d000      	beq.n	8005e64 <_isatty_r+0x1c>
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	bd70      	pop	{r4, r5, r6, pc}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	20000350 	.word	0x20000350

08005e6c <_sbrk_r>:
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	b570      	push	{r4, r5, r6, lr}
 8005e70:	4d06      	ldr	r5, [pc, #24]	; (8005e8c <_sbrk_r+0x20>)
 8005e72:	0004      	movs	r4, r0
 8005e74:	0008      	movs	r0, r1
 8005e76:	602b      	str	r3, [r5, #0]
 8005e78:	f7fd f8ce 	bl	8003018 <_sbrk>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d103      	bne.n	8005e88 <_sbrk_r+0x1c>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d000      	beq.n	8005e88 <_sbrk_r+0x1c>
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	bd70      	pop	{r4, r5, r6, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	20000350 	.word	0x20000350

08005e90 <memchr>:
 8005e90:	b2c9      	uxtb	r1, r1
 8005e92:	1882      	adds	r2, r0, r2
 8005e94:	4290      	cmp	r0, r2
 8005e96:	d101      	bne.n	8005e9c <memchr+0xc>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	4770      	bx	lr
 8005e9c:	7803      	ldrb	r3, [r0, #0]
 8005e9e:	428b      	cmp	r3, r1
 8005ea0:	d0fb      	beq.n	8005e9a <memchr+0xa>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	e7f6      	b.n	8005e94 <memchr+0x4>

08005ea6 <abort>:
 8005ea6:	2006      	movs	r0, #6
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	f000 f99f 	bl	80061ec <raise>
 8005eae:	2001      	movs	r0, #1
 8005eb0:	f7fd f886 	bl	8002fc0 <_exit>

08005eb4 <_realloc_r>:
 8005eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eb6:	0007      	movs	r7, r0
 8005eb8:	000e      	movs	r6, r1
 8005eba:	0014      	movs	r4, r2
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d105      	bne.n	8005ecc <_realloc_r+0x18>
 8005ec0:	0011      	movs	r1, r2
 8005ec2:	f7ff fafb 	bl	80054bc <_malloc_r>
 8005ec6:	0005      	movs	r5, r0
 8005ec8:	0028      	movs	r0, r5
 8005eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ecc:	2a00      	cmp	r2, #0
 8005ece:	d103      	bne.n	8005ed8 <_realloc_r+0x24>
 8005ed0:	f7ff fa7e 	bl	80053d0 <_free_r>
 8005ed4:	0025      	movs	r5, r4
 8005ed6:	e7f7      	b.n	8005ec8 <_realloc_r+0x14>
 8005ed8:	f000 f9a8 	bl	800622c <_malloc_usable_size_r>
 8005edc:	9001      	str	r0, [sp, #4]
 8005ede:	4284      	cmp	r4, r0
 8005ee0:	d803      	bhi.n	8005eea <_realloc_r+0x36>
 8005ee2:	0035      	movs	r5, r6
 8005ee4:	0843      	lsrs	r3, r0, #1
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	d3ee      	bcc.n	8005ec8 <_realloc_r+0x14>
 8005eea:	0021      	movs	r1, r4
 8005eec:	0038      	movs	r0, r7
 8005eee:	f7ff fae5 	bl	80054bc <_malloc_r>
 8005ef2:	1e05      	subs	r5, r0, #0
 8005ef4:	d0e8      	beq.n	8005ec8 <_realloc_r+0x14>
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	0022      	movs	r2, r4
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d900      	bls.n	8005f00 <_realloc_r+0x4c>
 8005efe:	001a      	movs	r2, r3
 8005f00:	0031      	movs	r1, r6
 8005f02:	0028      	movs	r0, r5
 8005f04:	f7ff fa3d 	bl	8005382 <memcpy>
 8005f08:	0031      	movs	r1, r6
 8005f0a:	0038      	movs	r0, r7
 8005f0c:	f7ff fa60 	bl	80053d0 <_free_r>
 8005f10:	e7da      	b.n	8005ec8 <_realloc_r+0x14>

08005f12 <__sfputc_r>:
 8005f12:	6893      	ldr	r3, [r2, #8]
 8005f14:	b510      	push	{r4, lr}
 8005f16:	3b01      	subs	r3, #1
 8005f18:	6093      	str	r3, [r2, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da04      	bge.n	8005f28 <__sfputc_r+0x16>
 8005f1e:	6994      	ldr	r4, [r2, #24]
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	db07      	blt.n	8005f34 <__sfputc_r+0x22>
 8005f24:	290a      	cmp	r1, #10
 8005f26:	d005      	beq.n	8005f34 <__sfputc_r+0x22>
 8005f28:	6813      	ldr	r3, [r2, #0]
 8005f2a:	1c58      	adds	r0, r3, #1
 8005f2c:	6010      	str	r0, [r2, #0]
 8005f2e:	7019      	strb	r1, [r3, #0]
 8005f30:	0008      	movs	r0, r1
 8005f32:	bd10      	pop	{r4, pc}
 8005f34:	f7ff f8fc 	bl	8005130 <__swbuf_r>
 8005f38:	0001      	movs	r1, r0
 8005f3a:	e7f9      	b.n	8005f30 <__sfputc_r+0x1e>

08005f3c <__sfputs_r>:
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	0006      	movs	r6, r0
 8005f40:	000f      	movs	r7, r1
 8005f42:	0014      	movs	r4, r2
 8005f44:	18d5      	adds	r5, r2, r3
 8005f46:	42ac      	cmp	r4, r5
 8005f48:	d101      	bne.n	8005f4e <__sfputs_r+0x12>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e007      	b.n	8005f5e <__sfputs_r+0x22>
 8005f4e:	7821      	ldrb	r1, [r4, #0]
 8005f50:	003a      	movs	r2, r7
 8005f52:	0030      	movs	r0, r6
 8005f54:	f7ff ffdd 	bl	8005f12 <__sfputc_r>
 8005f58:	3401      	adds	r4, #1
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	d1f3      	bne.n	8005f46 <__sfputs_r+0xa>
 8005f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f60 <_vfiprintf_r>:
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	b0a1      	sub	sp, #132	; 0x84
 8005f64:	000f      	movs	r7, r1
 8005f66:	0015      	movs	r5, r2
 8005f68:	001e      	movs	r6, r3
 8005f6a:	9003      	str	r0, [sp, #12]
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d004      	beq.n	8005f7a <_vfiprintf_r+0x1a>
 8005f70:	6a03      	ldr	r3, [r0, #32]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <_vfiprintf_r+0x1a>
 8005f76:	f7fe ffdb 	bl	8004f30 <__sinit>
 8005f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f7c:	07db      	lsls	r3, r3, #31
 8005f7e:	d405      	bmi.n	8005f8c <_vfiprintf_r+0x2c>
 8005f80:	89bb      	ldrh	r3, [r7, #12]
 8005f82:	059b      	lsls	r3, r3, #22
 8005f84:	d402      	bmi.n	8005f8c <_vfiprintf_r+0x2c>
 8005f86:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005f88:	f7ff f9f9 	bl	800537e <__retarget_lock_acquire_recursive>
 8005f8c:	89bb      	ldrh	r3, [r7, #12]
 8005f8e:	071b      	lsls	r3, r3, #28
 8005f90:	d502      	bpl.n	8005f98 <_vfiprintf_r+0x38>
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d113      	bne.n	8005fc0 <_vfiprintf_r+0x60>
 8005f98:	0039      	movs	r1, r7
 8005f9a:	9803      	ldr	r0, [sp, #12]
 8005f9c:	f7ff f90a 	bl	80051b4 <__swsetup_r>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d00d      	beq.n	8005fc0 <_vfiprintf_r+0x60>
 8005fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fa6:	07db      	lsls	r3, r3, #31
 8005fa8:	d503      	bpl.n	8005fb2 <_vfiprintf_r+0x52>
 8005faa:	2001      	movs	r0, #1
 8005fac:	4240      	negs	r0, r0
 8005fae:	b021      	add	sp, #132	; 0x84
 8005fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb2:	89bb      	ldrh	r3, [r7, #12]
 8005fb4:	059b      	lsls	r3, r3, #22
 8005fb6:	d4f8      	bmi.n	8005faa <_vfiprintf_r+0x4a>
 8005fb8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005fba:	f7ff f9e1 	bl	8005380 <__retarget_lock_release_recursive>
 8005fbe:	e7f4      	b.n	8005faa <_vfiprintf_r+0x4a>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	ac08      	add	r4, sp, #32
 8005fc4:	6163      	str	r3, [r4, #20]
 8005fc6:	3320      	adds	r3, #32
 8005fc8:	7663      	strb	r3, [r4, #25]
 8005fca:	3310      	adds	r3, #16
 8005fcc:	76a3      	strb	r3, [r4, #26]
 8005fce:	9607      	str	r6, [sp, #28]
 8005fd0:	002e      	movs	r6, r5
 8005fd2:	7833      	ldrb	r3, [r6, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <_vfiprintf_r+0x7c>
 8005fd8:	2b25      	cmp	r3, #37	; 0x25
 8005fda:	d148      	bne.n	800606e <_vfiprintf_r+0x10e>
 8005fdc:	1b73      	subs	r3, r6, r5
 8005fde:	9305      	str	r3, [sp, #20]
 8005fe0:	42ae      	cmp	r6, r5
 8005fe2:	d00b      	beq.n	8005ffc <_vfiprintf_r+0x9c>
 8005fe4:	002a      	movs	r2, r5
 8005fe6:	0039      	movs	r1, r7
 8005fe8:	9803      	ldr	r0, [sp, #12]
 8005fea:	f7ff ffa7 	bl	8005f3c <__sfputs_r>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d100      	bne.n	8005ff4 <_vfiprintf_r+0x94>
 8005ff2:	e0af      	b.n	8006154 <_vfiprintf_r+0x1f4>
 8005ff4:	6963      	ldr	r3, [r4, #20]
 8005ff6:	9a05      	ldr	r2, [sp, #20]
 8005ff8:	189b      	adds	r3, r3, r2
 8005ffa:	6163      	str	r3, [r4, #20]
 8005ffc:	7833      	ldrb	r3, [r6, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d100      	bne.n	8006004 <_vfiprintf_r+0xa4>
 8006002:	e0a7      	b.n	8006154 <_vfiprintf_r+0x1f4>
 8006004:	2201      	movs	r2, #1
 8006006:	2300      	movs	r3, #0
 8006008:	4252      	negs	r2, r2
 800600a:	6062      	str	r2, [r4, #4]
 800600c:	a904      	add	r1, sp, #16
 800600e:	3254      	adds	r2, #84	; 0x54
 8006010:	1852      	adds	r2, r2, r1
 8006012:	1c75      	adds	r5, r6, #1
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	60e3      	str	r3, [r4, #12]
 8006018:	60a3      	str	r3, [r4, #8]
 800601a:	7013      	strb	r3, [r2, #0]
 800601c:	65a3      	str	r3, [r4, #88]	; 0x58
 800601e:	4b59      	ldr	r3, [pc, #356]	; (8006184 <_vfiprintf_r+0x224>)
 8006020:	2205      	movs	r2, #5
 8006022:	0018      	movs	r0, r3
 8006024:	7829      	ldrb	r1, [r5, #0]
 8006026:	9305      	str	r3, [sp, #20]
 8006028:	f7ff ff32 	bl	8005e90 <memchr>
 800602c:	1c6e      	adds	r6, r5, #1
 800602e:	2800      	cmp	r0, #0
 8006030:	d11f      	bne.n	8006072 <_vfiprintf_r+0x112>
 8006032:	6822      	ldr	r2, [r4, #0]
 8006034:	06d3      	lsls	r3, r2, #27
 8006036:	d504      	bpl.n	8006042 <_vfiprintf_r+0xe2>
 8006038:	2353      	movs	r3, #83	; 0x53
 800603a:	a904      	add	r1, sp, #16
 800603c:	185b      	adds	r3, r3, r1
 800603e:	2120      	movs	r1, #32
 8006040:	7019      	strb	r1, [r3, #0]
 8006042:	0713      	lsls	r3, r2, #28
 8006044:	d504      	bpl.n	8006050 <_vfiprintf_r+0xf0>
 8006046:	2353      	movs	r3, #83	; 0x53
 8006048:	a904      	add	r1, sp, #16
 800604a:	185b      	adds	r3, r3, r1
 800604c:	212b      	movs	r1, #43	; 0x2b
 800604e:	7019      	strb	r1, [r3, #0]
 8006050:	782b      	ldrb	r3, [r5, #0]
 8006052:	2b2a      	cmp	r3, #42	; 0x2a
 8006054:	d016      	beq.n	8006084 <_vfiprintf_r+0x124>
 8006056:	002e      	movs	r6, r5
 8006058:	2100      	movs	r1, #0
 800605a:	200a      	movs	r0, #10
 800605c:	68e3      	ldr	r3, [r4, #12]
 800605e:	7832      	ldrb	r2, [r6, #0]
 8006060:	1c75      	adds	r5, r6, #1
 8006062:	3a30      	subs	r2, #48	; 0x30
 8006064:	2a09      	cmp	r2, #9
 8006066:	d94e      	bls.n	8006106 <_vfiprintf_r+0x1a6>
 8006068:	2900      	cmp	r1, #0
 800606a:	d111      	bne.n	8006090 <_vfiprintf_r+0x130>
 800606c:	e017      	b.n	800609e <_vfiprintf_r+0x13e>
 800606e:	3601      	adds	r6, #1
 8006070:	e7af      	b.n	8005fd2 <_vfiprintf_r+0x72>
 8006072:	9b05      	ldr	r3, [sp, #20]
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	1ac0      	subs	r0, r0, r3
 8006078:	2301      	movs	r3, #1
 800607a:	4083      	lsls	r3, r0
 800607c:	4313      	orrs	r3, r2
 800607e:	0035      	movs	r5, r6
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	e7cc      	b.n	800601e <_vfiprintf_r+0xbe>
 8006084:	9b07      	ldr	r3, [sp, #28]
 8006086:	1d19      	adds	r1, r3, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	9107      	str	r1, [sp, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	db01      	blt.n	8006094 <_vfiprintf_r+0x134>
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	e004      	b.n	800609e <_vfiprintf_r+0x13e>
 8006094:	425b      	negs	r3, r3
 8006096:	60e3      	str	r3, [r4, #12]
 8006098:	2302      	movs	r3, #2
 800609a:	4313      	orrs	r3, r2
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	7833      	ldrb	r3, [r6, #0]
 80060a0:	2b2e      	cmp	r3, #46	; 0x2e
 80060a2:	d10a      	bne.n	80060ba <_vfiprintf_r+0x15a>
 80060a4:	7873      	ldrb	r3, [r6, #1]
 80060a6:	2b2a      	cmp	r3, #42	; 0x2a
 80060a8:	d135      	bne.n	8006116 <_vfiprintf_r+0x1b6>
 80060aa:	9b07      	ldr	r3, [sp, #28]
 80060ac:	3602      	adds	r6, #2
 80060ae:	1d1a      	adds	r2, r3, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	9207      	str	r2, [sp, #28]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db2b      	blt.n	8006110 <_vfiprintf_r+0x1b0>
 80060b8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ba:	4d33      	ldr	r5, [pc, #204]	; (8006188 <_vfiprintf_r+0x228>)
 80060bc:	2203      	movs	r2, #3
 80060be:	0028      	movs	r0, r5
 80060c0:	7831      	ldrb	r1, [r6, #0]
 80060c2:	f7ff fee5 	bl	8005e90 <memchr>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d006      	beq.n	80060d8 <_vfiprintf_r+0x178>
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	1b40      	subs	r0, r0, r5
 80060ce:	4083      	lsls	r3, r0
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	3601      	adds	r6, #1
 80060d4:	4313      	orrs	r3, r2
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	7831      	ldrb	r1, [r6, #0]
 80060da:	2206      	movs	r2, #6
 80060dc:	482b      	ldr	r0, [pc, #172]	; (800618c <_vfiprintf_r+0x22c>)
 80060de:	1c75      	adds	r5, r6, #1
 80060e0:	7621      	strb	r1, [r4, #24]
 80060e2:	f7ff fed5 	bl	8005e90 <memchr>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d043      	beq.n	8006172 <_vfiprintf_r+0x212>
 80060ea:	4b29      	ldr	r3, [pc, #164]	; (8006190 <_vfiprintf_r+0x230>)
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d125      	bne.n	800613c <_vfiprintf_r+0x1dc>
 80060f0:	2207      	movs	r2, #7
 80060f2:	9b07      	ldr	r3, [sp, #28]
 80060f4:	3307      	adds	r3, #7
 80060f6:	4393      	bics	r3, r2
 80060f8:	3308      	adds	r3, #8
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	6963      	ldr	r3, [r4, #20]
 80060fe:	9a04      	ldr	r2, [sp, #16]
 8006100:	189b      	adds	r3, r3, r2
 8006102:	6163      	str	r3, [r4, #20]
 8006104:	e764      	b.n	8005fd0 <_vfiprintf_r+0x70>
 8006106:	4343      	muls	r3, r0
 8006108:	002e      	movs	r6, r5
 800610a:	2101      	movs	r1, #1
 800610c:	189b      	adds	r3, r3, r2
 800610e:	e7a6      	b.n	800605e <_vfiprintf_r+0xfe>
 8006110:	2301      	movs	r3, #1
 8006112:	425b      	negs	r3, r3
 8006114:	e7d0      	b.n	80060b8 <_vfiprintf_r+0x158>
 8006116:	2300      	movs	r3, #0
 8006118:	200a      	movs	r0, #10
 800611a:	001a      	movs	r2, r3
 800611c:	3601      	adds	r6, #1
 800611e:	6063      	str	r3, [r4, #4]
 8006120:	7831      	ldrb	r1, [r6, #0]
 8006122:	1c75      	adds	r5, r6, #1
 8006124:	3930      	subs	r1, #48	; 0x30
 8006126:	2909      	cmp	r1, #9
 8006128:	d903      	bls.n	8006132 <_vfiprintf_r+0x1d2>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0c5      	beq.n	80060ba <_vfiprintf_r+0x15a>
 800612e:	9209      	str	r2, [sp, #36]	; 0x24
 8006130:	e7c3      	b.n	80060ba <_vfiprintf_r+0x15a>
 8006132:	4342      	muls	r2, r0
 8006134:	002e      	movs	r6, r5
 8006136:	2301      	movs	r3, #1
 8006138:	1852      	adds	r2, r2, r1
 800613a:	e7f1      	b.n	8006120 <_vfiprintf_r+0x1c0>
 800613c:	aa07      	add	r2, sp, #28
 800613e:	9200      	str	r2, [sp, #0]
 8006140:	0021      	movs	r1, r4
 8006142:	003a      	movs	r2, r7
 8006144:	4b13      	ldr	r3, [pc, #76]	; (8006194 <_vfiprintf_r+0x234>)
 8006146:	9803      	ldr	r0, [sp, #12]
 8006148:	e000      	b.n	800614c <_vfiprintf_r+0x1ec>
 800614a:	bf00      	nop
 800614c:	9004      	str	r0, [sp, #16]
 800614e:	9b04      	ldr	r3, [sp, #16]
 8006150:	3301      	adds	r3, #1
 8006152:	d1d3      	bne.n	80060fc <_vfiprintf_r+0x19c>
 8006154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006156:	07db      	lsls	r3, r3, #31
 8006158:	d405      	bmi.n	8006166 <_vfiprintf_r+0x206>
 800615a:	89bb      	ldrh	r3, [r7, #12]
 800615c:	059b      	lsls	r3, r3, #22
 800615e:	d402      	bmi.n	8006166 <_vfiprintf_r+0x206>
 8006160:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006162:	f7ff f90d 	bl	8005380 <__retarget_lock_release_recursive>
 8006166:	89bb      	ldrh	r3, [r7, #12]
 8006168:	065b      	lsls	r3, r3, #25
 800616a:	d500      	bpl.n	800616e <_vfiprintf_r+0x20e>
 800616c:	e71d      	b.n	8005faa <_vfiprintf_r+0x4a>
 800616e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006170:	e71d      	b.n	8005fae <_vfiprintf_r+0x4e>
 8006172:	aa07      	add	r2, sp, #28
 8006174:	9200      	str	r2, [sp, #0]
 8006176:	0021      	movs	r1, r4
 8006178:	003a      	movs	r2, r7
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <_vfiprintf_r+0x234>)
 800617c:	9803      	ldr	r0, [sp, #12]
 800617e:	f7ff fc01 	bl	8005984 <_printf_i>
 8006182:	e7e3      	b.n	800614c <_vfiprintf_r+0x1ec>
 8006184:	080063f6 	.word	0x080063f6
 8006188:	080063fc 	.word	0x080063fc
 800618c:	08006400 	.word	0x08006400
 8006190:	00000000 	.word	0x00000000
 8006194:	08005f3d 	.word	0x08005f3d

08006198 <_raise_r>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	0004      	movs	r4, r0
 800619c:	000d      	movs	r5, r1
 800619e:	291f      	cmp	r1, #31
 80061a0:	d904      	bls.n	80061ac <_raise_r+0x14>
 80061a2:	2316      	movs	r3, #22
 80061a4:	6003      	str	r3, [r0, #0]
 80061a6:	2001      	movs	r0, #1
 80061a8:	4240      	negs	r0, r0
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <_raise_r+0x24>
 80061b2:	008a      	lsls	r2, r1, #2
 80061b4:	189b      	adds	r3, r3, r2
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	d108      	bne.n	80061ce <_raise_r+0x36>
 80061bc:	0020      	movs	r0, r4
 80061be:	f000 f831 	bl	8006224 <_getpid_r>
 80061c2:	002a      	movs	r2, r5
 80061c4:	0001      	movs	r1, r0
 80061c6:	0020      	movs	r0, r4
 80061c8:	f000 f81a 	bl	8006200 <_kill_r>
 80061cc:	e7ed      	b.n	80061aa <_raise_r+0x12>
 80061ce:	2000      	movs	r0, #0
 80061d0:	2a01      	cmp	r2, #1
 80061d2:	d0ea      	beq.n	80061aa <_raise_r+0x12>
 80061d4:	1c51      	adds	r1, r2, #1
 80061d6:	d103      	bne.n	80061e0 <_raise_r+0x48>
 80061d8:	2316      	movs	r3, #22
 80061da:	3001      	adds	r0, #1
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	e7e4      	b.n	80061aa <_raise_r+0x12>
 80061e0:	2400      	movs	r4, #0
 80061e2:	0028      	movs	r0, r5
 80061e4:	601c      	str	r4, [r3, #0]
 80061e6:	4790      	blx	r2
 80061e8:	0020      	movs	r0, r4
 80061ea:	e7de      	b.n	80061aa <_raise_r+0x12>

080061ec <raise>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4b03      	ldr	r3, [pc, #12]	; (80061fc <raise+0x10>)
 80061f0:	0001      	movs	r1, r0
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	f7ff ffd0 	bl	8006198 <_raise_r>
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	46c0      	nop			; (mov r8, r8)
 80061fc:	20000064 	.word	0x20000064

08006200 <_kill_r>:
 8006200:	2300      	movs	r3, #0
 8006202:	b570      	push	{r4, r5, r6, lr}
 8006204:	4d06      	ldr	r5, [pc, #24]	; (8006220 <_kill_r+0x20>)
 8006206:	0004      	movs	r4, r0
 8006208:	0008      	movs	r0, r1
 800620a:	0011      	movs	r1, r2
 800620c:	602b      	str	r3, [r5, #0]
 800620e:	f7fc fecf 	bl	8002fb0 <_kill>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	d103      	bne.n	800621e <_kill_r+0x1e>
 8006216:	682b      	ldr	r3, [r5, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d000      	beq.n	800621e <_kill_r+0x1e>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	20000350 	.word	0x20000350

08006224 <_getpid_r>:
 8006224:	b510      	push	{r4, lr}
 8006226:	f7fc fec1 	bl	8002fac <_getpid>
 800622a:	bd10      	pop	{r4, pc}

0800622c <_malloc_usable_size_r>:
 800622c:	1f0b      	subs	r3, r1, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	1f18      	subs	r0, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	da01      	bge.n	800623a <_malloc_usable_size_r+0xe>
 8006236:	580b      	ldr	r3, [r1, r0]
 8006238:	18c0      	adds	r0, r0, r3
 800623a:	4770      	bx	lr

0800623c <_init>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr

08006248 <_fini>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr
